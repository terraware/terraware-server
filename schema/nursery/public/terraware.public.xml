<?xml version="1.0" encoding="UTF-8"?><database name="terraware" schema="public" type="PostgreSQL - 17.4 (Debian 17.4-1.pgdg110+2)">
   <tables>
      <table name="files" remarks="Generic information about individual files. Files are associated with application entities using linking tables such as `accession_photos`." schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="null" digits="0" id="0" name="id" nullable="false" remarks="" size="19" type="int8" typeCode="-5">
            <child column="file_id" foreignKey="activity_media_files_file_id_fkey" implied="false" onDeleteCascade="true" schema="accelerator" table="activity_media_files"/>
            <child column="file_id" foreignKey="submission_snapshots_file_id_fkey" implied="false" onDeleteCascade="true" schema="accelerator" table="submission_snapshots"/>
            <child column="file_id" foreignKey="variable_image_values_file_id_fkey" implied="false" onDeleteCascade="false" schema="docprod" table="variable_image_values"/>
            <child column="file_id" foreignKey="batch_photos_file_id_fkey" implied="false" onDeleteCascade="false" schema="nursery" table="batch_photos"/>
            <child column="file_id" foreignKey="withdrawal_photos_photo_id_fkey" implied="false" onDeleteCascade="false" schema="nursery" table="withdrawal_photos"/>
            <child column="file_id" foreignKey="accession_photos_photo_id_fkey" implied="false" onDeleteCascade="false" schema="seedbank" table="accession_photos"/>
            <child column="file_id" foreignKey="observation_photos_file_id_fkey" implied="false" onDeleteCascade="true" schema="tracking" table="observation_photos"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="file_name" nullable="false" remarks="" size="2147483647" type="text" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="content_type" nullable="false" remarks="" size="2147483647" type="text" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="size" nullable="false" remarks="" size="19" type="int8" typeCode="-5"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="4" name="created_time" nullable="false" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="5" name="modified_time" nullable="false" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="6" name="created_by" nullable="true" remarks="" size="19" type="int8" typeCode="-5"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="7" name="storage_url" nullable="false" remarks="" size="2147483647" type="text" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="8" name="modified_by" nullable="false" remarks="" size="19" type="int8" typeCode="-5"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="photos_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
         <index name="photos_storage_url_key" unique="true">
            <column ascending="true" name="storage_url"/>
         </index>
         <checkConstraint constraint="(length(content_type) &gt; 0)" name="content_type_cannot_be_empty_string"/>
         <checkConstraint constraint="(length(file_name) &gt; 0)" name="file_name_cannot_be_empty_string"/>
      </table>
      <table name="identifier_sequences" remarks="Current state for generating user-facing identifiers (accession number, etc.) for each organization." schema="public" type="TABLE">
         <column autoUpdated="false" defaultValue="null" digits="0" id="0" name="organization_id" nullable="false" remarks="" size="19" type="int8" typeCode="-5"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="prefix" nullable="false" remarks="" size="2147483647" type="text" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="next_value" nullable="false" remarks="" size="19" type="int8" typeCode="-5"/>
         <primaryKey column="organization_id" sequenceNumberInPK="1"/>
         <primaryKey column="prefix" sequenceNumberInPK="2"/>
         <index name="identifier_sequences_pkey" unique="true">
            <column ascending="true" name="organization_id"/>
            <column ascending="true" name="prefix"/>
         </index>
      </table>
      <table name="seed_treatments" remarks="(Enum) Techniques that can be used to treat seeds before testing them for viability." schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="null" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="int4" typeCode="4">
            <child column="treatment_id" foreignKey="batch_details_history_treatment_id_fkey" implied="false" onDeleteCascade="false" schema="nursery" table="batch_details_history"/>
            <child column="treatment_id" foreignKey="batches_treatment_id_fkey" implied="false" onDeleteCascade="false" schema="nursery" table="batches"/>
            <child column="treatment_id" foreignKey="germination_test_treatment_id_fkey" implied="false" onDeleteCascade="false" schema="seedbank" table="viability_tests"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="name" nullable="false" remarks="" size="2147483647" type="text" typeCode="12"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="germination_treatment_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
      </table>
   </tables>
   <routines>
      <routine dataAccess="MODIFIES" deterministic="true" name="_postgis_deprecate(oldname text, newname text, version text)" returnType="void" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
  curver_text text;
BEGIN
  --
  -- Raises a NOTICE if it was deprecated in this version,
  -- a WARNING if in a previous version (only up to minor version checked)
  --
	curver_text := '3.5.2';
	IF pg_catalog.split_part(curver_text,'.',1)::int > pg_catalog.split_part(version,'.',1)::int OR
	   ( pg_catalog.split_part(curver_text,'.',1) = pg_catalog.split_part(version,'.',1) AND
		 pg_catalog.split_part(curver_text,'.',2) != split_part(version,'.',2) )
	THEN
	  RAISE WARNING '% signature was deprecated in %. Please use %', oldname, version, newname;
	ELSE
	  RAISE DEBUG '% signature was deprecated in %. Please use %', oldname, version, newname;
	END IF;
END;]]></definition>
         <parameters>
            <parameter mode="IN" name="oldname" type="text"/>
            <parameter mode="IN" name="newname" type="text"/>
            <parameter mode="IN" name="version" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_postgis_index_extent(tbl regclass, col text)" returnType="box2d" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[_postgis_gserialized_index_extent]]></definition>
         <parameters>
            <parameter mode="IN" name="tbl" type="regclass"/>
            <parameter mode="IN" name="col" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_postgis_join_selectivity(regclass, text, regclass, text, text DEFAULT '2'::text)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[_postgis_gserialized_joinsel]]></definition>
         <parameters>
            <parameter mode="IN" type="regclass"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="regclass"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_postgis_pgsql_version()" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN pg_catalog.split_part(s,'.',1)::integer > 9 THEN pg_catalog.split_part(s,'.',1) || '0'
	ELSE pg_catalog.split_part(s,'.', 1) || pg_catalog.split_part(s,'.', 2) END AS v
	FROM pg_catalog.substring(version(), E'PostgreSQL ([0-9\\.]+)') AS s;]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_postgis_scripts_pgsql_version()" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT '170'::text AS version]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_postgis_selectivity(tbl regclass, att_name text, geom geometry, mode text DEFAULT '2'::text)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[_postgis_gserialized_sel]]></definition>
         <parameters>
            <parameter mode="IN" name="tbl" type="regclass"/>
            <parameter mode="IN" name="att_name" type="text"/>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="mode" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_postgis_stats(tbl regclass, att_name text, text DEFAULT '2'::text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[_postgis_gserialized_stats]]></definition>
         <parameters>
            <parameter mode="IN" name="tbl" type="regclass"/>
            <parameter mode="IN" name="att_name" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_3ddfullywithin(geom1 geometry, geom2 geometry, double precision)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_dfullywithin3d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_3ddwithin(geom1 geometry, geom2 geometry, double precision)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_dwithin3d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_3dintersects(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_3DIntersects]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_asgml(integer, geometry, integer, integer, text, text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_asGML]]></definition>
         <parameters>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_asx3d(integer, geometry, integer, integer, text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_asX3D]]></definition>
         <parameters>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_bestsrid(geography)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_bestsrid]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_bestsrid(geography, geography)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_bestsrid]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_concavehull(param_inputgeom geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
	vexhull public.geometry;
	var_resultgeom public.geometry;
	var_inputgeom public.geometry;
	vexring public.geometry;
	cavering public.geometry;
	cavept public.geometry[];
	seglength double precision;
	var_tempgeom public.geometry;
	scale_factor float := 1;
	i integer;
	BEGIN
		-- First compute the ConvexHull of the geometry
		vexhull := public.ST_ConvexHull(param_inputgeom);
		var_inputgeom := param_inputgeom;
		--A point really has no concave hull
		IF public.ST_GeometryType(vexhull) = 'ST_Point' OR public.ST_GeometryType(vexHull) = 'ST_LineString' THEN
			RETURN vexhull;
		END IF;

		-- convert the hull perimeter to a linestring so we can manipulate individual points
		vexring := CASE WHEN public.ST_GeometryType(vexhull) = 'ST_LineString' THEN vexhull ELSE public.ST_ExteriorRing(vexhull) END;
		IF abs(public.ST_X(public.ST_PointN(vexring,1))) < 1 THEN --scale the geometry to prevent stupid precision errors - not sure it works so make low for now
			scale_factor := 100;
			vexring := public.ST_Scale(vexring, scale_factor,scale_factor);
			var_inputgeom := public.ST_Scale(var_inputgeom, scale_factor, scale_factor);
			--RAISE NOTICE 'Scaling';
		END IF;
		seglength := public.ST_Length(vexring)/least(public.ST_NPoints(vexring)*2,1000) ;

		vexring := public.ST_Segmentize(vexring, seglength);
		-- find the point on the original geom that is closest to each point of the convex hull and make a new linestring out of it.
		cavering := public.ST_Collect(
			ARRAY(

				SELECT
					public.ST_ClosestPoint(var_inputgeom, pt ) As the_geom
					FROM (
						SELECT  public.ST_PointN(vexring, n ) As pt, n
							FROM
							generate_series(1, public.ST_NPoints(vexring) ) As n
						) As pt

				)
			)
		;

		var_resultgeom := public.ST_MakeLine(geom)
			FROM public.ST_Dump(cavering) As foo;

		IF public.ST_IsSimple(var_resultgeom) THEN
			var_resultgeom := public.ST_MakePolygon(var_resultgeom);
			--RAISE NOTICE 'is Simple: %', var_resultgeom;
		ELSE 
			--RAISE NOTICE 'is not Simple: %', var_resultgeom;
			var_resultgeom := public.ST_ConvexHull(var_resultgeom);
		END IF;

		IF scale_factor > 1 THEN -- scale the result back
			var_resultgeom := public.ST_Scale(var_resultgeom, 1/scale_factor, 1/scale_factor);
		END IF;

		-- make sure result covers original (#3638)
		-- Using ST_UnaryUnion since SFCGAL doesn't replace with its own implementation
		-- and SFCGAL one chokes for some reason
		var_resultgeom := public.ST_UnaryUnion(public.ST_Collect(param_inputgeom, var_resultgeom) );
		RETURN var_resultgeom;

	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="param_inputgeom" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_contains(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[contains]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_containsproperly(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[containsproperly]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_coveredby(geog1 geography, geog2 geography)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_coveredby]]></definition>
         <parameters>
            <parameter mode="IN" name="geog1" type="geography"/>
            <parameter mode="IN" name="geog2" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_coveredby(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[coveredby]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_covers(geog1 geography, geog2 geography)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_covers]]></definition>
         <parameters>
            <parameter mode="IN" name="geog1" type="geography"/>
            <parameter mode="IN" name="geog2" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_covers(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[covers]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_crosses(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[crosses]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_dfullywithin(geom1 geometry, geom2 geometry, double precision)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_dfullywithin]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_distancetree(geography, geography)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_DistanceTree($1, $2, 0.0, true)]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_distancetree(geography, geography, double precision, boolean)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_distance_tree]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_distanceuncached(geography, geography)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_DistanceUnCached($1, $2, 0.0, true)]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_distanceuncached(geography, geography, boolean)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_DistanceUnCached($1, $2, 0.0, $3)]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_distanceuncached(geography, geography, double precision, boolean)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_distance_uncached]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_dwithin(geog1 geography, geog2 geography, tolerance double precision, use_spheroid boolean DEFAULT true)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_dwithin]]></definition>
         <parameters>
            <parameter mode="IN" name="geog1" type="geography"/>
            <parameter mode="IN" name="geog2" type="geography"/>
            <parameter mode="IN" name="tolerance" type="double precision"/>
            <parameter mode="IN" name="use_spheroid" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_dwithin(geom1 geometry, geom2 geometry, double precision)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_dwithin]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_dwithinuncached(geography, geography, double precision)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT $1 OPERATOR(public.&&) public._ST_Expand($2,$3) AND $2 OPERATOR(public.&&) public._ST_Expand($1,$3) AND public._ST_DWithinUnCached($1, $2, $3, true)]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_dwithinuncached(geography, geography, double precision, boolean)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_dwithin_uncached]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_equals(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_Equals]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_expand(geography, double precision)" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_expand]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_geomfromgml(text, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geom_from_gml]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_intersects(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_Intersects]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_linecrossingdirection(line1 geometry, line2 geometry)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_LineCrossingDirection]]></definition>
         <parameters>
            <parameter mode="IN" name="line1" type="geometry"/>
            <parameter mode="IN" name="line2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_longestline(geom1 geometry, geom2 geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_longestline2d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_maxdistance(geom1 geometry, geom2 geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_maxdistance2d_linestring]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_orderingequals(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_same]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_overlaps(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[overlaps]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_pointoutside(geography)" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_point_outside]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_sortablehash(geom geometry)" returnType="bigint" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[_ST_SortableHash]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_touches(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[touches]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_voronoi(g1 geometry, clip geometry DEFAULT NULL::geometry, tolerance double precision DEFAULT 0.0, return_polygons boolean DEFAULT true)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_Voronoi]]></definition>
         <parameters>
            <parameter mode="IN" name="g1" type="geometry"/>
            <parameter mode="IN" name="clip" type="geometry"/>
            <parameter mode="IN" name="tolerance" type="double precision"/>
            <parameter mode="IN" name="return_polygons" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_within(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_Contains($2,$1)]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="addgeometrycolumn(catalog_name character varying, schema_name character varying, table_name character varying, column_name character varying, new_srid_in integer, new_type character varying, new_dim integer, use_typmod boolean DEFAULT true)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
	rec RECORD;
	sr varchar;
	real_schema name;
	sql text;
	new_srid integer;

BEGIN

	-- Verify geometry type
	IF (postgis_type_name(new_type,new_dim) IS NULL )
	THEN
		RAISE EXCEPTION 'Invalid type name "%(%)" - valid ones are:
	POINT, MULTIPOINT,
	LINESTRING, MULTILINESTRING,
	POLYGON, MULTIPOLYGON,
	CIRCULARSTRING, COMPOUNDCURVE, MULTICURVE,
	CURVEPOLYGON, MULTISURFACE,
	GEOMETRY, GEOMETRYCOLLECTION,
	POINTM, MULTIPOINTM,
	LINESTRINGM, MULTILINESTRINGM,
	POLYGONM, MULTIPOLYGONM,
	CIRCULARSTRINGM, COMPOUNDCURVEM, MULTICURVEM
	CURVEPOLYGONM, MULTISURFACEM, TRIANGLE, TRIANGLEM,
	POLYHEDRALSURFACE, POLYHEDRALSURFACEM, TIN, TINM
	or GEOMETRYCOLLECTIONM', new_type, new_dim;
		RETURN 'fail';
	END IF;

	-- Verify dimension
	IF ( (new_dim >4) OR (new_dim <2) ) THEN
		RAISE EXCEPTION 'invalid dimension';
		RETURN 'fail';
	END IF;

	IF ( (new_type LIKE '%M') AND (new_dim!=3) ) THEN
		RAISE EXCEPTION 'TypeM needs 3 dimensions';
		RETURN 'fail';
	END IF;

	-- Verify SRID
	IF ( new_srid_in > 0 ) THEN
		IF new_srid_in > 998999 THEN
			RAISE EXCEPTION 'AddGeometryColumn() - SRID must be <= %', 998999;
		END IF;
		new_srid := new_srid_in;
		SELECT SRID INTO sr FROM public.spatial_ref_sys WHERE SRID = new_srid;
		IF NOT FOUND THEN
			RAISE EXCEPTION 'AddGeometryColumn() - invalid SRID';
			RETURN 'fail';
		END IF;
	ELSE
		new_srid := public.ST_SRID('POINT EMPTY'::public.geometry);
		IF ( new_srid_in != new_srid ) THEN
			RAISE NOTICE 'SRID value % converted to the officially unknown SRID value %', new_srid_in, new_srid;
		END IF;
	END IF;

	-- Verify schema
	IF ( schema_name IS NOT NULL AND schema_name != '' ) THEN
		sql := 'SELECT nspname FROM pg_namespace ' ||
			'WHERE text(nspname) = ' || quote_literal(schema_name) ||
			'LIMIT 1';
		RAISE DEBUG '%', sql;
		EXECUTE sql INTO real_schema;

		IF ( real_schema IS NULL ) THEN
			RAISE EXCEPTION 'Schema % is not a valid schemaname', quote_literal(schema_name);
			RETURN 'fail';
		END IF;
	END IF;

	IF ( real_schema IS NULL ) THEN
		RAISE DEBUG 'Detecting schema';
		sql := 'SELECT n.nspname AS schemaname ' ||
			'FROM pg_catalog.pg_class c ' ||
			  'JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace ' ||
			'WHERE c.relkind = ' || quote_literal('r') ||
			' AND n.nspname NOT IN (' || quote_literal('pg_catalog') || ', ' || quote_literal('pg_toast') || ')' ||
			' AND pg_catalog.pg_table_is_visible(c.oid)' ||
			' AND c.relname = ' || quote_literal(table_name);
		RAISE DEBUG '%', sql;
		EXECUTE sql INTO real_schema;

		IF ( real_schema IS NULL ) THEN
			RAISE EXCEPTION 'Table % does not occur in the search_path', quote_literal(table_name);
			RETURN 'fail';
		END IF;
	END IF;

	-- Add geometry column to table
	IF use_typmod THEN
		 sql := 'ALTER TABLE ' ||
			quote_ident(real_schema) || '.' || quote_ident(table_name)
			|| ' ADD COLUMN ' || quote_ident(column_name) ||
			' geometry(' || public.postgis_type_name(new_type, new_dim) || ', ' || new_srid::text || ')';
		RAISE DEBUG '%', sql;
	ELSE
		sql := 'ALTER TABLE ' ||
			quote_ident(real_schema) || '.' || quote_ident(table_name)
			|| ' ADD COLUMN ' || quote_ident(column_name) ||
			' geometry ';
		RAISE DEBUG '%', sql;
	END IF;
	EXECUTE sql;

	IF NOT use_typmod THEN
		-- Add table CHECKs
		sql := 'ALTER TABLE ' ||
			quote_ident(real_schema) || '.' || quote_ident(table_name)
			|| ' ADD CONSTRAINT '
			|| quote_ident('enforce_srid_' || column_name)
			|| ' CHECK (st_srid(' || quote_ident(column_name) ||
			') = ' || new_srid::text || ')' ;
		RAISE DEBUG '%', sql;
		EXECUTE sql;

		sql := 'ALTER TABLE ' ||
			quote_ident(real_schema) || '.' || quote_ident(table_name)
			|| ' ADD CONSTRAINT '
			|| quote_ident('enforce_dims_' || column_name)
			|| ' CHECK (st_ndims(' || quote_ident(column_name) ||
			') = ' || new_dim::text || ')' ;
		RAISE DEBUG '%', sql;
		EXECUTE sql;

		IF ( NOT (new_type = 'GEOMETRY')) THEN
			sql := 'ALTER TABLE ' ||
				quote_ident(real_schema) || '.' || quote_ident(table_name) || ' ADD CONSTRAINT ' ||
				quote_ident('enforce_geotype_' || column_name) ||
				' CHECK (GeometryType(' ||
				quote_ident(column_name) || ')=' ||
				quote_literal(new_type) || ' OR (' ||
				quote_ident(column_name) || ') is null)';
			RAISE DEBUG '%', sql;
			EXECUTE sql;
		END IF;
	END IF;

	RETURN
		real_schema || '.' ||
		table_name || '.' || column_name ||
		' SRID:' || new_srid::text ||
		' TYPE:' || new_type ||
		' DIMS:' || new_dim::text || ' ';
END;]]></definition>
         <parameters>
            <parameter mode="IN" name="catalog_name" type="character varying"/>
            <parameter mode="IN" name="schema_name" type="character varying"/>
            <parameter mode="IN" name="table_name" type="character varying"/>
            <parameter mode="IN" name="column_name" type="character varying"/>
            <parameter mode="IN" name="new_srid_in" type="integer"/>
            <parameter mode="IN" name="new_type" type="character varying"/>
            <parameter mode="IN" name="new_dim" type="integer"/>
            <parameter mode="IN" name="use_typmod" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="addgeometrycolumn(schema_name character varying, table_name character varying, column_name character varying, new_srid integer, new_type character varying, new_dim integer, use_typmod boolean DEFAULT true)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
	ret  text;
BEGIN
	SELECT public.AddGeometryColumn('',$1,$2,$3,$4,$5,$6,$7) into ret;
	RETURN ret;
END;]]></definition>
         <parameters>
            <parameter mode="IN" name="schema_name" type="character varying"/>
            <parameter mode="IN" name="table_name" type="character varying"/>
            <parameter mode="IN" name="column_name" type="character varying"/>
            <parameter mode="IN" name="new_srid" type="integer"/>
            <parameter mode="IN" name="new_type" type="character varying"/>
            <parameter mode="IN" name="new_dim" type="integer"/>
            <parameter mode="IN" name="use_typmod" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="addgeometrycolumn(table_name character varying, column_name character varying, new_srid integer, new_type character varying, new_dim integer, use_typmod boolean DEFAULT true)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
	ret  text;
BEGIN
	SELECT public.AddGeometryColumn('','',$1,$2,$3,$4,$5, $6) into ret;
	RETURN ret;
END;]]></definition>
         <parameters>
            <parameter mode="IN" name="table_name" type="character varying"/>
            <parameter mode="IN" name="column_name" type="character varying"/>
            <parameter mode="IN" name="new_srid" type="integer"/>
            <parameter mode="IN" name="new_type" type="character varying"/>
            <parameter mode="IN" name="new_dim" type="integer"/>
            <parameter mode="IN" name="use_typmod" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="akeys(hstore)" returnType="text[]" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hstore_akeys]]></definition>
         <parameters>
            <parameter mode="IN" type="hstore"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="array_to_halfvec(double precision[], integer, boolean)" returnType="halfvec" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[array_to_halfvec]]></definition>
         <parameters>
            <parameter mode="IN" type="double precision[]"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="array_to_halfvec(integer[], integer, boolean)" returnType="halfvec" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[array_to_halfvec]]></definition>
         <parameters>
            <parameter mode="IN" type="integer[]"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="array_to_halfvec(numeric[], integer, boolean)" returnType="halfvec" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[array_to_halfvec]]></definition>
         <parameters>
            <parameter mode="IN" type="numeric[]"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="array_to_halfvec(real[], integer, boolean)" returnType="halfvec" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[array_to_halfvec]]></definition>
         <parameters>
            <parameter mode="IN" type="real[]"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="array_to_sparsevec(double precision[], integer, boolean)" returnType="sparsevec" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[array_to_sparsevec]]></definition>
         <parameters>
            <parameter mode="IN" type="double precision[]"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="array_to_sparsevec(integer[], integer, boolean)" returnType="sparsevec" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[array_to_sparsevec]]></definition>
         <parameters>
            <parameter mode="IN" type="integer[]"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="array_to_sparsevec(numeric[], integer, boolean)" returnType="sparsevec" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[array_to_sparsevec]]></definition>
         <parameters>
            <parameter mode="IN" type="numeric[]"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="array_to_sparsevec(real[], integer, boolean)" returnType="sparsevec" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[array_to_sparsevec]]></definition>
         <parameters>
            <parameter mode="IN" type="real[]"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="array_to_vector(double precision[], integer, boolean)" returnType="vector" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[array_to_vector]]></definition>
         <parameters>
            <parameter mode="IN" type="double precision[]"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="array_to_vector(integer[], integer, boolean)" returnType="vector" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[array_to_vector]]></definition>
         <parameters>
            <parameter mode="IN" type="integer[]"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="array_to_vector(numeric[], integer, boolean)" returnType="vector" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[array_to_vector]]></definition>
         <parameters>
            <parameter mode="IN" type="numeric[]"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="array_to_vector(real[], integer, boolean)" returnType="vector" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[array_to_vector]]></definition>
         <parameters>
            <parameter mode="IN" type="real[]"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="avals(hstore)" returnType="text[]" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hstore_avals]]></definition>
         <parameters>
            <parameter mode="IN" type="hstore"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="avg(halfvec)" returnType="halfvec" securityType="INVOKER" type="AGGREGATE">
         <comment/>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="halfvec"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="avg(vector)" returnType="vector" securityType="INVOKER" type="AGGREGATE">
         <comment/>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="vector"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="binary_quantize(halfvec)" returnType="bit" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[halfvec_binary_quantize]]></definition>
         <parameters>
            <parameter mode="IN" type="halfvec"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="binary_quantize(vector)" returnType="bit" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[binary_quantize]]></definition>
         <parameters>
            <parameter mode="IN" type="vector"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="box(box3d)" returnType="box" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[BOX3D_to_BOX]]></definition>
         <parameters>
            <parameter mode="IN" type="box3d"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="box(geometry)" returnType="box" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_to_BOX]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="box2d(box3d)" returnType="box2d" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[BOX3D_to_BOX2D]]></definition>
         <parameters>
            <parameter mode="IN" type="box3d"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="box2d(geometry)" returnType="box2d" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_to_BOX2D]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="box2d_in(cstring)" returnType="box2d" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[BOX2D_in]]></definition>
         <parameters>
            <parameter mode="IN" type="cstring"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="box2d_out(box2d)" returnType="cstring" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[BOX2D_out]]></definition>
         <parameters>
            <parameter mode="IN" type="box2d"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="box2df_in(cstring)" returnType="box2df" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[box2df_in]]></definition>
         <parameters>
            <parameter mode="IN" type="cstring"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="box2df_out(box2df)" returnType="cstring" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[box2df_out]]></definition>
         <parameters>
            <parameter mode="IN" type="box2df"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="box3d(box2d)" returnType="box3d" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[BOX2D_to_BOX3D]]></definition>
         <parameters>
            <parameter mode="IN" type="box2d"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="box3d(geometry)" returnType="box3d" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_to_BOX3D]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="box3d_in(cstring)" returnType="box3d" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[BOX3D_in]]></definition>
         <parameters>
            <parameter mode="IN" type="cstring"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="box3d_out(box3d)" returnType="cstring" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[BOX3D_out]]></definition>
         <parameters>
            <parameter mode="IN" type="box3d"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="box3dtobox(box3d)" returnType="box" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[BOX3D_to_BOX]]></definition>
         <parameters>
            <parameter mode="IN" type="box3d"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="bytea(geography)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_to_bytea]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="bytea(geometry)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_to_bytea]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="cash_dist(money, money)" returnType="money" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[cash_dist]]></definition>
         <parameters>
            <parameter mode="IN" type="money"/>
            <parameter mode="IN" type="money"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="column_exists(ptable text, pcolumn text)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[-- does the requested table.column exist in schema?
SELECT EXISTS
           (SELECT NULL
            FROM information_schema.columns
            WHERE table_name = ptable
              AND column_name = pcolumn
           );]]></definition>
         <parameters>
            <parameter mode="IN" name="ptable" type="text"/>
            <parameter mode="IN" name="pcolumn" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="contains_2d(box2df, box2df)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_contains_box2df_box2df_2d]]></definition>
         <parameters>
            <parameter mode="IN" type="box2df"/>
            <parameter mode="IN" type="box2df"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="contains_2d(box2df, geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_contains_box2df_geom_2d]]></definition>
         <parameters>
            <parameter mode="IN" type="box2df"/>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="contains_2d(geometry, box2df)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT $2 OPERATOR(public.@) $1;]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="box2df"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="cosine_distance(halfvec, halfvec)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[halfvec_cosine_distance]]></definition>
         <parameters>
            <parameter mode="IN" type="halfvec"/>
            <parameter mode="IN" type="halfvec"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="cosine_distance(sparsevec, sparsevec)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[sparsevec_cosine_distance]]></definition>
         <parameters>
            <parameter mode="IN" type="sparsevec"/>
            <parameter mode="IN" type="sparsevec"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="cosine_distance(vector, vector)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[cosine_distance]]></definition>
         <parameters>
            <parameter mode="IN" type="vector"/>
            <parameter mode="IN" type="vector"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="daitch_mokotoff(text)" returnType="text[]" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[daitch_mokotoff]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="date_dist(date, date)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[date_dist]]></definition>
         <parameters>
            <parameter mode="IN" type="date"/>
            <parameter mode="IN" type="date"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="defined(hstore, text)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hstore_defined]]></definition>
         <parameters>
            <parameter mode="IN" type="hstore"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="delete(hstore, hstore)" returnType="hstore" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hstore_delete_hstore]]></definition>
         <parameters>
            <parameter mode="IN" type="hstore"/>
            <parameter mode="IN" type="hstore"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="delete(hstore, text)" returnType="hstore" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hstore_delete]]></definition>
         <parameters>
            <parameter mode="IN" type="hstore"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="delete(hstore, text[])" returnType="hstore" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hstore_delete_array]]></definition>
         <parameters>
            <parameter mode="IN" type="hstore"/>
            <parameter mode="IN" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="difference(text, text)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[difference]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="dmetaphone(text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[dmetaphone]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="dmetaphone_alt(text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[dmetaphone_alt]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="dropgeometrycolumn(catalog_name character varying, schema_name character varying, table_name character varying, column_name character varying)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
	myrec RECORD;
	okay boolean;
	real_schema name;

BEGIN

	-- Find, check or fix schema_name
	IF ( schema_name != '' ) THEN
		okay = false;

		FOR myrec IN SELECT nspname FROM pg_namespace WHERE text(nspname) = schema_name LOOP
			okay := true;
		END LOOP;

		IF ( okay <>  true ) THEN
			RAISE NOTICE 'Invalid schema name - using current_schema()';
			SELECT current_schema() into real_schema;
		ELSE
			real_schema = schema_name;
		END IF;
	ELSE
		SELECT current_schema() into real_schema;
	END IF;

	-- Find out if the column is in the geometry_columns table
	okay = false;
	FOR myrec IN SELECT * from public.geometry_columns where f_table_schema = text(real_schema) and f_table_name = table_name and f_geometry_column = column_name LOOP
		okay := true;
	END LOOP;
	IF (okay <> true) THEN
		RAISE EXCEPTION 'column not found in geometry_columns table';
		RETURN false;
	END IF;

	-- Remove table column
	EXECUTE 'ALTER TABLE ' || quote_ident(real_schema) || '.' ||
		quote_ident(table_name) || ' DROP COLUMN ' ||
		quote_ident(column_name);

	RETURN real_schema || '.' || table_name || '.' || column_name ||' effectively removed.';

END;]]></definition>
         <parameters>
            <parameter mode="IN" name="catalog_name" type="character varying"/>
            <parameter mode="IN" name="schema_name" type="character varying"/>
            <parameter mode="IN" name="table_name" type="character varying"/>
            <parameter mode="IN" name="column_name" type="character varying"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="dropgeometrycolumn(schema_name character varying, table_name character varying, column_name character varying)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
	ret text;
BEGIN
	SELECT public.DropGeometryColumn('',$1,$2,$3) into ret;
	RETURN ret;
END;]]></definition>
         <parameters>
            <parameter mode="IN" name="schema_name" type="character varying"/>
            <parameter mode="IN" name="table_name" type="character varying"/>
            <parameter mode="IN" name="column_name" type="character varying"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="dropgeometrycolumn(table_name character varying, column_name character varying)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
	ret text;
BEGIN
	SELECT public.DropGeometryColumn('','',$1,$2) into ret;
	RETURN ret;
END;]]></definition>
         <parameters>
            <parameter mode="IN" name="table_name" type="character varying"/>
            <parameter mode="IN" name="column_name" type="character varying"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="dropgeometrytable(catalog_name character varying, schema_name character varying, table_name character varying)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
	real_schema name;

BEGIN

	IF ( schema_name = '' ) THEN
		SELECT current_schema() into real_schema;
	ELSE
		real_schema = schema_name;
	END IF;

	-- TODO: Should we warn if table doesn't exist probably instead just saying dropped
	-- Remove table
	EXECUTE 'DROP TABLE IF EXISTS '
		|| quote_ident(real_schema) || '.' ||
		quote_ident(table_name) || ' RESTRICT';

	RETURN
		real_schema || '.' ||
		table_name ||' dropped.';

END;]]></definition>
         <parameters>
            <parameter mode="IN" name="catalog_name" type="character varying"/>
            <parameter mode="IN" name="schema_name" type="character varying"/>
            <parameter mode="IN" name="table_name" type="character varying"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="dropgeometrytable(schema_name character varying, table_name character varying)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.DropGeometryTable('',$1,$2)]]></definition>
         <parameters>
            <parameter mode="IN" name="schema_name" type="character varying"/>
            <parameter mode="IN" name="table_name" type="character varying"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="dropgeometrytable(table_name character varying)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.DropGeometryTable('','',$1)]]></definition>
         <parameters>
            <parameter mode="IN" name="table_name" type="character varying"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="each(hs hstore, OUT key text, OUT value text)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hstore_each]]></definition>
         <parameters>
            <parameter mode="IN" name="hs" type="hstore"/>
            <parameter mode="OUT" name="key" type="text"/>
            <parameter mode="OUT" name="value" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="equals(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_Equals]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="exist(hstore, text)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hstore_exists]]></definition>
         <parameters>
            <parameter mode="IN" type="hstore"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="exists_all(hstore, text[])" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hstore_exists_all]]></definition>
         <parameters>
            <parameter mode="IN" type="hstore"/>
            <parameter mode="IN" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="exists_any(hstore, text[])" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hstore_exists_any]]></definition>
         <parameters>
            <parameter mode="IN" type="hstore"/>
            <parameter mode="IN" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="fetchval(hstore, text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hstore_fetchval]]></definition>
         <parameters>
            <parameter mode="IN" type="hstore"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="find_srid(character varying, character varying, character varying)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
	schem varchar =  $1;
	tabl varchar = $2;
	sr int4;
BEGIN
-- if the table contains a . and the schema is empty
-- split the table into a schema and a table
-- otherwise drop through to default behavior
	IF ( schem = '' and strpos(tabl,'.') > 0 ) THEN
	 schem = substr(tabl,1,strpos(tabl,'.')-1);
	 tabl = substr(tabl,length(schem)+2);
	END IF;

	select SRID into sr from public.geometry_columns where (f_table_schema = schem or schem = '') and f_table_name = tabl and f_geometry_column = $3;
	IF NOT FOUND THEN
	   RAISE EXCEPTION 'find_srid() - could not find the corresponding SRID - is the geometry registered in the GEOMETRY_COLUMNS table?  Is there an uppercase/lowercase mismatch?';
	END IF;
	return sr;
END;]]></definition>
         <parameters>
            <parameter mode="IN" type="character varying"/>
            <parameter mode="IN" type="character varying"/>
            <parameter mode="IN" type="character varying"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="float4_dist(real, real)" returnType="real" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[float4_dist]]></definition>
         <parameters>
            <parameter mode="IN" type="real"/>
            <parameter mode="IN" type="real"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="float8_dist(double precision, double precision)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[float8_dist]]></definition>
         <parameters>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_bit_compress(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_bit_compress]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_bit_consistent(internal, bit, smallint, oid, internal)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_bit_consistent]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="bit"/>
            <parameter mode="IN" type="smallint"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_bit_penalty(internal, internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_bit_penalty]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_bit_picksplit(internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_bit_picksplit]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_bit_same(gbtreekey_var, gbtreekey_var, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_bit_same]]></definition>
         <parameters>
            <parameter mode="IN" type="gbtreekey_var"/>
            <parameter mode="IN" type="gbtreekey_var"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_bit_union(internal, internal)" returnType="gbtreekey_var" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_bit_union]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_bool_compress(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_bool_compress]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_bool_consistent(internal, boolean, smallint, oid, internal)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_bool_consistent]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="boolean"/>
            <parameter mode="IN" type="smallint"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_bool_fetch(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_bool_fetch]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_bool_penalty(internal, internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_bool_penalty]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_bool_picksplit(internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_bool_picksplit]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_bool_same(gbtreekey2, gbtreekey2, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_bool_same]]></definition>
         <parameters>
            <parameter mode="IN" type="gbtreekey2"/>
            <parameter mode="IN" type="gbtreekey2"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_bool_union(internal, internal)" returnType="gbtreekey2" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_bool_union]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_bpchar_compress(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_bpchar_compress]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_bpchar_consistent(internal, character, smallint, oid, internal)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_bpchar_consistent]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="character"/>
            <parameter mode="IN" type="smallint"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_bytea_compress(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_bytea_compress]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_bytea_consistent(internal, bytea, smallint, oid, internal)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_bytea_consistent]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="smallint"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_bytea_penalty(internal, internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_bytea_penalty]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_bytea_picksplit(internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_bytea_picksplit]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_bytea_same(gbtreekey_var, gbtreekey_var, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_bytea_same]]></definition>
         <parameters>
            <parameter mode="IN" type="gbtreekey_var"/>
            <parameter mode="IN" type="gbtreekey_var"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_bytea_union(internal, internal)" returnType="gbtreekey_var" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_bytea_union]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_cash_compress(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_cash_compress]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_cash_consistent(internal, money, smallint, oid, internal)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_cash_consistent]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="money"/>
            <parameter mode="IN" type="smallint"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_cash_distance(internal, money, smallint, oid, internal)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_cash_distance]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="money"/>
            <parameter mode="IN" type="smallint"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_cash_fetch(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_cash_fetch]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_cash_penalty(internal, internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_cash_penalty]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_cash_picksplit(internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_cash_picksplit]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_cash_same(gbtreekey16, gbtreekey16, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_cash_same]]></definition>
         <parameters>
            <parameter mode="IN" type="gbtreekey16"/>
            <parameter mode="IN" type="gbtreekey16"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_cash_union(internal, internal)" returnType="gbtreekey16" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_cash_union]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_date_compress(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_date_compress]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_date_consistent(internal, date, smallint, oid, internal)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_date_consistent]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="date"/>
            <parameter mode="IN" type="smallint"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_date_distance(internal, date, smallint, oid, internal)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_date_distance]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="date"/>
            <parameter mode="IN" type="smallint"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_date_fetch(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_date_fetch]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_date_penalty(internal, internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_date_penalty]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_date_picksplit(internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_date_picksplit]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_date_same(gbtreekey8, gbtreekey8, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_date_same]]></definition>
         <parameters>
            <parameter mode="IN" type="gbtreekey8"/>
            <parameter mode="IN" type="gbtreekey8"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_date_union(internal, internal)" returnType="gbtreekey8" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_date_union]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_decompress(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_decompress]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_enum_compress(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_enum_compress]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_enum_consistent(internal, anyenum, smallint, oid, internal)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_enum_consistent]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="anyenum"/>
            <parameter mode="IN" type="smallint"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_enum_fetch(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_enum_fetch]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_enum_penalty(internal, internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_enum_penalty]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_enum_picksplit(internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_enum_picksplit]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_enum_same(gbtreekey8, gbtreekey8, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_enum_same]]></definition>
         <parameters>
            <parameter mode="IN" type="gbtreekey8"/>
            <parameter mode="IN" type="gbtreekey8"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_enum_union(internal, internal)" returnType="gbtreekey8" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_enum_union]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_float4_compress(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_float4_compress]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_float4_consistent(internal, real, smallint, oid, internal)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_float4_consistent]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="real"/>
            <parameter mode="IN" type="smallint"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_float4_distance(internal, real, smallint, oid, internal)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_float4_distance]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="real"/>
            <parameter mode="IN" type="smallint"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_float4_fetch(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_float4_fetch]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_float4_penalty(internal, internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_float4_penalty]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_float4_picksplit(internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_float4_picksplit]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_float4_same(gbtreekey8, gbtreekey8, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_float4_same]]></definition>
         <parameters>
            <parameter mode="IN" type="gbtreekey8"/>
            <parameter mode="IN" type="gbtreekey8"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_float4_union(internal, internal)" returnType="gbtreekey8" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_float4_union]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_float8_compress(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_float8_compress]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_float8_consistent(internal, double precision, smallint, oid, internal)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_float8_consistent]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="smallint"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_float8_distance(internal, double precision, smallint, oid, internal)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_float8_distance]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="smallint"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_float8_fetch(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_float8_fetch]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_float8_penalty(internal, internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_float8_penalty]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_float8_picksplit(internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_float8_picksplit]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_float8_same(gbtreekey16, gbtreekey16, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_float8_same]]></definition>
         <parameters>
            <parameter mode="IN" type="gbtreekey16"/>
            <parameter mode="IN" type="gbtreekey16"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_float8_union(internal, internal)" returnType="gbtreekey16" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_float8_union]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_inet_compress(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_inet_compress]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_inet_consistent(internal, inet, smallint, oid, internal)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_inet_consistent]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="inet"/>
            <parameter mode="IN" type="smallint"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_inet_penalty(internal, internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_inet_penalty]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_inet_picksplit(internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_inet_picksplit]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_inet_same(gbtreekey16, gbtreekey16, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_inet_same]]></definition>
         <parameters>
            <parameter mode="IN" type="gbtreekey16"/>
            <parameter mode="IN" type="gbtreekey16"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_inet_union(internal, internal)" returnType="gbtreekey16" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_inet_union]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_int2_compress(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_int2_compress]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_int2_consistent(internal, smallint, smallint, oid, internal)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_int2_consistent]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="smallint"/>
            <parameter mode="IN" type="smallint"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_int2_distance(internal, smallint, smallint, oid, internal)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_int2_distance]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="smallint"/>
            <parameter mode="IN" type="smallint"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_int2_fetch(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_int2_fetch]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_int2_penalty(internal, internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_int2_penalty]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_int2_picksplit(internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_int2_picksplit]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_int2_same(gbtreekey4, gbtreekey4, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_int2_same]]></definition>
         <parameters>
            <parameter mode="IN" type="gbtreekey4"/>
            <parameter mode="IN" type="gbtreekey4"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_int2_union(internal, internal)" returnType="gbtreekey4" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_int2_union]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_int4_compress(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_int4_compress]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_int4_consistent(internal, integer, smallint, oid, internal)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_int4_consistent]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="smallint"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_int4_distance(internal, integer, smallint, oid, internal)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_int4_distance]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="smallint"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_int4_fetch(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_int4_fetch]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_int4_penalty(internal, internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_int4_penalty]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_int4_picksplit(internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_int4_picksplit]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_int4_same(gbtreekey8, gbtreekey8, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_int4_same]]></definition>
         <parameters>
            <parameter mode="IN" type="gbtreekey8"/>
            <parameter mode="IN" type="gbtreekey8"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_int4_union(internal, internal)" returnType="gbtreekey8" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_int4_union]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_int8_compress(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_int8_compress]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_int8_consistent(internal, bigint, smallint, oid, internal)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_int8_consistent]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="bigint"/>
            <parameter mode="IN" type="smallint"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_int8_distance(internal, bigint, smallint, oid, internal)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_int8_distance]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="bigint"/>
            <parameter mode="IN" type="smallint"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_int8_fetch(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_int8_fetch]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_int8_penalty(internal, internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_int8_penalty]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_int8_picksplit(internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_int8_picksplit]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_int8_same(gbtreekey16, gbtreekey16, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_int8_same]]></definition>
         <parameters>
            <parameter mode="IN" type="gbtreekey16"/>
            <parameter mode="IN" type="gbtreekey16"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_int8_union(internal, internal)" returnType="gbtreekey16" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_int8_union]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_intv_compress(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_intv_compress]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_intv_consistent(internal, interval, smallint, oid, internal)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_intv_consistent]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="interval"/>
            <parameter mode="IN" type="smallint"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_intv_decompress(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_intv_decompress]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_intv_distance(internal, interval, smallint, oid, internal)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_intv_distance]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="interval"/>
            <parameter mode="IN" type="smallint"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_intv_fetch(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_intv_fetch]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_intv_penalty(internal, internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_intv_penalty]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_intv_picksplit(internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_intv_picksplit]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_intv_same(gbtreekey32, gbtreekey32, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_intv_same]]></definition>
         <parameters>
            <parameter mode="IN" type="gbtreekey32"/>
            <parameter mode="IN" type="gbtreekey32"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_intv_union(internal, internal)" returnType="gbtreekey32" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_intv_union]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_macad8_compress(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_macad8_compress]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_macad8_consistent(internal, macaddr8, smallint, oid, internal)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_macad8_consistent]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="macaddr8"/>
            <parameter mode="IN" type="smallint"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_macad8_fetch(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_macad8_fetch]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_macad8_penalty(internal, internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_macad8_penalty]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_macad8_picksplit(internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_macad8_picksplit]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_macad8_same(gbtreekey16, gbtreekey16, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_macad8_same]]></definition>
         <parameters>
            <parameter mode="IN" type="gbtreekey16"/>
            <parameter mode="IN" type="gbtreekey16"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_macad8_union(internal, internal)" returnType="gbtreekey16" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_macad8_union]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_macad_compress(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_macad_compress]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_macad_consistent(internal, macaddr, smallint, oid, internal)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_macad_consistent]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="macaddr"/>
            <parameter mode="IN" type="smallint"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_macad_fetch(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_macad_fetch]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_macad_penalty(internal, internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_macad_penalty]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_macad_picksplit(internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_macad_picksplit]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_macad_same(gbtreekey16, gbtreekey16, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_macad_same]]></definition>
         <parameters>
            <parameter mode="IN" type="gbtreekey16"/>
            <parameter mode="IN" type="gbtreekey16"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_macad_union(internal, internal)" returnType="gbtreekey16" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_macad_union]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_numeric_compress(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_numeric_compress]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_numeric_consistent(internal, numeric, smallint, oid, internal)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_numeric_consistent]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="numeric"/>
            <parameter mode="IN" type="smallint"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_numeric_penalty(internal, internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_numeric_penalty]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_numeric_picksplit(internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_numeric_picksplit]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_numeric_same(gbtreekey_var, gbtreekey_var, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_numeric_same]]></definition>
         <parameters>
            <parameter mode="IN" type="gbtreekey_var"/>
            <parameter mode="IN" type="gbtreekey_var"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_numeric_union(internal, internal)" returnType="gbtreekey_var" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_numeric_union]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_oid_compress(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_oid_compress]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_oid_consistent(internal, oid, smallint, oid, internal)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_oid_consistent]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="smallint"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_oid_distance(internal, oid, smallint, oid, internal)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_oid_distance]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="smallint"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_oid_fetch(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_oid_fetch]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_oid_penalty(internal, internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_oid_penalty]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_oid_picksplit(internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_oid_picksplit]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_oid_same(gbtreekey8, gbtreekey8, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_oid_same]]></definition>
         <parameters>
            <parameter mode="IN" type="gbtreekey8"/>
            <parameter mode="IN" type="gbtreekey8"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_oid_union(internal, internal)" returnType="gbtreekey8" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_oid_union]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_text_compress(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_text_compress]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_text_consistent(internal, text, smallint, oid, internal)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_text_consistent]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="smallint"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_text_penalty(internal, internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_text_penalty]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_text_picksplit(internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_text_picksplit]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_text_same(gbtreekey_var, gbtreekey_var, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_text_same]]></definition>
         <parameters>
            <parameter mode="IN" type="gbtreekey_var"/>
            <parameter mode="IN" type="gbtreekey_var"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_text_union(internal, internal)" returnType="gbtreekey_var" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_text_union]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_time_compress(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_time_compress]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_time_consistent(internal, time without time zone, smallint, oid, internal)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_time_consistent]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="time without time zone"/>
            <parameter mode="IN" type="smallint"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_time_distance(internal, time without time zone, smallint, oid, internal)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_time_distance]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="time without time zone"/>
            <parameter mode="IN" type="smallint"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_time_fetch(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_time_fetch]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_time_penalty(internal, internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_time_penalty]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_time_picksplit(internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_time_picksplit]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_time_same(gbtreekey16, gbtreekey16, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_time_same]]></definition>
         <parameters>
            <parameter mode="IN" type="gbtreekey16"/>
            <parameter mode="IN" type="gbtreekey16"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_time_union(internal, internal)" returnType="gbtreekey16" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_time_union]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_timetz_compress(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_timetz_compress]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_timetz_consistent(internal, time with time zone, smallint, oid, internal)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_timetz_consistent]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="time with time zone"/>
            <parameter mode="IN" type="smallint"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_ts_compress(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_ts_compress]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_ts_consistent(internal, timestamp without time zone, smallint, oid, internal)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_ts_consistent]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="timestamp without time zone"/>
            <parameter mode="IN" type="smallint"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_ts_distance(internal, timestamp without time zone, smallint, oid, internal)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_ts_distance]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="timestamp without time zone"/>
            <parameter mode="IN" type="smallint"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_ts_fetch(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_ts_fetch]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_ts_penalty(internal, internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_ts_penalty]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_ts_picksplit(internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_ts_picksplit]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_ts_same(gbtreekey16, gbtreekey16, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_ts_same]]></definition>
         <parameters>
            <parameter mode="IN" type="gbtreekey16"/>
            <parameter mode="IN" type="gbtreekey16"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_ts_union(internal, internal)" returnType="gbtreekey16" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_ts_union]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_tstz_compress(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_tstz_compress]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_tstz_consistent(internal, timestamp with time zone, smallint, oid, internal)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_tstz_consistent]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="timestamp with time zone"/>
            <parameter mode="IN" type="smallint"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_tstz_distance(internal, timestamp with time zone, smallint, oid, internal)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_tstz_distance]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="timestamp with time zone"/>
            <parameter mode="IN" type="smallint"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_uuid_compress(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_uuid_compress]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_uuid_consistent(internal, uuid, smallint, oid, internal)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_uuid_consistent]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="uuid"/>
            <parameter mode="IN" type="smallint"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_uuid_fetch(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_uuid_fetch]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_uuid_penalty(internal, internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_uuid_penalty]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_uuid_picksplit(internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_uuid_picksplit]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_uuid_same(gbtreekey32, gbtreekey32, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_uuid_same]]></definition>
         <parameters>
            <parameter mode="IN" type="gbtreekey32"/>
            <parameter mode="IN" type="gbtreekey32"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_uuid_union(internal, internal)" returnType="gbtreekey32" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_uuid_union]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_var_decompress(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_var_decompress]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbt_var_fetch(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbt_var_fetch]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbtreekey16_in(cstring)" returnType="gbtreekey16" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbtreekey_in]]></definition>
         <parameters>
            <parameter mode="IN" type="cstring"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbtreekey16_out(gbtreekey16)" returnType="cstring" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbtreekey_out]]></definition>
         <parameters>
            <parameter mode="IN" type="gbtreekey16"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbtreekey2_in(cstring)" returnType="gbtreekey2" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbtreekey_in]]></definition>
         <parameters>
            <parameter mode="IN" type="cstring"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbtreekey2_out(gbtreekey2)" returnType="cstring" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbtreekey_out]]></definition>
         <parameters>
            <parameter mode="IN" type="gbtreekey2"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbtreekey32_in(cstring)" returnType="gbtreekey32" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbtreekey_in]]></definition>
         <parameters>
            <parameter mode="IN" type="cstring"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbtreekey32_out(gbtreekey32)" returnType="cstring" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbtreekey_out]]></definition>
         <parameters>
            <parameter mode="IN" type="gbtreekey32"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbtreekey4_in(cstring)" returnType="gbtreekey4" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbtreekey_in]]></definition>
         <parameters>
            <parameter mode="IN" type="cstring"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbtreekey4_out(gbtreekey4)" returnType="cstring" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbtreekey_out]]></definition>
         <parameters>
            <parameter mode="IN" type="gbtreekey4"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbtreekey8_in(cstring)" returnType="gbtreekey8" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbtreekey_in]]></definition>
         <parameters>
            <parameter mode="IN" type="cstring"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbtreekey8_out(gbtreekey8)" returnType="cstring" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbtreekey_out]]></definition>
         <parameters>
            <parameter mode="IN" type="gbtreekey8"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbtreekey_var_in(cstring)" returnType="gbtreekey_var" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbtreekey_in]]></definition>
         <parameters>
            <parameter mode="IN" type="cstring"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gbtreekey_var_out(gbtreekey_var)" returnType="cstring" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gbtreekey_out]]></definition>
         <parameters>
            <parameter mode="IN" type="gbtreekey_var"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geog_brin_inclusion_add_value(internal, internal, internal, internal)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geog_brin_inclusion_add_value]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geog_brin_inclusion_merge(internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geog_brin_inclusion_merge]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography(bytea)" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_from_binary]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography(geography, integer, boolean)" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_enforce_typmod]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography(geometry)" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_from_geometry]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geography_analyze(internal)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_analyze_nd]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography_cmp(geography, geography)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_cmp]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography_distance_knn(geography, geography)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_distance_knn]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography_eq(geography, geography)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_eq]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography_ge(geography, geography)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_ge]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geography_gist_compress(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_compress]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geography_gist_consistent(internal, geography, integer)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_consistent]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geography_gist_decompress(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_decompress]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geography_gist_distance(internal, geography, integer)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_geog_distance]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geography_gist_penalty(internal, internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_penalty]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geography_gist_picksplit(internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_picksplit]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geography_gist_same(box2d, box2d, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_same]]></definition>
         <parameters>
            <parameter mode="IN" type="box2d"/>
            <parameter mode="IN" type="box2d"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geography_gist_union(bytea, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_union]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography_gt(geography, geography)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_gt]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography_in(cstring, oid, integer)" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_in]]></definition>
         <parameters>
            <parameter mode="IN" type="cstring"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography_le(geography, geography)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_le]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography_lt(geography, geography)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_lt]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography_out(geography)" returnType="cstring" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_out]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography_overlaps(geography, geography)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_overlaps]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography_recv(internal, oid, integer)" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_recv]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography_send(geography)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_send]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography_spgist_choose_nd(internal, internal)" returnType="void" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_spgist_choose_nd]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography_spgist_compress_nd(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_spgist_compress_nd]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography_spgist_config_nd(internal, internal)" returnType="void" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_spgist_config_nd]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography_spgist_inner_consistent_nd(internal, internal)" returnType="void" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_spgist_inner_consistent_nd]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography_spgist_leaf_consistent_nd(internal, internal)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_spgist_leaf_consistent_nd]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography_spgist_picksplit_nd(internal, internal)" returnType="void" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_spgist_picksplit_nd]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography_typmod_in(cstring[])" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_typmod_in]]></definition>
         <parameters>
            <parameter mode="IN" type="cstring[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography_typmod_out(integer)" returnType="cstring" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[postgis_typmod_out]]></definition>
         <parameters>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geom2d_brin_inclusion_add_value(internal, internal, internal, internal)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geom2d_brin_inclusion_add_value]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geom2d_brin_inclusion_merge(internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geom2d_brin_inclusion_merge]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geom3d_brin_inclusion_add_value(internal, internal, internal, internal)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geom3d_brin_inclusion_add_value]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geom3d_brin_inclusion_merge(internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geom3d_brin_inclusion_merge]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geom4d_brin_inclusion_add_value(internal, internal, internal, internal)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geom4d_brin_inclusion_add_value]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geom4d_brin_inclusion_merge(internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geom4d_brin_inclusion_merge]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry(box2d)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[BOX2D_to_LWGEOM]]></definition>
         <parameters>
            <parameter mode="IN" type="box2d"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry(box3d)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[BOX3D_to_LWGEOM]]></definition>
         <parameters>
            <parameter mode="IN" type="box3d"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry(bytea)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_from_bytea]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry(geography)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geometry_from_geography]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry(geometry, integer, boolean)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geometry_enforce_typmod]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry(path)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[path_to_geometry]]></definition>
         <parameters>
            <parameter mode="IN" type="path"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry(point)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[point_to_geometry]]></definition>
         <parameters>
            <parameter mode="IN" type="point"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry(polygon)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[polygon_to_geometry]]></definition>
         <parameters>
            <parameter mode="IN" type="polygon"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry(text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[parse_WKT_lwgeom]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_above(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_above_2d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geometry_analyze(internal)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_analyze_nd]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_below(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_below_2d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_cmp(geom1 geometry, geom2 geometry)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[lwgeom_cmp]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_contained_3d(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_contained_3d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_contains(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_contains_2d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_contains_3d(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_contains_3d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_contains_nd(geometry, geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_contains]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_distance_box(geom1 geometry, geom2 geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_distance_box_2d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_distance_centroid(geom1 geometry, geom2 geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_Distance]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_distance_centroid_nd(geometry, geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_distance_nd]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_distance_cpa(geometry, geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_DistanceCPA]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_eq(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[lwgeom_eq]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_ge(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[lwgeom_ge]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geometry_gist_compress_2d(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_compress_2d]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geometry_gist_compress_nd(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_compress]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geometry_gist_consistent_2d(internal, geometry, integer)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_consistent_2d]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geometry_gist_consistent_nd(internal, geometry, integer)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_consistent]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geometry_gist_decompress_2d(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_decompress_2d]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geometry_gist_decompress_nd(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_decompress]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geometry_gist_distance_2d(internal, geometry, integer)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_distance_2d]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geometry_gist_distance_nd(internal, geometry, integer)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_distance]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geometry_gist_penalty_2d(internal, internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_penalty_2d]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geometry_gist_penalty_nd(internal, internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_penalty]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geometry_gist_picksplit_2d(internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_picksplit_2d]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geometry_gist_picksplit_nd(internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_picksplit]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geometry_gist_same_2d(geom1 geometry, geom2 geometry, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_same_2d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geometry_gist_same_nd(geometry, geometry, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_same]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geometry_gist_sortsupport_2d(internal)" returnType="void" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_sortsupport_2d]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geometry_gist_union_2d(bytea, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_union_2d]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geometry_gist_union_nd(bytea, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_union]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_gt(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[lwgeom_gt]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_hash(geometry)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[lwgeom_hash]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_in(cstring)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_in]]></definition>
         <parameters>
            <parameter mode="IN" type="cstring"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_le(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[lwgeom_le]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_left(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_left_2d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_lt(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[lwgeom_lt]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_neq(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[lwgeom_neq]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_out(geometry)" returnType="cstring" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_out]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_overabove(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_overabove_2d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_overbelow(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_overbelow_2d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_overlaps(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_overlaps_2d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_overlaps_3d(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_overlaps_3d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_overlaps_nd(geometry, geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_overlaps]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_overleft(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_overleft_2d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_overright(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_overright_2d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_recv(internal)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_recv]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_right(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_right_2d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_same(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_same_2d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_same_3d(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_same_3d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_same_nd(geometry, geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_same]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_send(geometry)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_send]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_sortsupport(internal)" returnType="void" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[lwgeom_sortsupport]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_spgist_choose_2d(internal, internal)" returnType="void" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_spgist_choose_2d]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_spgist_choose_3d(internal, internal)" returnType="void" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_spgist_choose_3d]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_spgist_choose_nd(internal, internal)" returnType="void" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_spgist_choose_nd]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_spgist_compress_2d(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_spgist_compress_2d]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_spgist_compress_3d(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_spgist_compress_3d]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_spgist_compress_nd(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_spgist_compress_nd]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_spgist_config_2d(internal, internal)" returnType="void" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_spgist_config_2d]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_spgist_config_3d(internal, internal)" returnType="void" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_spgist_config_3d]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_spgist_config_nd(internal, internal)" returnType="void" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_spgist_config_nd]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_spgist_inner_consistent_2d(internal, internal)" returnType="void" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_spgist_inner_consistent_2d]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_spgist_inner_consistent_3d(internal, internal)" returnType="void" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_spgist_inner_consistent_3d]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_spgist_inner_consistent_nd(internal, internal)" returnType="void" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_spgist_inner_consistent_nd]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_spgist_leaf_consistent_2d(internal, internal)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_spgist_leaf_consistent_2d]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_spgist_leaf_consistent_3d(internal, internal)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_spgist_leaf_consistent_3d]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_spgist_leaf_consistent_nd(internal, internal)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_spgist_leaf_consistent_nd]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_spgist_picksplit_2d(internal, internal)" returnType="void" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_spgist_picksplit_2d]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_spgist_picksplit_3d(internal, internal)" returnType="void" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_spgist_picksplit_3d]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_spgist_picksplit_nd(internal, internal)" returnType="void" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_spgist_picksplit_nd]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_typmod_in(cstring[])" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geometry_typmod_in]]></definition>
         <parameters>
            <parameter mode="IN" type="cstring[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_typmod_out(integer)" returnType="cstring" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[postgis_typmod_out]]></definition>
         <parameters>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_within(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_within_2d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_within_nd(geometry, geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_within]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometrytype(geography)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_getTYPE]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometrytype(geometry)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_getTYPE]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geomfromewkb(bytea)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOMFromEWKB]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geomfromewkt(text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[parse_WKT_lwgeom]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="get_proj4_from_srid(integer)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[BEGIN
	RETURN proj4text::text FROM public.spatial_ref_sys WHERE srid= $1;
	END;]]></definition>
         <parameters>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="ghstore_compress(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ghstore_compress]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="ghstore_consistent(internal, hstore, smallint, oid, internal)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ghstore_consistent]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="hstore"/>
            <parameter mode="IN" type="smallint"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="ghstore_decompress(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ghstore_decompress]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="ghstore_in(cstring)" returnType="ghstore" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ghstore_in]]></definition>
         <parameters>
            <parameter mode="IN" type="cstring"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="ghstore_options(internal)" returnType="void" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ghstore_options]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="ghstore_out(ghstore)" returnType="cstring" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ghstore_out]]></definition>
         <parameters>
            <parameter mode="IN" type="ghstore"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="ghstore_penalty(internal, internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ghstore_penalty]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="ghstore_picksplit(internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ghstore_picksplit]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="ghstore_same(ghstore, ghstore, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ghstore_same]]></definition>
         <parameters>
            <parameter mode="IN" type="ghstore"/>
            <parameter mode="IN" type="ghstore"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="ghstore_union(internal, internal)" returnType="ghstore" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ghstore_union]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gidx_in(cstring)" returnType="gidx" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gidx_in]]></definition>
         <parameters>
            <parameter mode="IN" type="cstring"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gidx_out(gidx)" returnType="cstring" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gidx_out]]></definition>
         <parameters>
            <parameter mode="IN" type="gidx"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gin_consistent_hstore(internal, smallint, hstore, integer, internal, internal)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gin_consistent_hstore]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="smallint"/>
            <parameter mode="IN" type="hstore"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gin_extract_hstore(hstore, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gin_extract_hstore]]></definition>
         <parameters>
            <parameter mode="IN" type="hstore"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gin_extract_hstore_query(hstore, internal, smallint, internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gin_extract_hstore_query]]></definition>
         <parameters>
            <parameter mode="IN" type="hstore"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="smallint"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gin_extract_query_trgm(text, internal, smallint, internal, internal, internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gin_extract_query_trgm]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="smallint"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gin_extract_value_trgm(text, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gin_extract_value_trgm]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gin_trgm_consistent(internal, smallint, text, integer, internal, internal, internal, internal)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gin_trgm_consistent]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="smallint"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gin_trgm_triconsistent(internal, smallint, text, integer, internal, internal, internal)" returnType="&quot;char&quot;" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gin_trgm_triconsistent]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="smallint"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="gserialized_gist_joinsel_2d(internal, oid, internal, smallint)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_joinsel_2d]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="smallint"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="gserialized_gist_joinsel_nd(internal, oid, internal, smallint)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_joinsel_nd]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="smallint"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="gserialized_gist_sel_2d(internal, oid, internal, integer)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_sel_2d]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="gserialized_gist_sel_nd(internal, oid, internal, integer)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_sel_nd]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gtrgm_compress(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gtrgm_compress]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gtrgm_consistent(internal, text, smallint, oid, internal)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gtrgm_consistent]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="smallint"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gtrgm_decompress(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gtrgm_decompress]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gtrgm_distance(internal, text, smallint, oid, internal)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gtrgm_distance]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="smallint"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gtrgm_in(cstring)" returnType="gtrgm" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gtrgm_in]]></definition>
         <parameters>
            <parameter mode="IN" type="cstring"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gtrgm_options(internal)" returnType="void" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gtrgm_options]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gtrgm_out(gtrgm)" returnType="cstring" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gtrgm_out]]></definition>
         <parameters>
            <parameter mode="IN" type="gtrgm"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gtrgm_penalty(internal, internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gtrgm_penalty]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gtrgm_picksplit(internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gtrgm_picksplit]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gtrgm_same(gtrgm, gtrgm, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gtrgm_same]]></definition>
         <parameters>
            <parameter mode="IN" type="gtrgm"/>
            <parameter mode="IN" type="gtrgm"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gtrgm_union(internal, internal)" returnType="gtrgm" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gtrgm_union]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="halfvec(halfvec, integer, boolean)" returnType="halfvec" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[halfvec]]></definition>
         <parameters>
            <parameter mode="IN" type="halfvec"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="halfvec_accum(double precision[], halfvec)" returnType="double precision[]" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[halfvec_accum]]></definition>
         <parameters>
            <parameter mode="IN" type="double precision[]"/>
            <parameter mode="IN" type="halfvec"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="halfvec_add(halfvec, halfvec)" returnType="halfvec" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[halfvec_add]]></definition>
         <parameters>
            <parameter mode="IN" type="halfvec"/>
            <parameter mode="IN" type="halfvec"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="halfvec_avg(double precision[])" returnType="halfvec" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[halfvec_avg]]></definition>
         <parameters>
            <parameter mode="IN" type="double precision[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="halfvec_cmp(halfvec, halfvec)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[halfvec_cmp]]></definition>
         <parameters>
            <parameter mode="IN" type="halfvec"/>
            <parameter mode="IN" type="halfvec"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="halfvec_combine(double precision[], double precision[])" returnType="double precision[]" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[vector_combine]]></definition>
         <parameters>
            <parameter mode="IN" type="double precision[]"/>
            <parameter mode="IN" type="double precision[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="halfvec_concat(halfvec, halfvec)" returnType="halfvec" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[halfvec_concat]]></definition>
         <parameters>
            <parameter mode="IN" type="halfvec"/>
            <parameter mode="IN" type="halfvec"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="halfvec_eq(halfvec, halfvec)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[halfvec_eq]]></definition>
         <parameters>
            <parameter mode="IN" type="halfvec"/>
            <parameter mode="IN" type="halfvec"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="halfvec_ge(halfvec, halfvec)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[halfvec_ge]]></definition>
         <parameters>
            <parameter mode="IN" type="halfvec"/>
            <parameter mode="IN" type="halfvec"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="halfvec_gt(halfvec, halfvec)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[halfvec_gt]]></definition>
         <parameters>
            <parameter mode="IN" type="halfvec"/>
            <parameter mode="IN" type="halfvec"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="halfvec_in(cstring, oid, integer)" returnType="halfvec" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[halfvec_in]]></definition>
         <parameters>
            <parameter mode="IN" type="cstring"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="halfvec_l2_squared_distance(halfvec, halfvec)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[halfvec_l2_squared_distance]]></definition>
         <parameters>
            <parameter mode="IN" type="halfvec"/>
            <parameter mode="IN" type="halfvec"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="halfvec_le(halfvec, halfvec)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[halfvec_le]]></definition>
         <parameters>
            <parameter mode="IN" type="halfvec"/>
            <parameter mode="IN" type="halfvec"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="halfvec_lt(halfvec, halfvec)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[halfvec_lt]]></definition>
         <parameters>
            <parameter mode="IN" type="halfvec"/>
            <parameter mode="IN" type="halfvec"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="halfvec_mul(halfvec, halfvec)" returnType="halfvec" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[halfvec_mul]]></definition>
         <parameters>
            <parameter mode="IN" type="halfvec"/>
            <parameter mode="IN" type="halfvec"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="halfvec_ne(halfvec, halfvec)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[halfvec_ne]]></definition>
         <parameters>
            <parameter mode="IN" type="halfvec"/>
            <parameter mode="IN" type="halfvec"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="halfvec_negative_inner_product(halfvec, halfvec)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[halfvec_negative_inner_product]]></definition>
         <parameters>
            <parameter mode="IN" type="halfvec"/>
            <parameter mode="IN" type="halfvec"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="halfvec_out(halfvec)" returnType="cstring" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[halfvec_out]]></definition>
         <parameters>
            <parameter mode="IN" type="halfvec"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="halfvec_recv(internal, oid, integer)" returnType="halfvec" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[halfvec_recv]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="halfvec_send(halfvec)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[halfvec_send]]></definition>
         <parameters>
            <parameter mode="IN" type="halfvec"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="halfvec_spherical_distance(halfvec, halfvec)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[halfvec_spherical_distance]]></definition>
         <parameters>
            <parameter mode="IN" type="halfvec"/>
            <parameter mode="IN" type="halfvec"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="halfvec_sub(halfvec, halfvec)" returnType="halfvec" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[halfvec_sub]]></definition>
         <parameters>
            <parameter mode="IN" type="halfvec"/>
            <parameter mode="IN" type="halfvec"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="halfvec_to_float4(halfvec, integer, boolean)" returnType="real[]" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[halfvec_to_float4]]></definition>
         <parameters>
            <parameter mode="IN" type="halfvec"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="halfvec_to_sparsevec(halfvec, integer, boolean)" returnType="sparsevec" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[halfvec_to_sparsevec]]></definition>
         <parameters>
            <parameter mode="IN" type="halfvec"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="halfvec_to_vector(halfvec, integer, boolean)" returnType="vector" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[halfvec_to_vector]]></definition>
         <parameters>
            <parameter mode="IN" type="halfvec"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="halfvec_typmod_in(cstring[])" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[halfvec_typmod_in]]></definition>
         <parameters>
            <parameter mode="IN" type="cstring[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="hamming_distance(bit, bit)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hamming_distance]]></definition>
         <parameters>
            <parameter mode="IN" type="bit"/>
            <parameter mode="IN" type="bit"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="hnsw_bit_support(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hnsw_bit_support]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="hnsw_halfvec_support(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hnsw_halfvec_support]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="hnsw_sparsevec_support(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hnsw_sparsevec_support]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="hnswhandler(internal)" returnType="index_am_handler" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hnswhandler]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="hs_concat(hstore, hstore)" returnType="hstore" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hstore_concat]]></definition>
         <parameters>
            <parameter mode="IN" type="hstore"/>
            <parameter mode="IN" type="hstore"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="hs_contained(hstore, hstore)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hstore_contained]]></definition>
         <parameters>
            <parameter mode="IN" type="hstore"/>
            <parameter mode="IN" type="hstore"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="hs_contains(hstore, hstore)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hstore_contains]]></definition>
         <parameters>
            <parameter mode="IN" type="hstore"/>
            <parameter mode="IN" type="hstore"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="hstore(record)" returnType="hstore" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hstore_from_record]]></definition>
         <parameters>
            <parameter mode="IN" type="record"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="hstore(text, text)" returnType="hstore" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hstore_from_text]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="hstore(text[])" returnType="hstore" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hstore_from_array]]></definition>
         <parameters>
            <parameter mode="IN" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="hstore(text[], text[])" returnType="hstore" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hstore_from_arrays]]></definition>
         <parameters>
            <parameter mode="IN" type="text[]"/>
            <parameter mode="IN" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="hstore_cmp(hstore, hstore)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hstore_cmp]]></definition>
         <parameters>
            <parameter mode="IN" type="hstore"/>
            <parameter mode="IN" type="hstore"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="hstore_eq(hstore, hstore)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hstore_eq]]></definition>
         <parameters>
            <parameter mode="IN" type="hstore"/>
            <parameter mode="IN" type="hstore"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="hstore_ge(hstore, hstore)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hstore_ge]]></definition>
         <parameters>
            <parameter mode="IN" type="hstore"/>
            <parameter mode="IN" type="hstore"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="hstore_gt(hstore, hstore)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hstore_gt]]></definition>
         <parameters>
            <parameter mode="IN" type="hstore"/>
            <parameter mode="IN" type="hstore"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="hstore_hash(hstore)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hstore_hash]]></definition>
         <parameters>
            <parameter mode="IN" type="hstore"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="hstore_hash_extended(hstore, bigint)" returnType="bigint" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hstore_hash_extended]]></definition>
         <parameters>
            <parameter mode="IN" type="hstore"/>
            <parameter mode="IN" type="bigint"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="hstore_in(cstring)" returnType="hstore" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hstore_in]]></definition>
         <parameters>
            <parameter mode="IN" type="cstring"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="hstore_le(hstore, hstore)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hstore_le]]></definition>
         <parameters>
            <parameter mode="IN" type="hstore"/>
            <parameter mode="IN" type="hstore"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="hstore_lt(hstore, hstore)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hstore_lt]]></definition>
         <parameters>
            <parameter mode="IN" type="hstore"/>
            <parameter mode="IN" type="hstore"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="hstore_ne(hstore, hstore)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hstore_ne]]></definition>
         <parameters>
            <parameter mode="IN" type="hstore"/>
            <parameter mode="IN" type="hstore"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="hstore_out(hstore)" returnType="cstring" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hstore_out]]></definition>
         <parameters>
            <parameter mode="IN" type="hstore"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="hstore_recv(internal)" returnType="hstore" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hstore_recv]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="hstore_send(hstore)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hstore_send]]></definition>
         <parameters>
            <parameter mode="IN" type="hstore"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="hstore_subscript_handler(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hstore_subscript_handler]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="hstore_to_array(hstore)" returnType="text[]" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hstore_to_array]]></definition>
         <parameters>
            <parameter mode="IN" type="hstore"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="hstore_to_json(hstore)" returnType="json" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hstore_to_json]]></definition>
         <parameters>
            <parameter mode="IN" type="hstore"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="hstore_to_json_loose(hstore)" returnType="json" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hstore_to_json_loose]]></definition>
         <parameters>
            <parameter mode="IN" type="hstore"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="hstore_to_jsonb(hstore)" returnType="jsonb" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hstore_to_jsonb]]></definition>
         <parameters>
            <parameter mode="IN" type="hstore"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="hstore_to_jsonb_loose(hstore)" returnType="jsonb" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hstore_to_jsonb_loose]]></definition>
         <parameters>
            <parameter mode="IN" type="hstore"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="hstore_to_matrix(hstore)" returnType="text[]" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hstore_to_matrix]]></definition>
         <parameters>
            <parameter mode="IN" type="hstore"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="hstore_version_diag(hstore)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hstore_version_diag]]></definition>
         <parameters>
            <parameter mode="IN" type="hstore"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="inner_product(halfvec, halfvec)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[halfvec_inner_product]]></definition>
         <parameters>
            <parameter mode="IN" type="halfvec"/>
            <parameter mode="IN" type="halfvec"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="inner_product(sparsevec, sparsevec)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[sparsevec_inner_product]]></definition>
         <parameters>
            <parameter mode="IN" type="sparsevec"/>
            <parameter mode="IN" type="sparsevec"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="inner_product(vector, vector)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[inner_product]]></definition>
         <parameters>
            <parameter mode="IN" type="vector"/>
            <parameter mode="IN" type="vector"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="int2_dist(smallint, smallint)" returnType="smallint" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[int2_dist]]></definition>
         <parameters>
            <parameter mode="IN" type="smallint"/>
            <parameter mode="IN" type="smallint"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="int4_dist(integer, integer)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[int4_dist]]></definition>
         <parameters>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="int8_dist(bigint, bigint)" returnType="bigint" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[int8_dist]]></definition>
         <parameters>
            <parameter mode="IN" type="bigint"/>
            <parameter mode="IN" type="bigint"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="interval_dist(interval, interval)" returnType="interval" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[interval_dist]]></definition>
         <parameters>
            <parameter mode="IN" type="interval"/>
            <parameter mode="IN" type="interval"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="is_contained_2d(box2df, box2df)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_contains_box2df_box2df_2d]]></definition>
         <parameters>
            <parameter mode="IN" type="box2df"/>
            <parameter mode="IN" type="box2df"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="is_contained_2d(box2df, geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_within_box2df_geom_2d]]></definition>
         <parameters>
            <parameter mode="IN" type="box2df"/>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="is_contained_2d(geometry, box2df)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT $2 OPERATOR(public.~) $1;]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="box2df"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="isdefined(hstore, text)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hstore_defined]]></definition>
         <parameters>
            <parameter mode="IN" type="hstore"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="isexists(hstore, text)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hstore_exists]]></definition>
         <parameters>
            <parameter mode="IN" type="hstore"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="ivfflat_bit_support(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ivfflat_bit_support]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="ivfflat_halfvec_support(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ivfflat_halfvec_support]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="ivfflathandler(internal)" returnType="index_am_handler" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ivfflathandler]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="jaccard_distance(bit, bit)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[jaccard_distance]]></definition>
         <parameters>
            <parameter mode="IN" type="bit"/>
            <parameter mode="IN" type="bit"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="json(geometry)" returnType="json" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geometry_to_json]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="jsonb(geometry)" returnType="jsonb" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geometry_to_jsonb]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="l1_distance(halfvec, halfvec)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[halfvec_l1_distance]]></definition>
         <parameters>
            <parameter mode="IN" type="halfvec"/>
            <parameter mode="IN" type="halfvec"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="l1_distance(sparsevec, sparsevec)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[sparsevec_l1_distance]]></definition>
         <parameters>
            <parameter mode="IN" type="sparsevec"/>
            <parameter mode="IN" type="sparsevec"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="l1_distance(vector, vector)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[l1_distance]]></definition>
         <parameters>
            <parameter mode="IN" type="vector"/>
            <parameter mode="IN" type="vector"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="l2_distance(halfvec, halfvec)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[halfvec_l2_distance]]></definition>
         <parameters>
            <parameter mode="IN" type="halfvec"/>
            <parameter mode="IN" type="halfvec"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="l2_distance(sparsevec, sparsevec)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[sparsevec_l2_distance]]></definition>
         <parameters>
            <parameter mode="IN" type="sparsevec"/>
            <parameter mode="IN" type="sparsevec"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="l2_distance(vector, vector)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[l2_distance]]></definition>
         <parameters>
            <parameter mode="IN" type="vector"/>
            <parameter mode="IN" type="vector"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="l2_norm(halfvec)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[halfvec_l2_norm]]></definition>
         <parameters>
            <parameter mode="IN" type="halfvec"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="l2_norm(sparsevec)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[sparsevec_l2_norm]]></definition>
         <parameters>
            <parameter mode="IN" type="sparsevec"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="l2_normalize(halfvec)" returnType="halfvec" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[halfvec_l2_normalize]]></definition>
         <parameters>
            <parameter mode="IN" type="halfvec"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="l2_normalize(sparsevec)" returnType="sparsevec" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[sparsevec_l2_normalize]]></definition>
         <parameters>
            <parameter mode="IN" type="sparsevec"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="l2_normalize(vector)" returnType="vector" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[l2_normalize]]></definition>
         <parameters>
            <parameter mode="IN" type="vector"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="levenshtein(text, text)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[levenshtein]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="levenshtein(text, text, integer, integer, integer)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[levenshtein_with_costs]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="levenshtein_less_equal(text, text, integer)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[levenshtein_less_equal]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="levenshtein_less_equal(text, text, integer, integer, integer, integer)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[levenshtein_less_equal_with_costs]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="metaphone(text, integer)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[metaphone]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="oid_dist(oid, oid)" returnType="oid" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[oid_dist]]></definition>
         <parameters>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="oid"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="overlaps_2d(box2df, box2df)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_contains_box2df_box2df_2d]]></definition>
         <parameters>
            <parameter mode="IN" type="box2df"/>
            <parameter mode="IN" type="box2df"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="overlaps_2d(box2df, geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_overlaps_box2df_geom_2d]]></definition>
         <parameters>
            <parameter mode="IN" type="box2df"/>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="overlaps_2d(geometry, box2df)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT $2 OPERATOR(public.&&) $1;]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="box2df"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="overlaps_geog(geography, gidx)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT $2 OPERATOR(public.&&) $1;]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="gidx"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="overlaps_geog(gidx, geography)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gidx_geog_overlaps]]></definition>
         <parameters>
            <parameter mode="IN" type="gidx"/>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="overlaps_geog(gidx, gidx)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gidx_gidx_overlaps]]></definition>
         <parameters>
            <parameter mode="IN" type="gidx"/>
            <parameter mode="IN" type="gidx"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="overlaps_nd(geometry, gidx)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT $2 OPERATOR(public.&&&) $1;]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="gidx"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="overlaps_nd(gidx, geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gidx_geom_overlaps]]></definition>
         <parameters>
            <parameter mode="IN" type="gidx"/>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="overlaps_nd(gidx, gidx)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gidx_gidx_overlaps]]></definition>
         <parameters>
            <parameter mode="IN" type="gidx"/>
            <parameter mode="IN" type="gidx"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="path(geometry)" returnType="path" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geometry_to_path]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="pgis_asflatgeobuf_finalfn(internal)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_asflatgeobuf_finalfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="pgis_asflatgeobuf_transfn(internal, anyelement)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_asflatgeobuf_transfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="anyelement"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="pgis_asflatgeobuf_transfn(internal, anyelement, boolean)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_asflatgeobuf_transfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="anyelement"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="pgis_asflatgeobuf_transfn(internal, anyelement, boolean, text)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_asflatgeobuf_transfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="anyelement"/>
            <parameter mode="IN" type="boolean"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="pgis_asgeobuf_finalfn(internal)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_asgeobuf_finalfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="pgis_asgeobuf_transfn(internal, anyelement)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_asgeobuf_transfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="anyelement"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="pgis_asgeobuf_transfn(internal, anyelement, text)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_asgeobuf_transfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="anyelement"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="pgis_asmvt_combinefn(internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_asmvt_combinefn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="pgis_asmvt_deserialfn(bytea, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_asmvt_deserialfn]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="pgis_asmvt_finalfn(internal)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_asmvt_finalfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="pgis_asmvt_serialfn(internal)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_asmvt_serialfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="pgis_asmvt_transfn(internal, anyelement)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_asmvt_transfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="anyelement"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="pgis_asmvt_transfn(internal, anyelement, text)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_asmvt_transfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="anyelement"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="pgis_asmvt_transfn(internal, anyelement, text, integer)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_asmvt_transfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="anyelement"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="pgis_asmvt_transfn(internal, anyelement, text, integer, text)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_asmvt_transfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="anyelement"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="pgis_asmvt_transfn(internal, anyelement, text, integer, text, text)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_asmvt_transfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="anyelement"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="pgis_geometry_accum_transfn(internal, geometry)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_geometry_accum_transfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="pgis_geometry_accum_transfn(internal, geometry, double precision)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_geometry_accum_transfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="pgis_geometry_accum_transfn(internal, geometry, double precision, integer)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_geometry_accum_transfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="pgis_geometry_clusterintersecting_finalfn(internal)" returnType="geometry[]" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_geometry_clusterintersecting_finalfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="pgis_geometry_clusterwithin_finalfn(internal)" returnType="geometry[]" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_geometry_clusterwithin_finalfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="pgis_geometry_collect_finalfn(internal)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_geometry_collect_finalfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="pgis_geometry_coverageunion_finalfn(internal)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_geometry_coverageunion_finalfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="pgis_geometry_makeline_finalfn(internal)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_geometry_makeline_finalfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="pgis_geometry_polygonize_finalfn(internal)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_geometry_polygonize_finalfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="pgis_geometry_union_parallel_combinefn(internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_geometry_union_parallel_combinefn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="pgis_geometry_union_parallel_deserialfn(bytea, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_geometry_union_parallel_deserialfn]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="pgis_geometry_union_parallel_finalfn(internal)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_geometry_union_parallel_finalfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="pgis_geometry_union_parallel_serialfn(internal)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_geometry_union_parallel_serialfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="pgis_geometry_union_parallel_transfn(internal, geometry)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_geometry_union_parallel_transfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="pgis_geometry_union_parallel_transfn(internal, geometry, double precision)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_geometry_union_parallel_transfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="point(geometry)" returnType="point" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geometry_to_point]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="polygon(geometry)" returnType="polygon" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geometry_to_polygon]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="populate_geometry_columns(tbl_oid oid, use_typmod boolean DEFAULT true)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
	gcs		 RECORD;
	gc		  RECORD;
	gc_old	  RECORD;
	gsrid	   integer;
	gndims	  integer;
	gtype	   text;
	query	   text;
	gc_is_valid boolean;
	inserted	integer;
	constraint_successful boolean := false;

BEGIN
	inserted := 0;

	-- Iterate through all geometry columns in this table
	FOR gcs IN
	SELECT n.nspname, c.relname, a.attname, c.relkind
		FROM pg_class c,
			 pg_attribute a,
			 pg_type t,
			 pg_namespace n
		WHERE c.relkind IN('r', 'f', 'p')
		AND t.typname = 'geometry'
		AND a.attisdropped = false
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
		AND n.nspname NOT ILIKE 'pg_temp%'
		AND c.oid = tbl_oid
	LOOP

		RAISE DEBUG 'Processing column %.%.%', gcs.nspname, gcs.relname, gcs.attname;

		gc_is_valid := true;
		-- Find the srid, coord_dimension, and type of current geometry
		-- in geometry_columns -- which is now a view

		SELECT type, srid, coord_dimension, gcs.relkind INTO gc_old
			FROM geometry_columns
			WHERE f_table_schema = gcs.nspname AND f_table_name = gcs.relname AND f_geometry_column = gcs.attname;

		IF upper(gc_old.type) = 'GEOMETRY' THEN
		-- This is an unconstrained geometry we need to do something
		-- We need to figure out what to set the type by inspecting the data
			EXECUTE 'SELECT public.ST_srid(' || quote_ident(gcs.attname) || ') As srid, public.GeometryType(' || quote_ident(gcs.attname) || ') As type, public.ST_NDims(' || quote_ident(gcs.attname) || ') As dims ' ||
					 ' FROM ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) ||
					 ' WHERE ' || quote_ident(gcs.attname) || ' IS NOT NULL LIMIT 1;'
				INTO gc;
			IF gc IS NULL THEN -- there is no data so we can not determine geometry type
				RAISE WARNING 'No data in table %.%, so no information to determine geometry type and srid', gcs.nspname, gcs.relname;
				RETURN 0;
			END IF;
			gsrid := gc.srid; gtype := gc.type; gndims := gc.dims;

			IF use_typmod THEN
				BEGIN
					EXECUTE 'ALTER TABLE ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || ' ALTER COLUMN ' || quote_ident(gcs.attname) ||
						' TYPE geometry(' || postgis_type_name(gtype, gndims, true) || ', ' || gsrid::text  || ') ';
					inserted := inserted + 1;
				EXCEPTION
						WHEN invalid_parameter_value OR feature_not_supported THEN
						RAISE WARNING 'Could not convert ''%'' in ''%.%'' to use typmod with srid %, type %: %', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname), gsrid, postgis_type_name(gtype, gndims, true), SQLERRM;
							gc_is_valid := false;
				END;

			ELSE
				-- Try to apply srid check to column
				constraint_successful = false;
				IF (gsrid > 0 AND postgis_constraint_srid(gcs.nspname, gcs.relname,gcs.attname) IS NULL ) THEN
					BEGIN
						EXECUTE 'ALTER TABLE ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) ||
								 ' ADD CONSTRAINT ' || quote_ident('enforce_srid_' || gcs.attname) ||
								 ' CHECK (ST_srid(' || quote_ident(gcs.attname) || ') = ' || gsrid || ')';
						constraint_successful := true;
					EXCEPTION
						WHEN check_violation THEN
							RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not apply constraint CHECK (st_srid(%) = %)', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname), quote_ident(gcs.attname), gsrid;
							gc_is_valid := false;
					END;
				END IF;

				-- Try to apply ndims check to column
				IF (gndims IS NOT NULL AND postgis_constraint_dims(gcs.nspname, gcs.relname,gcs.attname) IS NULL ) THEN
					BEGIN
						EXECUTE 'ALTER TABLE ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
								 ADD CONSTRAINT ' || quote_ident('enforce_dims_' || gcs.attname) || '
								 CHECK (st_ndims(' || quote_ident(gcs.attname) || ') = '||gndims||')';
						constraint_successful := true;
					EXCEPTION
						WHEN check_violation THEN
							RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not apply constraint CHECK (st_ndims(%) = %)', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname), quote_ident(gcs.attname), gndims;
							gc_is_valid := false;
					END;
				END IF;

				-- Try to apply geometrytype check to column
				IF (gtype IS NOT NULL AND postgis_constraint_type(gcs.nspname, gcs.relname,gcs.attname) IS NULL ) THEN
					BEGIN
						EXECUTE 'ALTER TABLE ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
						ADD CONSTRAINT ' || quote_ident('enforce_geotype_' || gcs.attname) || '
						CHECK (geometrytype(' || quote_ident(gcs.attname) || ') = ' || quote_literal(gtype) || ')';
						constraint_successful := true;
					EXCEPTION
						WHEN check_violation THEN
							-- No geometry check can be applied. This column contains a number of geometry types.
							RAISE WARNING 'Could not add geometry type check (%) to table column: %.%.%', gtype, quote_ident(gcs.nspname),quote_ident(gcs.relname),quote_ident(gcs.attname);
					END;
				END IF;
				 --only count if we were successful in applying at least one constraint
				IF constraint_successful THEN
					inserted := inserted + 1;
				END IF;
			END IF;
		END IF;

	END LOOP;

	RETURN inserted;
END]]></definition>
         <parameters>
            <parameter mode="IN" name="tbl_oid" type="oid"/>
            <parameter mode="IN" name="use_typmod" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="populate_geometry_columns(use_typmod boolean DEFAULT true)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
	inserted	integer;
	oldcount	integer;
	probed	  integer;
	stale	   integer;
	gcs		 RECORD;
	gc		  RECORD;
	gsrid	   integer;
	gndims	  integer;
	gtype	   text;
	query	   text;
	gc_is_valid boolean;

BEGIN
	SELECT count(*) INTO oldcount FROM public.geometry_columns;
	inserted := 0;

	-- Count the number of geometry columns in all tables and views
	SELECT count(DISTINCT c.oid) INTO probed
	FROM pg_class c,
		 pg_attribute a,
		 pg_type t,
		 pg_namespace n
	WHERE c.relkind IN('r','v','f', 'p')
		AND t.typname = 'geometry'
		AND a.attisdropped = false
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
		AND n.nspname NOT ILIKE 'pg_temp%' AND c.relname != 'raster_columns' ;

	-- Iterate through all non-dropped geometry columns
	RAISE DEBUG 'Processing Tables.....';

	FOR gcs IN
	SELECT DISTINCT ON (c.oid) c.oid, n.nspname, c.relname
		FROM pg_class c,
			 pg_attribute a,
			 pg_type t,
			 pg_namespace n
		WHERE c.relkind IN( 'r', 'f', 'p')
		AND t.typname = 'geometry'
		AND a.attisdropped = false
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
		AND n.nspname NOT ILIKE 'pg_temp%' AND c.relname != 'raster_columns'
	LOOP

		inserted := inserted + public.populate_geometry_columns(gcs.oid, use_typmod);
	END LOOP;

	IF oldcount > inserted THEN
		stale = oldcount-inserted;
	ELSE
		stale = 0;
	END IF;

	RETURN 'probed:' ||probed|| ' inserted:'||inserted;
END]]></definition>
         <parameters>
            <parameter mode="IN" name="use_typmod" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="populate_record(anyelement, hstore)" returnType="anyelement" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hstore_populate_record]]></definition>
         <parameters>
            <parameter mode="IN" type="anyelement"/>
            <parameter mode="IN" type="hstore"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_addbbox(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_addBBOX]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="postgis_cache_bbox()" returnType="trigger" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[cache_bbox]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="postgis_constraint_dims(geomschema text, geomtable text, geomcolumn text)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT  replace(split_part(s.consrc, ' = ', 2), ')', '')::integer
		 FROM pg_class c, pg_namespace n, pg_attribute a
		 , (SELECT connamespace, conrelid, conkey, pg_get_constraintdef(oid) As consrc
			FROM pg_constraint) AS s
		 WHERE n.nspname = $1
		 AND c.relname = $2
		 AND a.attname = $3
		 AND a.attrelid = c.oid
		 AND s.connamespace = n.oid
		 AND s.conrelid = c.oid
		 AND a.attnum = ANY (s.conkey)
		 AND s.consrc LIKE '%ndims(% = %';]]></definition>
         <parameters>
            <parameter mode="IN" name="geomschema" type="text"/>
            <parameter mode="IN" name="geomtable" type="text"/>
            <parameter mode="IN" name="geomcolumn" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="postgis_constraint_srid(geomschema text, geomtable text, geomcolumn text)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT replace(replace(split_part(s.consrc, ' = ', 2), ')', ''), '(', '')::integer
		 FROM pg_class c, pg_namespace n, pg_attribute a
		 , (SELECT connamespace, conrelid, conkey, pg_get_constraintdef(oid) As consrc
			FROM pg_constraint) AS s
		 WHERE n.nspname = $1
		 AND c.relname = $2
		 AND a.attname = $3
		 AND a.attrelid = c.oid
		 AND s.connamespace = n.oid
		 AND s.conrelid = c.oid
		 AND a.attnum = ANY (s.conkey)
		 AND s.consrc LIKE '%srid(% = %';]]></definition>
         <parameters>
            <parameter mode="IN" name="geomschema" type="text"/>
            <parameter mode="IN" name="geomtable" type="text"/>
            <parameter mode="IN" name="geomcolumn" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="postgis_constraint_type(geomschema text, geomtable text, geomcolumn text)" returnType="character varying" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT  replace(split_part(s.consrc, '''', 2), ')', '')::varchar
		 FROM pg_class c, pg_namespace n, pg_attribute a
		 , (SELECT connamespace, conrelid, conkey, pg_get_constraintdef(oid) As consrc
			FROM pg_constraint) AS s
		 WHERE n.nspname = $1
		 AND c.relname = $2
		 AND a.attname = $3
		 AND a.attrelid = c.oid
		 AND s.connamespace = n.oid
		 AND s.conrelid = c.oid
		 AND a.attnum = ANY (s.conkey)
		 AND s.consrc LIKE '%geometrytype(% = %';]]></definition>
         <parameters>
            <parameter mode="IN" name="geomschema" type="text"/>
            <parameter mode="IN" name="geomtable" type="text"/>
            <parameter mode="IN" name="geomcolumn" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_dropbbox(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_dropBBOX]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="postgis_extensions_upgrade(target_version text DEFAULT NULL::text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
	rec record;
	sql text;
	var_schema text;
BEGIN

	FOR rec IN
		SELECT name, default_version, installed_version
		FROM pg_catalog.pg_available_extensions
		WHERE name IN (
			'postgis',
			'postgis_raster',
			'postgis_sfcgal',
			'postgis_topology',
			'postgis_tiger_geocoder'
		)
		ORDER BY length(name) -- this is to make sure 'postgis' is first !
	LOOP --{

		IF target_version IS NULL THEN
			target_version := rec.default_version;
		END IF;

		IF rec.installed_version IS NULL THEN --{
			-- If the support installed by available extension
			-- is found unpackaged, we package it
			IF --{
				 -- PostGIS is always available (this function is part of it)
				 rec.name = 'postgis'

				 -- PostGIS raster is available if type 'raster' exists
				 OR ( rec.name = 'postgis_raster' AND EXISTS (
							SELECT 1 FROM pg_catalog.pg_type
							WHERE typname = 'raster' ) )

				 -- PostGIS SFCGAL is available if
				 -- 'postgis_sfcgal_version' function exists
				 OR ( rec.name = 'postgis_sfcgal' AND EXISTS (
							SELECT 1 FROM pg_catalog.pg_proc
							WHERE proname = 'postgis_sfcgal_version' ) )

				 -- PostGIS Topology is available if
				 -- 'topology.topology' table exists
				 -- NOTE: watch out for https://trac.osgeo.org/postgis/ticket/2503
				 OR ( rec.name = 'postgis_topology' AND EXISTS (
							SELECT 1 FROM pg_catalog.pg_class c
							JOIN pg_catalog.pg_namespace n ON (c.relnamespace = n.oid )
							WHERE n.nspname = 'topology' AND c.relname = 'topology') )

				 OR ( rec.name = 'postgis_tiger_geocoder' AND EXISTS (
							SELECT 1 FROM pg_catalog.pg_class c
							JOIN pg_catalog.pg_namespace n ON (c.relnamespace = n.oid )
							WHERE n.nspname = 'tiger' AND c.relname = 'geocode_settings') )
			THEN --}{ -- the code is unpackaged
				-- Force install in same schema as postgis
				SELECT INTO var_schema n.nspname
				  FROM pg_namespace n, pg_proc p
				  WHERE p.proname = 'postgis_full_version'
					AND n.oid = p.pronamespace
				  LIMIT 1;
				IF rec.name NOT IN('postgis_topology', 'postgis_tiger_geocoder')
				THEN
					sql := format(
							  'CREATE EXTENSION %1$I SCHEMA %2$I VERSION unpackaged;'
							  'ALTER EXTENSION %1$I UPDATE TO %3$I',
							  rec.name, var_schema, target_version);
				ELSE
					sql := format(
							 'CREATE EXTENSION %1$I VERSION unpackaged;'
							 'ALTER EXTENSION %1$I UPDATE TO %2$I',
							 rec.name, target_version);
				END IF;
				RAISE NOTICE 'Packaging and updating %', rec.name;
				RAISE DEBUG '%', sql;
				EXECUTE sql;
			ELSE
				RAISE DEBUG 'Skipping % (not in use)', rec.name;
			END IF; --}
		ELSE -- The code is already packaged, upgrade it --}{
			sql = format(
				'ALTER EXTENSION %1$I UPDATE TO "ANY";'
				'ALTER EXTENSION %1$I UPDATE TO %2$I',
				rec.name, target_version
				);
			RAISE NOTICE 'Updating extension % %', rec.name, rec.installed_version;
			RAISE DEBUG '%', sql;
			EXECUTE sql;
		END IF; --}

	END LOOP; --}

	RETURN format(
		'Upgrade to version %s completed, run SELECT postgis_full_version(); for details',
		target_version
	);


END]]></definition>
         <parameters>
            <parameter mode="IN" name="target_version" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_full_version()" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
	libver text;
	librev text;
	projver text;
	projver_compiled text;
	geosver text;
	geosver_compiled text;
	sfcgalver text;
	gdalver text := NULL;
	libxmlver text;
	liblwgeomver text;
	dbproc text;
	relproc text;
	fullver text;
	rast_lib_ver text := NULL;
	rast_scr_ver text := NULL;
	topo_scr_ver text := NULL;
	json_lib_ver text;
	protobuf_lib_ver text;
	wagyu_lib_ver text;
	sfcgal_lib_ver text;
	sfcgal_scr_ver text;
	pgsql_scr_ver text;
	pgsql_ver text;
	core_is_extension bool;
BEGIN
	SELECT public.postgis_lib_version() INTO libver;
	SELECT public.postgis_proj_version() INTO projver;
	SELECT public.postgis_geos_version() INTO geosver;
	SELECT public.postgis_geos_compiled_version() INTO geosver_compiled;
	SELECT public.postgis_proj_compiled_version() INTO projver_compiled;
	SELECT public.postgis_libjson_version() INTO json_lib_ver;
	SELECT public.postgis_libprotobuf_version() INTO protobuf_lib_ver;
	SELECT public.postgis_wagyu_version() INTO wagyu_lib_ver;
	SELECT public._postgis_scripts_pgsql_version() INTO pgsql_scr_ver;
	SELECT public._postgis_pgsql_version() INTO pgsql_ver;
	BEGIN
		SELECT public.postgis_gdal_version() INTO gdalver;
	EXCEPTION
		WHEN undefined_function THEN
			RAISE DEBUG 'Function postgis_gdal_version() not found.  Is raster support enabled and rtpostgis.sql installed?';
	END;
	BEGIN
		SELECT public.postgis_sfcgal_full_version() INTO sfcgalver;
		BEGIN
			SELECT public.postgis_sfcgal_scripts_installed() INTO sfcgal_scr_ver;
		EXCEPTION
			WHEN undefined_function THEN
				sfcgal_scr_ver := 'missing';
		END;
	EXCEPTION
		WHEN undefined_function THEN
			RAISE DEBUG 'Function postgis_sfcgal_scripts_installed() not found. Is sfcgal support enabled and sfcgal.sql installed?';
	END;
	SELECT public.postgis_liblwgeom_version() INTO liblwgeomver;
	SELECT public.postgis_libxml_version() INTO libxmlver;
	SELECT public.postgis_scripts_installed() INTO dbproc;
	SELECT public.postgis_scripts_released() INTO relproc;
	SELECT public.postgis_lib_revision() INTO librev;
	BEGIN
		SELECT topology.postgis_topology_scripts_installed() INTO topo_scr_ver;
	EXCEPTION
		WHEN undefined_function OR invalid_schema_name THEN
			RAISE DEBUG 'Function postgis_topology_scripts_installed() not found. Is topology support enabled and topology.sql installed?';
		WHEN insufficient_privilege THEN
			RAISE NOTICE 'Topology support cannot be inspected. Is current user granted USAGE on schema "topology" ?';
		WHEN OTHERS THEN
			RAISE NOTICE 'Function postgis_topology_scripts_installed() could not be called: % (%)', SQLERRM, SQLSTATE;
	END;

	BEGIN
		SELECT postgis_raster_scripts_installed() INTO rast_scr_ver;
	EXCEPTION
		WHEN undefined_function THEN
			RAISE DEBUG 'Function postgis_raster_scripts_installed() not found. Is raster support enabled and rtpostgis.sql installed?';
		WHEN OTHERS THEN
			RAISE NOTICE 'Function postgis_raster_scripts_installed() could not be called: % (%)', SQLERRM, SQLSTATE;
	END;

	BEGIN
		SELECT public.postgis_raster_lib_version() INTO rast_lib_ver;
	EXCEPTION
		WHEN undefined_function THEN
			RAISE DEBUG 'Function postgis_raster_lib_version() not found. Is raster support enabled and rtpostgis.sql installed?';
		WHEN OTHERS THEN
			RAISE NOTICE 'Function postgis_raster_lib_version() could not be called: % (%)', SQLERRM, SQLSTATE;
	END;

	fullver = 'POSTGIS="' || libver;

	IF  librev IS NOT NULL THEN
		fullver = fullver || ' ' || librev;
	END IF;

	fullver = fullver || '"';

	IF EXISTS (
		SELECT * FROM pg_catalog.pg_extension
		WHERE extname = 'postgis')
	THEN
			fullver = fullver || ' [EXTENSION]';
			core_is_extension := true;
	ELSE
			core_is_extension := false;
	END IF;

	IF liblwgeomver != relproc THEN
		fullver = fullver || ' (liblwgeom version mismatch: "' || liblwgeomver || '")';
	END IF;

	fullver = fullver || ' PGSQL="' || pgsql_scr_ver || '"';
	IF pgsql_scr_ver != pgsql_ver THEN
		fullver = fullver || ' (procs need upgrade for use with PostgreSQL "' || pgsql_ver || '")';
	END IF;

	IF  geosver IS NOT NULL THEN
		fullver = fullver || ' GEOS="' || geosver || '"';
		IF (string_to_array(geosver, '.'))[1:2] != (string_to_array(geosver_compiled, '.'))[1:2]
		THEN
			fullver = format('%s (compiled against GEOS %s)', fullver, geosver_compiled);
		END IF;
	END IF;

	IF  sfcgalver IS NOT NULL THEN
		fullver = fullver || ' SFCGAL="' || sfcgalver || '"';
	END IF;

	IF  projver IS NOT NULL THEN
		fullver = fullver || ' PROJ="' || projver || '"';
		IF (string_to_array(projver, '.'))[1:3] != (string_to_array(projver_compiled, '.'))[1:3]
		THEN
			fullver = format('%s (compiled against PROJ %s)', fullver, projver_compiled);
		END IF;
	END IF;

	IF  gdalver IS NOT NULL THEN
		fullver = fullver || ' GDAL="' || gdalver || '"';
	END IF;

	IF  libxmlver IS NOT NULL THEN
		fullver = fullver || ' LIBXML="' || libxmlver || '"';
	END IF;

	IF json_lib_ver IS NOT NULL THEN
		fullver = fullver || ' LIBJSON="' || json_lib_ver || '"';
	END IF;

	IF protobuf_lib_ver IS NOT NULL THEN
		fullver = fullver || ' LIBPROTOBUF="' || protobuf_lib_ver || '"';
	END IF;

	IF wagyu_lib_ver IS NOT NULL THEN
		fullver = fullver || ' WAGYU="' || wagyu_lib_ver || '"';
	END IF;

	IF dbproc != relproc THEN
		fullver = fullver || ' (core procs from "' || dbproc || '" need upgrade)';
	END IF;

	IF topo_scr_ver IS NOT NULL THEN
		fullver = fullver || ' TOPOLOGY';
		IF topo_scr_ver != relproc THEN
			fullver = fullver || ' (topology procs from "' || topo_scr_ver || '" need upgrade)';
		END IF;
		IF core_is_extension AND NOT EXISTS (
			SELECT * FROM pg_catalog.pg_extension
			WHERE extname = 'postgis_topology')
		THEN
				fullver = fullver || ' [UNPACKAGED!]';
		END IF;
	END IF;

	IF rast_lib_ver IS NOT NULL THEN
		fullver = fullver || ' RASTER';
		IF rast_lib_ver != relproc THEN
			fullver = fullver || ' (raster lib from "' || rast_lib_ver || '" need upgrade)';
		END IF;
		IF core_is_extension AND NOT EXISTS (
			SELECT * FROM pg_catalog.pg_extension
			WHERE extname = 'postgis_raster')
		THEN
				fullver = fullver || ' [UNPACKAGED!]';
		END IF;
	END IF;

	IF rast_scr_ver IS NOT NULL AND rast_scr_ver != relproc THEN
		fullver = fullver || ' (raster procs from "' || rast_scr_ver || '" need upgrade)';
	END IF;

	IF sfcgal_scr_ver IS NOT NULL AND sfcgal_scr_ver != relproc THEN
		fullver = fullver || ' (sfcgal procs from "' || sfcgal_scr_ver || '" need upgrade)';
	END IF;

	-- Check for the presence of deprecated functions
	IF EXISTS ( SELECT oid FROM pg_catalog.pg_proc WHERE proname LIKE '%_deprecated_by_postgis_%' )
	THEN
		fullver = fullver || ' (deprecated functions exist, upgrade is not complete)';
	END IF;

	RETURN fullver;
END]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_geos_compiled_version()" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[postgis_geos_compiled_version]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_geos_noop(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[GEOSnoop]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_geos_version()" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[postgis_geos_version]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_getbbox(geometry)" returnType="box2d" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_to_BOX2DF]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_hasbbox(geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_hasBBOX]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="postgis_index_supportfn(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[postgis_index_supportfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_lib_build_date()" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[postgis_lib_build_date]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_lib_revision()" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[postgis_lib_revision]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_lib_version()" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[postgis_lib_version]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_libjson_version()" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[postgis_libjson_version]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_liblwgeom_version()" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[postgis_liblwgeom_version]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_libprotobuf_version()" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[postgis_libprotobuf_version]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_libxml_version()" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[postgis_libxml_version]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_noop(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_noop]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_proj_compiled_version()" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[postgis_proj_compiled_version]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_proj_version()" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[postgis_proj_version]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_scripts_build_date()" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT '2025-01-19 06:35:59'::text AS version]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_scripts_installed()" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT trim('3.5.2'::text || $rev$ dea6d0a $rev$) AS version]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_scripts_released()" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[postgis_scripts_released]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_srs(auth_name text, auth_srid text)" returnType="TABLE(auth_name text, auth_srid text, srname text, srtext text, proj4text text, point_sw geometry, point_ne geometry)" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[postgis_srs_entry]]></definition>
         <parameters>
            <parameter mode="IN" name="auth_name" type="text"/>
            <parameter mode="IN" name="auth_srid" type="text"/>
            <parameter mode="TABLE" name="auth_name" type="text"/>
            <parameter mode="TABLE" name="auth_srid" type="text"/>
            <parameter mode="TABLE" name="srname" type="text"/>
            <parameter mode="TABLE" name="srtext" type="text"/>
            <parameter mode="TABLE" name="proj4text" type="text"/>
            <parameter mode="TABLE" name="point_sw" type="geometry"/>
            <parameter mode="TABLE" name="point_ne" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_srs_all()" returnType="TABLE(auth_name text, auth_srid text, srname text, srtext text, proj4text text, point_sw geometry, point_ne geometry)" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[postgis_srs_entry_all]]></definition>
         <parameters>
            <parameter mode="TABLE" name="auth_name" type="text"/>
            <parameter mode="TABLE" name="auth_srid" type="text"/>
            <parameter mode="TABLE" name="srname" type="text"/>
            <parameter mode="TABLE" name="srtext" type="text"/>
            <parameter mode="TABLE" name="proj4text" type="text"/>
            <parameter mode="TABLE" name="point_sw" type="geometry"/>
            <parameter mode="TABLE" name="point_ne" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_srs_codes(auth_name text)" returnType="SETOF text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[postgis_srs_codes]]></definition>
         <parameters>
            <parameter mode="IN" name="auth_name" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_srs_search(bounds geometry, authname text DEFAULT 'EPSG'::text)" returnType="TABLE(auth_name text, auth_srid text, srname text, srtext text, proj4text text, point_sw geometry, point_ne geometry)" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[postgis_srs_search]]></definition>
         <parameters>
            <parameter mode="IN" name="bounds" type="geometry"/>
            <parameter mode="IN" name="authname" type="text"/>
            <parameter mode="TABLE" name="auth_name" type="text"/>
            <parameter mode="TABLE" name="auth_srid" type="text"/>
            <parameter mode="TABLE" name="srname" type="text"/>
            <parameter mode="TABLE" name="srtext" type="text"/>
            <parameter mode="TABLE" name="proj4text" type="text"/>
            <parameter mode="TABLE" name="point_sw" type="geometry"/>
            <parameter mode="TABLE" name="point_ne" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_svn_version()" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._postgis_deprecate(
		'postgis_svn_version', 'postgis_lib_revision', '3.1.0');
	SELECT public.postgis_lib_revision();]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_transform_geometry(geom geometry, text, text, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[transform_geom]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_transform_pipeline_geometry(geom geometry, pipeline text, forward boolean, to_srid integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[transform_pipeline_geom]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="pipeline" type="text"/>
            <parameter mode="IN" name="forward" type="boolean"/>
            <parameter mode="IN" name="to_srid" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_type_name(geomname character varying, coord_dimension integer, use_new_name boolean DEFAULT true)" returnType="character varying" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN $3 THEN new_name ELSE old_name END As geomname
	FROM
	( VALUES
			('GEOMETRY', 'Geometry', 2),
			('GEOMETRY', 'GeometryZ', 3),
			('GEOMETRYM', 'GeometryM', 3),
			('GEOMETRY', 'GeometryZM', 4),

			('GEOMETRYCOLLECTION', 'GeometryCollection', 2),
			('GEOMETRYCOLLECTION', 'GeometryCollectionZ', 3),
			('GEOMETRYCOLLECTIONM', 'GeometryCollectionM', 3),
			('GEOMETRYCOLLECTION', 'GeometryCollectionZM', 4),

			('POINT', 'Point', 2),
			('POINT', 'PointZ', 3),
			('POINTM','PointM', 3),
			('POINT', 'PointZM', 4),

			('MULTIPOINT','MultiPoint', 2),
			('MULTIPOINT','MultiPointZ', 3),
			('MULTIPOINTM','MultiPointM', 3),
			('MULTIPOINT','MultiPointZM', 4),

			('POLYGON', 'Polygon', 2),
			('POLYGON', 'PolygonZ', 3),
			('POLYGONM', 'PolygonM', 3),
			('POLYGON', 'PolygonZM', 4),

			('MULTIPOLYGON', 'MultiPolygon', 2),
			('MULTIPOLYGON', 'MultiPolygonZ', 3),
			('MULTIPOLYGONM', 'MultiPolygonM', 3),
			('MULTIPOLYGON', 'MultiPolygonZM', 4),

			('MULTILINESTRING', 'MultiLineString', 2),
			('MULTILINESTRING', 'MultiLineStringZ', 3),
			('MULTILINESTRINGM', 'MultiLineStringM', 3),
			('MULTILINESTRING', 'MultiLineStringZM', 4),

			('LINESTRING', 'LineString', 2),
			('LINESTRING', 'LineStringZ', 3),
			('LINESTRINGM', 'LineStringM', 3),
			('LINESTRING', 'LineStringZM', 4),

			('CIRCULARSTRING', 'CircularString', 2),
			('CIRCULARSTRING', 'CircularStringZ', 3),
			('CIRCULARSTRINGM', 'CircularStringM' ,3),
			('CIRCULARSTRING', 'CircularStringZM', 4),

			('COMPOUNDCURVE', 'CompoundCurve', 2),
			('COMPOUNDCURVE', 'CompoundCurveZ', 3),
			('COMPOUNDCURVEM', 'CompoundCurveM', 3),
			('COMPOUNDCURVE', 'CompoundCurveZM', 4),

			('CURVEPOLYGON', 'CurvePolygon', 2),
			('CURVEPOLYGON', 'CurvePolygonZ', 3),
			('CURVEPOLYGONM', 'CurvePolygonM', 3),
			('CURVEPOLYGON', 'CurvePolygonZM', 4),

			('MULTICURVE', 'MultiCurve', 2),
			('MULTICURVE', 'MultiCurveZ', 3),
			('MULTICURVEM', 'MultiCurveM', 3),
			('MULTICURVE', 'MultiCurveZM', 4),

			('MULTISURFACE', 'MultiSurface', 2),
			('MULTISURFACE', 'MultiSurfaceZ', 3),
			('MULTISURFACEM', 'MultiSurfaceM', 3),
			('MULTISURFACE', 'MultiSurfaceZM', 4),

			('POLYHEDRALSURFACE', 'PolyhedralSurface', 2),
			('POLYHEDRALSURFACE', 'PolyhedralSurfaceZ', 3),
			('POLYHEDRALSURFACEM', 'PolyhedralSurfaceM', 3),
			('POLYHEDRALSURFACE', 'PolyhedralSurfaceZM', 4),

			('TRIANGLE', 'Triangle', 2),
			('TRIANGLE', 'TriangleZ', 3),
			('TRIANGLEM', 'TriangleM', 3),
			('TRIANGLE', 'TriangleZM', 4),

			('TIN', 'Tin', 2),
			('TIN', 'TinZ', 3),
			('TINM', 'TinM', 3),
			('TIN', 'TinZM', 4) )
			 As g(old_name, new_name, coord_dimension)
	WHERE (upper(old_name) = upper($1) OR upper(new_name) = upper($1))
		AND coord_dimension = $2;]]></definition>
         <parameters>
            <parameter mode="IN" name="geomname" type="character varying"/>
            <parameter mode="IN" name="coord_dimension" type="integer"/>
            <parameter mode="IN" name="use_new_name" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_typmod_dims(integer)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[postgis_typmod_dims]]></definition>
         <parameters>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_typmod_srid(integer)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[postgis_typmod_srid]]></definition>
         <parameters>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_typmod_type(integer)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[postgis_typmod_type]]></definition>
         <parameters>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_version()" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[postgis_version]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_wagyu_version()" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[postgis_wagyu_version]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="rename_column_if_exists(ptable text, pcolumn text, new_name text)" returnType="void" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[BEGIN
    -- Rename the column if it exists.
    IF column_exists(ptable, pcolumn) THEN
        EXECUTE FORMAT('ALTER TABLE %I RENAME COLUMN %I TO %I;',
                       ptable, pcolumn, new_name);
    END IF;
END]]></definition>
         <parameters>
            <parameter mode="IN" name="ptable" type="text"/>
            <parameter mode="IN" name="pcolumn" type="text"/>
            <parameter mode="IN" name="new_name" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="set_limit(real)" returnType="real" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[set_limit]]></definition>
         <parameters>
            <parameter mode="IN" type="real"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="show_limit()" returnType="real" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[show_limit]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="show_trgm(text)" returnType="text[]" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[show_trgm]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="similarity(text, text)" returnType="real" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[similarity]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="similarity_dist(text, text)" returnType="real" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[similarity_dist]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="similarity_op(text, text)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[similarity_op]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="skeys(hstore)" returnType="SETOF text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hstore_skeys]]></definition>
         <parameters>
            <parameter mode="IN" type="hstore"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="slice(hstore, text[])" returnType="hstore" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hstore_slice_to_hstore]]></definition>
         <parameters>
            <parameter mode="IN" type="hstore"/>
            <parameter mode="IN" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="slice_array(hstore, text[])" returnType="text[]" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hstore_slice_to_array]]></definition>
         <parameters>
            <parameter mode="IN" type="hstore"/>
            <parameter mode="IN" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="soundex(text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[soundex]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="sparsevec(sparsevec, integer, boolean)" returnType="sparsevec" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[sparsevec]]></definition>
         <parameters>
            <parameter mode="IN" type="sparsevec"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="sparsevec_cmp(sparsevec, sparsevec)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[sparsevec_cmp]]></definition>
         <parameters>
            <parameter mode="IN" type="sparsevec"/>
            <parameter mode="IN" type="sparsevec"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="sparsevec_eq(sparsevec, sparsevec)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[sparsevec_eq]]></definition>
         <parameters>
            <parameter mode="IN" type="sparsevec"/>
            <parameter mode="IN" type="sparsevec"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="sparsevec_ge(sparsevec, sparsevec)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[sparsevec_ge]]></definition>
         <parameters>
            <parameter mode="IN" type="sparsevec"/>
            <parameter mode="IN" type="sparsevec"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="sparsevec_gt(sparsevec, sparsevec)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[sparsevec_gt]]></definition>
         <parameters>
            <parameter mode="IN" type="sparsevec"/>
            <parameter mode="IN" type="sparsevec"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="sparsevec_in(cstring, oid, integer)" returnType="sparsevec" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[sparsevec_in]]></definition>
         <parameters>
            <parameter mode="IN" type="cstring"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="sparsevec_l2_squared_distance(sparsevec, sparsevec)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[sparsevec_l2_squared_distance]]></definition>
         <parameters>
            <parameter mode="IN" type="sparsevec"/>
            <parameter mode="IN" type="sparsevec"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="sparsevec_le(sparsevec, sparsevec)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[sparsevec_le]]></definition>
         <parameters>
            <parameter mode="IN" type="sparsevec"/>
            <parameter mode="IN" type="sparsevec"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="sparsevec_lt(sparsevec, sparsevec)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[sparsevec_lt]]></definition>
         <parameters>
            <parameter mode="IN" type="sparsevec"/>
            <parameter mode="IN" type="sparsevec"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="sparsevec_ne(sparsevec, sparsevec)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[sparsevec_ne]]></definition>
         <parameters>
            <parameter mode="IN" type="sparsevec"/>
            <parameter mode="IN" type="sparsevec"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="sparsevec_negative_inner_product(sparsevec, sparsevec)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[sparsevec_negative_inner_product]]></definition>
         <parameters>
            <parameter mode="IN" type="sparsevec"/>
            <parameter mode="IN" type="sparsevec"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="sparsevec_out(sparsevec)" returnType="cstring" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[sparsevec_out]]></definition>
         <parameters>
            <parameter mode="IN" type="sparsevec"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="sparsevec_recv(internal, oid, integer)" returnType="sparsevec" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[sparsevec_recv]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="sparsevec_send(sparsevec)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[sparsevec_send]]></definition>
         <parameters>
            <parameter mode="IN" type="sparsevec"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="sparsevec_to_halfvec(sparsevec, integer, boolean)" returnType="halfvec" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[sparsevec_to_halfvec]]></definition>
         <parameters>
            <parameter mode="IN" type="sparsevec"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="sparsevec_to_vector(sparsevec, integer, boolean)" returnType="vector" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[sparsevec_to_vector]]></definition>
         <parameters>
            <parameter mode="IN" type="sparsevec"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="sparsevec_typmod_in(cstring[])" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[sparsevec_typmod_in]]></definition>
         <parameters>
            <parameter mode="IN" type="cstring[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="spheroid_in(cstring)" returnType="spheroid" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ellipsoid_in]]></definition>
         <parameters>
            <parameter mode="IN" type="cstring"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="spheroid_out(spheroid)" returnType="cstring" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ellipsoid_out]]></definition>
         <parameters>
            <parameter mode="IN" type="spheroid"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_3dclosestpoint(geom1 geometry, geom2 geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_closestpoint3d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_3ddfullywithin(geom1 geometry, geom2 geometry, double precision)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_dfullywithin3d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_3ddistance(geom1 geometry, geom2 geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_3DDistance]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_3ddwithin(geom1 geometry, geom2 geometry, double precision)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_dwithin3d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_3dextent(geometry)" returnType="box3d" securityType="INVOKER" type="AGGREGATE">
         <comment/>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_3dintersects(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_3DIntersects]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_3dlength(geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_length_linestring]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_3dlineinterpolatepoint(geometry, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_3DLineInterpolatePoint]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_3dlongestline(geom1 geometry, geom2 geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_longestline3d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_3dmakebox(geom1 geometry, geom2 geometry)" returnType="box3d" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[BOX3D_construct]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_3dmaxdistance(geom1 geometry, geom2 geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_maxdistance3d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_3dperimeter(geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_perimeter_poly]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_3dshortestline(geom1 geometry, geom2 geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_shortestline3d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_addmeasure(geometry, double precision, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_AddMeasure]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_addpoint(geom1 geometry, geom2 geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_addpoint]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_addpoint(geom1 geometry, geom2 geometry, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_addpoint]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_Affine($1,  $2, $3, 0,  $4, $5, 0,  0, 0, 1,  $6, $7, 0)]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_affine]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_angle(line1 geometry, line2 geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_Angle(public.St_StartPoint($1), public.ST_EndPoint($1), public.ST_StartPoint($2), public.ST_EndPoint($2))]]></definition>
         <parameters>
            <parameter mode="IN" name="line1" type="geometry"/>
            <parameter mode="IN" name="line2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_angle(pt1 geometry, pt2 geometry, pt3 geometry, pt4 geometry DEFAULT '0101000000000000000000F87F000000000000F87F'::geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_angle]]></definition>
         <parameters>
            <parameter mode="IN" name="pt1" type="geometry"/>
            <parameter mode="IN" name="pt2" type="geometry"/>
            <parameter mode="IN" name="pt3" type="geometry"/>
            <parameter mode="IN" name="pt4" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_area(geog geography, use_spheroid boolean DEFAULT true)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_area]]></definition>
         <parameters>
            <parameter mode="IN" name="geog" type="geography"/>
            <parameter mode="IN" name="use_spheroid" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_area(geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_Area]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_area(text)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_Area($1::public.geometry);]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_area2d(geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_Area]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asbinary(geography)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_asBinary]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asbinary(geography, text)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_asBinary]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asbinary(geometry)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_asBinary]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asbinary(geometry, text)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_asBinary]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asencodedpolyline(geom geometry, nprecision integer DEFAULT 5)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_asEncodedPolyline]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="nprecision" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asewkb(geometry)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[WKBFromLWGEOM]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asewkb(geometry, text)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[WKBFromLWGEOM]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asewkt(geography)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_asEWKT]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asewkt(geography, integer)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_asEWKT]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asewkt(geometry)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_asEWKT]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asewkt(geometry, integer)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_asEWKT]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asewkt(text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_AsEWKT($1::public.geometry);]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asflatgeobuf(anyelement)" returnType="bytea" securityType="INVOKER" type="AGGREGATE">
         <comment/>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="anyelement"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asflatgeobuf(anyelement, boolean)" returnType="bytea" securityType="INVOKER" type="AGGREGATE">
         <comment/>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="anyelement"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asflatgeobuf(anyelement, boolean, text)" returnType="bytea" securityType="INVOKER" type="AGGREGATE">
         <comment/>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="anyelement"/>
            <parameter mode="IN" type="boolean"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asgeobuf(anyelement)" returnType="bytea" securityType="INVOKER" type="AGGREGATE">
         <comment/>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="anyelement"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asgeobuf(anyelement, text)" returnType="bytea" securityType="INVOKER" type="AGGREGATE">
         <comment/>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="anyelement"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asgeojson(geog geography, maxdecimaldigits integer DEFAULT 9, options integer DEFAULT 0)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_as_geojson]]></definition>
         <parameters>
            <parameter mode="IN" name="geog" type="geography"/>
            <parameter mode="IN" name="maxdecimaldigits" type="integer"/>
            <parameter mode="IN" name="options" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asgeojson(geom geometry, maxdecimaldigits integer DEFAULT 9, options integer DEFAULT 8)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_asGeoJson]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="maxdecimaldigits" type="integer"/>
            <parameter mode="IN" name="options" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_asgeojson(r record, geom_column text DEFAULT ''::text, maxdecimaldigits integer DEFAULT 9, pretty_bool boolean DEFAULT false, id_column text DEFAULT ''::text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_AsGeoJsonRow]]></definition>
         <parameters>
            <parameter mode="IN" name="r" type="record"/>
            <parameter mode="IN" name="geom_column" type="text"/>
            <parameter mode="IN" name="maxdecimaldigits" type="integer"/>
            <parameter mode="IN" name="pretty_bool" type="boolean"/>
            <parameter mode="IN" name="id_column" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asgeojson(text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_AsGeoJson($1::public.geometry, 9, 0);]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asgml(geog geography, maxdecimaldigits integer DEFAULT 15, options integer DEFAULT 0, nprefix text DEFAULT 'gml'::text, id text DEFAULT ''::text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_as_gml]]></definition>
         <parameters>
            <parameter mode="IN" name="geog" type="geography"/>
            <parameter mode="IN" name="maxdecimaldigits" type="integer"/>
            <parameter mode="IN" name="options" type="integer"/>
            <parameter mode="IN" name="nprefix" type="text"/>
            <parameter mode="IN" name="id" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asgml(geom geometry, maxdecimaldigits integer DEFAULT 15, options integer DEFAULT 0)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_asGML]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="maxdecimaldigits" type="integer"/>
            <parameter mode="IN" name="options" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asgml(text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_AsGML(2,$1::public.geometry,15,0, NULL, NULL);]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asgml(version integer, geog geography, maxdecimaldigits integer DEFAULT 15, options integer DEFAULT 0, nprefix text DEFAULT 'gml'::text, id text DEFAULT ''::text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_as_gml]]></definition>
         <parameters>
            <parameter mode="IN" name="version" type="integer"/>
            <parameter mode="IN" name="geog" type="geography"/>
            <parameter mode="IN" name="maxdecimaldigits" type="integer"/>
            <parameter mode="IN" name="options" type="integer"/>
            <parameter mode="IN" name="nprefix" type="text"/>
            <parameter mode="IN" name="id" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asgml(version integer, geom geometry, maxdecimaldigits integer DEFAULT 15, options integer DEFAULT 0, nprefix text DEFAULT NULL::text, id text DEFAULT NULL::text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_asGML]]></definition>
         <parameters>
            <parameter mode="IN" name="version" type="integer"/>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="maxdecimaldigits" type="integer"/>
            <parameter mode="IN" name="options" type="integer"/>
            <parameter mode="IN" name="nprefix" type="text"/>
            <parameter mode="IN" name="id" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_ashexewkb(geometry)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_asHEXEWKB]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_ashexewkb(geometry, text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_asHEXEWKB]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_askml(geog geography, maxdecimaldigits integer DEFAULT 15, nprefix text DEFAULT ''::text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_as_kml]]></definition>
         <parameters>
            <parameter mode="IN" name="geog" type="geography"/>
            <parameter mode="IN" name="maxdecimaldigits" type="integer"/>
            <parameter mode="IN" name="nprefix" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_askml(geom geometry, maxdecimaldigits integer DEFAULT 15, nprefix text DEFAULT ''::text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_asKML]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="maxdecimaldigits" type="integer"/>
            <parameter mode="IN" name="nprefix" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_askml(text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_AsKML($1::public.geometry, 15);]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_aslatlontext(geom geometry, tmpl text DEFAULT ''::text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_to_latlon]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="tmpl" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asmarc21(geom geometry, format text DEFAULT 'hdddmmss'::text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_AsMARC21]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="format" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asmvt(anyelement)" returnType="bytea" securityType="INVOKER" type="AGGREGATE">
         <comment/>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="anyelement"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asmvt(anyelement, text)" returnType="bytea" securityType="INVOKER" type="AGGREGATE">
         <comment/>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="anyelement"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asmvt(anyelement, text, integer)" returnType="bytea" securityType="INVOKER" type="AGGREGATE">
         <comment/>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="anyelement"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asmvt(anyelement, text, integer, text)" returnType="bytea" securityType="INVOKER" type="AGGREGATE">
         <comment/>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="anyelement"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asmvt(anyelement, text, integer, text, text)" returnType="bytea" securityType="INVOKER" type="AGGREGATE">
         <comment/>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="anyelement"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asmvtgeom(geom geometry, bounds box2d, extent integer DEFAULT 4096, buffer integer DEFAULT 256, clip_geom boolean DEFAULT true)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_AsMVTGeom]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="bounds" type="box2d"/>
            <parameter mode="IN" name="extent" type="integer"/>
            <parameter mode="IN" name="buffer" type="integer"/>
            <parameter mode="IN" name="clip_geom" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_assvg(geog geography, rel integer DEFAULT 0, maxdecimaldigits integer DEFAULT 15)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_as_svg]]></definition>
         <parameters>
            <parameter mode="IN" name="geog" type="geography"/>
            <parameter mode="IN" name="rel" type="integer"/>
            <parameter mode="IN" name="maxdecimaldigits" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_assvg(geom geometry, rel integer DEFAULT 0, maxdecimaldigits integer DEFAULT 15)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_asSVG]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="rel" type="integer"/>
            <parameter mode="IN" name="maxdecimaldigits" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_assvg(text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_AsSVG($1::public.geometry,0,15);]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_astext(geography)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_asText]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_astext(geography, integer)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_asText]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_astext(geometry)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_asText]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_astext(geometry, integer)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_asText]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_astext(text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_AsText($1::public.geometry);]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_astwkb(geom geometry, prec integer DEFAULT NULL::integer, prec_z integer DEFAULT NULL::integer, prec_m integer DEFAULT NULL::integer, with_sizes boolean DEFAULT NULL::boolean, with_boxes boolean DEFAULT NULL::boolean)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[TWKBFromLWGEOM]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="prec" type="integer"/>
            <parameter mode="IN" name="prec_z" type="integer"/>
            <parameter mode="IN" name="prec_m" type="integer"/>
            <parameter mode="IN" name="with_sizes" type="boolean"/>
            <parameter mode="IN" name="with_boxes" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_astwkb(geom geometry[], ids bigint[], prec integer DEFAULT NULL::integer, prec_z integer DEFAULT NULL::integer, prec_m integer DEFAULT NULL::integer, with_sizes boolean DEFAULT NULL::boolean, with_boxes boolean DEFAULT NULL::boolean)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[TWKBFromLWGEOMArray]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry[]"/>
            <parameter mode="IN" name="ids" type="bigint[]"/>
            <parameter mode="IN" name="prec" type="integer"/>
            <parameter mode="IN" name="prec_z" type="integer"/>
            <parameter mode="IN" name="prec_m" type="integer"/>
            <parameter mode="IN" name="with_sizes" type="boolean"/>
            <parameter mode="IN" name="with_boxes" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asx3d(geom geometry, maxdecimaldigits integer DEFAULT 15, options integer DEFAULT 0)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_AsX3D(3,$1,$2,$3,'');]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="maxdecimaldigits" type="integer"/>
            <parameter mode="IN" name="options" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_azimuth(geog1 geography, geog2 geography)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_azimuth]]></definition>
         <parameters>
            <parameter mode="IN" name="geog1" type="geography"/>
            <parameter mode="IN" name="geog2" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_azimuth(geom1 geometry, geom2 geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_azimuth]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_bdmpolyfromtext(text, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
	geomtext alias for $1;
	srid alias for $2;
	mline public.geometry;
	geom public.geometry;
BEGIN
	mline := public.ST_MultiLineStringFromText(geomtext, srid);

	IF mline IS NULL
	THEN
		RAISE EXCEPTION 'Input is not a MultiLinestring';
	END IF;

	geom := public.ST_Multi(public.ST_BuildArea(mline));

	RETURN geom;
END;]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_bdpolyfromtext(text, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
	geomtext alias for $1;
	srid alias for $2;
	mline public.geometry;
	geom public.geometry;
BEGIN
	mline := public.ST_MultiLineStringFromText(geomtext, srid);

	IF mline IS NULL
	THEN
		RAISE EXCEPTION 'Input is not a MultiLinestring';
	END IF;

	geom := public.ST_BuildArea(mline);

	IF public.GeometryType(geom) != 'POLYGON'
	THEN
		RAISE EXCEPTION 'Input returns more then a single polygon, try using BdMPolyFromText instead';
	END IF;

	RETURN geom;
END;]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_boundary(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[boundary]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_boundingdiagonal(geom geometry, fits boolean DEFAULT false)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_BoundingDiagonal]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="fits" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_box2dfromgeohash(text, integer DEFAULT NULL::integer)" returnType="box2d" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[box2d_from_geohash]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_buffer(geography, double precision)" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.geography(public.ST_Transform(public.ST_Buffer(public.ST_Transform(public.geometry($1), public._ST_BestSRID($1)), $2), public.ST_SRID($1)))]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_buffer(geography, double precision, integer)" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.geography(public.ST_Transform(public.ST_Buffer(public.ST_Transform(public.geometry($1), public._ST_BestSRID($1)), $2, $3), public.ST_SRID($1)))]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_buffer(geography, double precision, text)" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.geography(public.ST_Transform(public.ST_Buffer(public.ST_Transform(public.geometry($1), public._ST_BestSRID($1)), $2, $3), public.ST_SRID($1)))]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_buffer(geom geometry, radius double precision, options text DEFAULT ''::text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[buffer]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="radius" type="double precision"/>
            <parameter mode="IN" name="options" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_buffer(geom geometry, radius double precision, quadsegs integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_Buffer($1, $2, CAST('quad_segs='||CAST($3 AS text) as text))]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="radius" type="double precision"/>
            <parameter mode="IN" name="quadsegs" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_buffer(text, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_Buffer($1::public.geometry, $2);]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_buffer(text, double precision, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_Buffer($1::public.geometry, $2, $3);]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_buffer(text, double precision, text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_Buffer($1::public.geometry, $2, $3);]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_buildarea(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_BuildArea]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_centroid(geography, use_spheroid boolean DEFAULT true)" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_centroid]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" name="use_spheroid" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_centroid(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[centroid]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_centroid(text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_Centroid($1::public.geometry);]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_chaikinsmoothing(geometry, integer DEFAULT 1, boolean DEFAULT false)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_ChaikinSmoothing]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_cleangeometry(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_CleanGeometry]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_clipbybox2d(geom geometry, box box2d)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_ClipByBox2d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="box" type="box2d"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_closestpoint(geography, geography, use_spheroid boolean DEFAULT true)" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_closestpoint]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" name="use_spheroid" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_closestpoint(geom1 geometry, geom2 geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_closestpoint]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_closestpoint(text, text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_ClosestPoint($1::public.geometry, $2::public.geometry);]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_closestpointofapproach(geometry, geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_ClosestPointOfApproach]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_clusterdbscan(geometry, eps double precision, minpoints integer)" returnType="integer" securityType="INVOKER" type="WINDOW">
         <comment/>
         <definition language="c"><![CDATA[ST_ClusterDBSCAN]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" name="eps" type="double precision"/>
            <parameter mode="IN" name="minpoints" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_clusterintersecting(geometry)" returnType="geometry[]" securityType="INVOKER" type="AGGREGATE">
         <comment/>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_clusterintersecting(geometry[])" returnType="geometry[]" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[clusterintersecting_garray]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_clusterintersectingwin(geometry)" returnType="integer" securityType="INVOKER" type="WINDOW">
         <comment/>
         <definition language="c"><![CDATA[ST_ClusterIntersectingWin]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_clusterkmeans(geom geometry, k integer, max_radius double precision DEFAULT NULL::double precision)" returnType="integer" securityType="INVOKER" type="WINDOW">
         <comment/>
         <definition language="c"><![CDATA[ST_ClusterKMeans]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="k" type="integer"/>
            <parameter mode="IN" name="max_radius" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_clusterwithin(geometry, double precision)" returnType="geometry[]" securityType="INVOKER" type="AGGREGATE">
         <comment/>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_clusterwithin(geometry[], double precision)" returnType="geometry[]" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[cluster_within_distance_garray]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry[]"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_clusterwithinwin(geometry, distance double precision)" returnType="integer" securityType="INVOKER" type="WINDOW">
         <comment/>
         <definition language="c"><![CDATA[ST_ClusterWithinWin]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" name="distance" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_collect(geom1 geometry, geom2 geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_collect]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_collect(geometry)" returnType="geometry" securityType="INVOKER" type="AGGREGATE">
         <comment/>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_collect(geometry[])" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_collect_garray]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_collectionextract(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_CollectionExtract]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_collectionextract(geometry, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_CollectionExtract]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_collectionhomogenize(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_CollectionHomogenize]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_combinebbox(box2d, geometry)" returnType="box2d" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[BOX2D_combine]]></definition>
         <parameters>
            <parameter mode="IN" type="box2d"/>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_combinebbox(box3d, box3d)" returnType="box3d" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[BOX3D_combine_BOX3D]]></definition>
         <parameters>
            <parameter mode="IN" type="box3d"/>
            <parameter mode="IN" type="box3d"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_combinebbox(box3d, geometry)" returnType="box3d" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[BOX3D_combine]]></definition>
         <parameters>
            <parameter mode="IN" type="box3d"/>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_concavehull(param_geom geometry, param_pctconvex double precision, param_allow_holes boolean DEFAULT false)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		var_convhull public.geometry := public.ST_ForceSFS(public.ST_ConvexHull(param_geom));
		var_param_geom public.geometry := public.ST_ForceSFS(param_geom);
		var_initarea float := public.ST_Area(var_convhull);
		var_newarea float := var_initarea;
		var_div integer := 6; 
		var_tempgeom public.geometry;
		var_tempgeom2 public.geometry;
		var_cent public.geometry;
		var_geoms public.geometry[4]; 
		var_enline public.geometry;
		var_resultgeom public.geometry;
		var_atempgeoms public.geometry[];
		var_buf float := 1; 
	BEGIN
		-- We start with convex hull as our base
		var_resultgeom := var_convhull;

		IF param_pctconvex = 1 THEN
			-- this is the same as asking for the convex hull
			return var_resultgeom;
		ELSIF public.ST_GeometryType(var_param_geom) = 'ST_Polygon' THEN -- it is as concave as it is going to get
			IF param_allow_holes THEN -- leave the holes
				RETURN var_param_geom;
			ELSE -- remove the holes
				var_resultgeom := public.ST_MakePolygon(public.ST_ExteriorRing(var_param_geom));
				RETURN var_resultgeom;
			END IF;
		END IF;
		IF public.ST_Dimension(var_resultgeom) > 1 AND param_pctconvex BETWEEN 0 and 0.99 THEN
		-- get linestring that forms envelope of geometry
			var_enline := public.ST_Boundary(public.ST_Envelope(var_param_geom));
			var_buf := public.ST_Length(var_enline)/1000.0;
			IF public.ST_GeometryType(var_param_geom) = 'ST_MultiPoint' AND public.ST_NumGeometries(var_param_geom) BETWEEN 4 and 200 THEN
			-- we make polygons out of points since they are easier to cave in.
			-- Note we limit to between 4 and 200 points because this process is slow and gets quadratically slow
				var_buf := sqrt(public.ST_Area(var_convhull)*0.8/(public.ST_NumGeometries(var_param_geom)*public.ST_NumGeometries(var_param_geom)));
				var_atempgeoms := ARRAY(SELECT geom FROM public.ST_DumpPoints(var_param_geom));
				-- 5 and 10 and just fudge factors
				var_tempgeom := public.ST_Union(ARRAY(SELECT geom
						FROM (
						-- fuse near neighbors together
						SELECT DISTINCT ON (i) i,  public.ST_Distance(var_atempgeoms[i],var_atempgeoms[j]), public.ST_Buffer(public.ST_MakeLine(var_atempgeoms[i], var_atempgeoms[j]) , var_buf*5, 'quad_segs=3') As geom
								FROM generate_series(1,array_upper(var_atempgeoms, 1)) As i
									INNER JOIN generate_series(1,array_upper(var_atempgeoms, 1)) As j
										ON (
								 NOT public.ST_Intersects(var_atempgeoms[i],var_atempgeoms[j])
									AND public.ST_DWithin(var_atempgeoms[i],var_atempgeoms[j], var_buf*10)
									)
								UNION ALL
						-- catch the ones with no near neighbors
								SELECT i, 0, public.ST_Buffer(var_atempgeoms[i] , var_buf*10, 'quad_segs=3') As geom
								FROM generate_series(1,array_upper(var_atempgeoms, 1)) As i
									LEFT JOIN generate_series(ceiling(array_upper(var_atempgeoms,1)/2)::integer,array_upper(var_atempgeoms, 1)) As j
										ON (
								 NOT public.ST_Intersects(var_atempgeoms[i],var_atempgeoms[j])
									AND public.ST_DWithin(var_atempgeoms[i],var_atempgeoms[j], var_buf*10)
									)
									WHERE j IS NULL
								ORDER BY 1, 2
							) As foo	) );
				IF public.ST_IsValid(var_tempgeom) AND public.ST_GeometryType(var_tempgeom) = 'ST_Polygon' THEN
					var_tempgeom := public.ST_ForceSFS(public.ST_Intersection(var_tempgeom, var_convhull));
					IF param_allow_holes THEN
						var_param_geom := var_tempgeom;
					ELSIF public.ST_GeometryType(var_tempgeom) = 'ST_Polygon' THEN
						var_param_geom := public.ST_ForceSFS(public.ST_MakePolygon(public.ST_ExteriorRing(var_tempgeom)));
					ELSE
						var_param_geom := public.ST_ForceSFS(public.ST_ConvexHull(var_param_geom));
					END IF;
					-- make sure result covers original (#3638)
					var_param_geom := public.ST_Union(param_geom, var_param_geom);
					return var_param_geom;
				ELSIF public.ST_IsValid(var_tempgeom) THEN
					var_param_geom := public.ST_ForceSFS(public.ST_Intersection(var_tempgeom, var_convhull));
				END IF;
			END IF;

			IF public.ST_GeometryType(var_param_geom) = 'ST_Polygon' THEN
				IF NOT param_allow_holes THEN
					var_param_geom := public.ST_ForceSFS(public.ST_MakePolygon(public.ST_ExteriorRing(var_param_geom)));
				END IF;
				-- make sure result covers original (#3638)
				--var_param_geom := public.ST_Union(param_geom, var_param_geom);
				return var_param_geom;
			END IF;
			var_cent := public.ST_Centroid(var_param_geom);
			IF (public.ST_XMax(var_enline) - public.ST_XMin(var_enline) ) > var_buf AND (public.ST_YMax(var_enline) - public.ST_YMin(var_enline) ) > var_buf THEN
					IF public.ST_Dwithin(public.ST_Centroid(var_convhull) , public.ST_Centroid(public.ST_Envelope(var_param_geom)), var_buf/2) THEN
				-- If the geometric dimension is > 1 and the object is symmetric (cutting at centroid will not work -- offset a bit)
						var_cent := public.ST_Translate(var_cent, (public.ST_XMax(var_enline) - public.ST_XMin(var_enline))/1000,  (public.ST_YMAX(var_enline) - public.ST_YMin(var_enline))/1000);
					ELSE
						-- uses closest point on geometry to centroid. I can't explain why we are doing this
						var_cent := public.ST_ClosestPoint(var_param_geom,var_cent);
					END IF;
					IF public.ST_DWithin(var_cent, var_enline,var_buf) THEN
						var_cent := public.ST_centroid(public.ST_Envelope(var_param_geom));
					END IF;
					-- break envelope into 4 triangles about the centroid of the geometry and returned the clipped geometry in each quadrant
					FOR i in 1 .. 4 LOOP
					   var_geoms[i] := public.ST_MakePolygon(public.ST_MakeLine(ARRAY[public.ST_PointN(var_enline,i), public.ST_PointN(var_enline,i+1), var_cent, public.ST_PointN(var_enline,i)]));
					   var_geoms[i] := public.ST_ForceSFS(public.ST_Intersection(var_param_geom, public.ST_Buffer(var_geoms[i],var_buf)));
					   IF public.ST_IsValid(var_geoms[i]) THEN

					   ELSE
							var_geoms[i] := public.ST_BuildArea(public.ST_MakeLine(ARRAY[public.ST_PointN(var_enline,i), public.ST_PointN(var_enline,i+1), var_cent, public.ST_PointN(var_enline,i)]));
					   END IF;
					END LOOP;
					var_tempgeom := public.ST_Union(ARRAY[public.ST_ConvexHull(var_geoms[1]), public.ST_ConvexHull(var_geoms[2]) , public.ST_ConvexHull(var_geoms[3]), public.ST_ConvexHull(var_geoms[4])]);
					--RAISE NOTICE 'Curr vex % ', public.ST_AsText(var_tempgeom);
					IF public.ST_Area(var_tempgeom) <= var_newarea AND public.ST_IsValid(var_tempgeom)  THEN --AND public.ST_GeometryType(var_tempgeom) ILIKE '%Polygon'

						var_tempgeom := public.ST_Buffer(public.ST_ConcaveHull(var_geoms[1],least(param_pctconvex + param_pctconvex/var_div),true),var_buf, 'quad_segs=2');
						FOR i IN 1 .. 4 LOOP
							var_geoms[i] := public.ST_Buffer(public.ST_ConcaveHull(var_geoms[i],least(param_pctconvex + param_pctconvex/var_div),true), var_buf, 'quad_segs=2');
							IF public.ST_IsValid(var_geoms[i]) Then
								var_tempgeom := public.ST_Union(var_tempgeom, var_geoms[i]);
							ELSE
								RAISE NOTICE 'Not valid % %', i, public.ST_AsText(var_tempgeom);
								var_tempgeom := public.ST_Union(var_tempgeom, public.ST_ConvexHull(var_geoms[i]));
							END IF;
						END LOOP;

						--RAISE NOTICE 'Curr concave % ', public.ST_AsText(var_tempgeom);
						IF public.ST_IsValid(var_tempgeom) THEN
							var_resultgeom := var_tempgeom;
						END IF;
						var_newarea := public.ST_Area(var_resultgeom);
					ELSIF public.ST_IsValid(var_tempgeom) THEN
						var_resultgeom := var_tempgeom;
					END IF;

					IF public.ST_NumGeometries(var_resultgeom) > 1  THEN
						var_tempgeom := public._ST_ConcaveHull(var_resultgeom);
						IF public.ST_IsValid(var_tempgeom) AND public.ST_GeometryType(var_tempgeom) ILIKE 'ST_Polygon' THEN
							var_resultgeom := var_tempgeom;
						ELSE
							var_resultgeom := public.ST_Buffer(var_tempgeom,var_buf, 'quad_segs=2');
						END IF;
					END IF;
					IF param_allow_holes = false THEN
					-- only keep exterior ring since we do not want holes
						var_resultgeom := public.ST_MakePolygon(public.ST_ExteriorRing(var_resultgeom));
					END IF;
				ELSE
					var_resultgeom := public.ST_Buffer(var_resultgeom,var_buf);
				END IF;
				var_resultgeom := public.ST_ForceSFS(public.ST_Intersection(var_resultgeom, public.ST_ConvexHull(var_param_geom)));
			ELSE
				-- dimensions are too small to cut
				var_resultgeom := public._ST_ConcaveHull(var_param_geom);
			END IF;

			RETURN var_resultgeom;
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="param_geom" type="geometry"/>
            <parameter mode="IN" name="param_pctconvex" type="double precision"/>
            <parameter mode="IN" name="param_allow_holes" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_contains(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[contains]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_containsproperly(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[containsproperly]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_convexhull(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[convexhull]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_coorddim(geometry geometry)" returnType="smallint" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_ndims]]></definition>
         <parameters>
            <parameter mode="IN" name="geometry" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_coverageinvalidedges(geom geometry, tolerance double precision DEFAULT 0.0)" returnType="geometry" securityType="INVOKER" type="WINDOW">
         <comment/>
         <definition language="c"><![CDATA[ST_CoverageInvalidEdges]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="tolerance" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_coveragesimplify(geom geometry, tolerance double precision, simplifyboundary boolean DEFAULT true)" returnType="geometry" securityType="INVOKER" type="WINDOW">
         <comment/>
         <definition language="c"><![CDATA[ST_CoverageSimplify]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="tolerance" type="double precision"/>
            <parameter mode="IN" name="simplifyboundary" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_coverageunion(geometry)" returnType="geometry" securityType="INVOKER" type="AGGREGATE">
         <comment/>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_coverageunion(geometry[])" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_CoverageUnion]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_coveredby(geog1 geography, geog2 geography)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_coveredby]]></definition>
         <parameters>
            <parameter mode="IN" name="geog1" type="geography"/>
            <parameter mode="IN" name="geog2" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_coveredby(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[coveredby]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_coveredby(text, text)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_CoveredBy($1::public.geometry, $2::public.geometry);]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_covers(geog1 geography, geog2 geography)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_covers]]></definition>
         <parameters>
            <parameter mode="IN" name="geog1" type="geography"/>
            <parameter mode="IN" name="geog2" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_covers(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[covers]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_covers(text, text)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_Covers($1::public.geometry, $2::public.geometry);]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_cpawithin(geometry, geometry, double precision)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_CPAWithin]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_crosses(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[crosses]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_curven(geometry geometry, i integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_CurveN]]></definition>
         <parameters>
            <parameter mode="IN" name="geometry" type="geometry"/>
            <parameter mode="IN" name="i" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_curvetoline(geom geometry, tol double precision DEFAULT 32, toltype integer DEFAULT 0, flags integer DEFAULT 0)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_CurveToLine]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="tol" type="double precision"/>
            <parameter mode="IN" name="toltype" type="integer"/>
            <parameter mode="IN" name="flags" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_delaunaytriangles(g1 geometry, tolerance double precision DEFAULT 0.0, flags integer DEFAULT 0)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_DelaunayTriangles]]></definition>
         <parameters>
            <parameter mode="IN" name="g1" type="geometry"/>
            <parameter mode="IN" name="tolerance" type="double precision"/>
            <parameter mode="IN" name="flags" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_dfullywithin(geom1 geometry, geom2 geometry, double precision)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_dfullywithin]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_difference(geom1 geometry, geom2 geometry, gridsize double precision DEFAULT '-1.0'::numeric)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_Difference]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
            <parameter mode="IN" name="gridsize" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_dimension(geometry)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_dimension]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_disjoint(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[disjoint]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_distance(geog1 geography, geog2 geography, use_spheroid boolean DEFAULT true)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_distance]]></definition>
         <parameters>
            <parameter mode="IN" name="geog1" type="geography"/>
            <parameter mode="IN" name="geog2" type="geography"/>
            <parameter mode="IN" name="use_spheroid" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_distance(geom1 geometry, geom2 geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_Distance]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_distance(text, text)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_Distance($1::public.geometry, $2::public.geometry);]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_distancecpa(geometry, geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_DistanceCPA]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_distancesphere(geom1 geometry, geom2 geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[select public.ST_distance( public.geography($1), public.geography($2),false)]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_distancesphere(geom1 geometry, geom2 geometry, radius double precision)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_distance_sphere]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
            <parameter mode="IN" name="radius" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_distancespheroid(geom1 geometry, geom2 geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_distance_ellipsoid]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_distancespheroid(geom1 geometry, geom2 geometry, spheroid)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_distance_ellipsoid]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
            <parameter mode="IN" type="spheroid"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_dump(geometry)" returnType="SETOF geometry_dump" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_dump]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_dumppoints(geometry)" returnType="SETOF geometry_dump" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_dumppoints]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_dumprings(geometry)" returnType="SETOF geometry_dump" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_dump_rings]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_dumpsegments(geometry)" returnType="SETOF geometry_dump" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_dumpsegments]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_dwithin(geog1 geography, geog2 geography, tolerance double precision, use_spheroid boolean DEFAULT true)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_dwithin]]></definition>
         <parameters>
            <parameter mode="IN" name="geog1" type="geography"/>
            <parameter mode="IN" name="geog2" type="geography"/>
            <parameter mode="IN" name="tolerance" type="double precision"/>
            <parameter mode="IN" name="use_spheroid" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_dwithin(geom1 geometry, geom2 geometry, double precision)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_dwithin]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_dwithin(text, text, double precision)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_DWithin($1::public.geometry, $2::public.geometry, $3);]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_endpoint(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_endpoint_linestring]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_envelope(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_envelope]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_equals(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_Equals]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_estimatedextent(text, text)" returnType="box2d" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_estimated_extent]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_estimatedextent(text, text, text)" returnType="box2d" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_estimated_extent]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_estimatedextent(text, text, text, boolean)" returnType="box2d" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_estimated_extent]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_expand(box box2d, dx double precision, dy double precision)" returnType="box2d" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[BOX2D_expand]]></definition>
         <parameters>
            <parameter mode="IN" name="box" type="box2d"/>
            <parameter mode="IN" name="dx" type="double precision"/>
            <parameter mode="IN" name="dy" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_expand(box box3d, dx double precision, dy double precision, dz double precision DEFAULT 0)" returnType="box3d" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[BOX3D_expand]]></definition>
         <parameters>
            <parameter mode="IN" name="box" type="box3d"/>
            <parameter mode="IN" name="dx" type="double precision"/>
            <parameter mode="IN" name="dy" type="double precision"/>
            <parameter mode="IN" name="dz" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_expand(box2d, double precision)" returnType="box2d" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[BOX2D_expand]]></definition>
         <parameters>
            <parameter mode="IN" type="box2d"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_expand(box3d, double precision)" returnType="box3d" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[BOX3D_expand]]></definition>
         <parameters>
            <parameter mode="IN" type="box3d"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_expand(geom geometry, dx double precision, dy double precision, dz double precision DEFAULT 0, dm double precision DEFAULT 0)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_expand]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="dx" type="double precision"/>
            <parameter mode="IN" name="dy" type="double precision"/>
            <parameter mode="IN" name="dz" type="double precision"/>
            <parameter mode="IN" name="dm" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_expand(geometry, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_expand]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_extent(geometry)" returnType="box2d" securityType="INVOKER" type="AGGREGATE">
         <comment/>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_exteriorring(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_exteriorring_polygon]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_filterbym(geometry, double precision, double precision DEFAULT NULL::double precision, boolean DEFAULT false)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_FilterByM]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_findextent(text, text)" returnType="box2d" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
	tablename alias for $1;
	columnname alias for $2;
	myrec RECORD;

BEGIN
	FOR myrec IN EXECUTE 'SELECT public.ST_Extent("' || columnname || '") As extent FROM "' || tablename || '"' LOOP
		return myrec.extent;
	END LOOP;
END;]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_findextent(text, text, text)" returnType="box2d" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
	schemaname alias for $1;
	tablename alias for $2;
	columnname alias for $3;
	myrec RECORD;
BEGIN
	FOR myrec IN EXECUTE 'SELECT public.ST_Extent("' || columnname || '") As extent FROM "' || schemaname || '"."' || tablename || '"' LOOP
		return myrec.extent;
	END LOOP;
END;]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_flipcoordinates(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_FlipCoordinates]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_force2d(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_force_2d]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_force3d(geom geometry, zvalue double precision DEFAULT 0.0)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_Force3DZ($1, $2)]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="zvalue" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_force3dm(geom geometry, mvalue double precision DEFAULT 0.0)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_force_3dm]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="mvalue" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_force3dz(geom geometry, zvalue double precision DEFAULT 0.0)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_force_3dz]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="zvalue" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_force4d(geom geometry, zvalue double precision DEFAULT 0.0, mvalue double precision DEFAULT 0.0)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_force_4d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="zvalue" type="double precision"/>
            <parameter mode="IN" name="mvalue" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_forcecollection(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_force_collection]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_forcecurve(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_force_curve]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_forcepolygonccw(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_Reverse(public.ST_ForcePolygonCW($1))]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_forcepolygoncw(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_force_clockwise_poly]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_forcerhr(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_force_clockwise_poly]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_forcesfs(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_force_sfs]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_forcesfs(geometry, version text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_force_sfs]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" name="version" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_frechetdistance(geom1 geometry, geom2 geometry, double precision DEFAULT '-1'::integer)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_FrechetDistance]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_fromflatgeobuf(anyelement, bytea)" returnType="SETOF anyelement" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_fromflatgeobuf]]></definition>
         <parameters>
            <parameter mode="IN" type="anyelement"/>
            <parameter mode="IN" type="bytea"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_fromflatgeobuftotable(text, text, bytea)" returnType="void" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_tablefromflatgeobuf]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="bytea"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_generatepoints(area geometry, npoints integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_GeneratePoints]]></definition>
         <parameters>
            <parameter mode="IN" name="area" type="geometry"/>
            <parameter mode="IN" name="npoints" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_generatepoints(area geometry, npoints integer, seed integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_GeneratePoints]]></definition>
         <parameters>
            <parameter mode="IN" name="area" type="geometry"/>
            <parameter mode="IN" name="npoints" type="integer"/>
            <parameter mode="IN" name="seed" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geogfromtext(text)" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_from_text]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geogfromwkb(bytea)" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_from_binary]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geographyfromtext(text)" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_from_text]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geohash(geog geography, maxchars integer DEFAULT 0)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_GeoHash]]></definition>
         <parameters>
            <parameter mode="IN" name="geog" type="geography"/>
            <parameter mode="IN" name="maxchars" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geohash(geom geometry, maxchars integer DEFAULT 0)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_GeoHash]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="maxchars" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geomcollfromtext(text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE
	WHEN public.geometrytype(public.ST_GeomFromText($1)) = 'GEOMETRYCOLLECTION'
	THEN public.ST_GeomFromText($1)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geomcollfromtext(text, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE
	WHEN public.geometrytype(public.ST_GeomFromText($1, $2)) = 'GEOMETRYCOLLECTION'
	THEN public.ST_GeomFromText($1,$2)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geomcollfromwkb(bytea)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE
	WHEN public.geometrytype(public.ST_GeomFromWKB($1)) = 'GEOMETRYCOLLECTION'
	THEN public.ST_GeomFromWKB($1)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geomcollfromwkb(bytea, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE
	WHEN public.geometrytype(public.ST_GeomFromWKB($1, $2)) = 'GEOMETRYCOLLECTION'
	THEN public.ST_GeomFromWKB($1, $2)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geometricmedian(g geometry, tolerance double precision DEFAULT NULL::double precision, max_iter integer DEFAULT 10000, fail_if_not_converged boolean DEFAULT false)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_GeometricMedian]]></definition>
         <parameters>
            <parameter mode="IN" name="g" type="geometry"/>
            <parameter mode="IN" name="tolerance" type="double precision"/>
            <parameter mode="IN" name="max_iter" type="integer"/>
            <parameter mode="IN" name="fail_if_not_converged" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geometryfromtext(text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_from_text]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geometryfromtext(text, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_from_text]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geometryn(geometry, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_geometryn_collection]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geometrytype(geometry)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geometry_geometrytype]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geomfromewkb(bytea)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOMFromEWKB]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geomfromewkt(text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[parse_WKT_lwgeom]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geomfromgeohash(text, integer DEFAULT NULL::integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CAST(public.ST_Box2dFromGeoHash($1, $2) AS geometry);]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geomfromgeojson(json)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_GeomFromGeoJson($1::text)]]></definition>
         <parameters>
            <parameter mode="IN" type="json"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geomfromgeojson(jsonb)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_GeomFromGeoJson($1::text)]]></definition>
         <parameters>
            <parameter mode="IN" type="jsonb"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geomfromgeojson(text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geom_from_geojson]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geomfromgml(text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_GeomFromGML($1, 0)]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geomfromgml(text, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geom_from_gml]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geomfromkml(text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geom_from_kml]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geomfrommarc21(marc21xml text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_GeomFromMARC21]]></definition>
         <parameters>
            <parameter mode="IN" name="marc21xml" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geomfromtext(text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_from_text]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geomfromtext(text, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_from_text]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geomfromtwkb(bytea)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOMFromTWKB]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geomfromwkb(bytea)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_from_WKB]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geomfromwkb(bytea, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_SetSRID(public.ST_GeomFromWKB($1), $2)]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_gmltosql(text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_GeomFromGML($1, 0)]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_gmltosql(text, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geom_from_gml]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_hasarc(geometry geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_has_arc]]></definition>
         <parameters>
            <parameter mode="IN" name="geometry" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_hasm(geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_hasm]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_hasz(geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_hasz]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_hausdorffdistance(geom1 geometry, geom2 geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hausdorffdistance]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_hausdorffdistance(geom1 geometry, geom2 geometry, double precision)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hausdorffdistancedensify]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_hexagon(size double precision, cell_i integer, cell_j integer, origin geometry DEFAULT '010100000000000000000000000000000000000000'::geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_Hexagon]]></definition>
         <parameters>
            <parameter mode="IN" name="size" type="double precision"/>
            <parameter mode="IN" name="cell_i" type="integer"/>
            <parameter mode="IN" name="cell_j" type="integer"/>
            <parameter mode="IN" name="origin" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_hexagongrid(size double precision, bounds geometry, OUT geom geometry, OUT i integer, OUT j integer)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_ShapeGrid]]></definition>
         <parameters>
            <parameter mode="IN" name="size" type="double precision"/>
            <parameter mode="IN" name="bounds" type="geometry"/>
            <parameter mode="OUT" name="geom" type="geometry"/>
            <parameter mode="OUT" name="i" type="integer"/>
            <parameter mode="OUT" name="j" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_interiorringn(geometry, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_interiorringn_polygon]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_interpolatepoint(line geometry, point geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_InterpolatePoint]]></definition>
         <parameters>
            <parameter mode="IN" name="line" type="geometry"/>
            <parameter mode="IN" name="point" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_intersection(geography, geography)" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.geography(public.ST_Transform(public.ST_Intersection(public.ST_Transform(public.geometry($1), public._ST_BestSRID($1, $2)), public.ST_Transform(public.geometry($2), public._ST_BestSRID($1, $2))), public.ST_SRID($1)))]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_intersection(geom1 geometry, geom2 geometry, gridsize double precision DEFAULT '-1'::integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_Intersection]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
            <parameter mode="IN" name="gridsize" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_intersection(text, text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_Intersection($1::public.geometry, $2::public.geometry);]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_intersects(geog1 geography, geog2 geography)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_intersects]]></definition>
         <parameters>
            <parameter mode="IN" name="geog1" type="geography"/>
            <parameter mode="IN" name="geog2" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_intersects(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_Intersects]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_intersects(text, text)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_Intersects($1::public.geometry, $2::public.geometry);]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_inversetransformpipeline(geom geometry, pipeline text, to_srid integer DEFAULT 0)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.postgis_transform_pipeline_geometry($1, $2, FALSE, $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="pipeline" type="text"/>
            <parameter mode="IN" name="to_srid" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_isclosed(geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_isclosed]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_iscollection(geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_IsCollection]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_isempty(geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_isempty]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_ispolygonccw(geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_IsPolygonCCW]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_ispolygoncw(geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_IsPolygonCW]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_isring(geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[isring]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_issimple(geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[issimple]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_isvalid(geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[isvalid]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_isvalid(geometry, integer)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT (public.ST_isValidDetail($1, $2)).valid]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_isvaliddetail(geom geometry, flags integer DEFAULT 0)" returnType="valid_detail" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[isvaliddetail]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="flags" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_isvalidreason(geometry)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[isvalidreason]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_isvalidreason(geometry, integer)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN valid THEN 'Valid Geometry' ELSE reason END FROM (
		SELECT (public.ST_isValidDetail($1, $2)).*
	) foo]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_isvalidtrajectory(geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_IsValidTrajectory]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_largestemptycircle(geom geometry, tolerance double precision DEFAULT 0.0, boundary geometry DEFAULT '0101000000000000000000F87F000000000000F87F'::geometry, OUT center geometry, OUT nearest geometry, OUT radius double precision)" returnType="record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_LargestEmptyCircle]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="tolerance" type="double precision"/>
            <parameter mode="IN" name="boundary" type="geometry"/>
            <parameter mode="OUT" name="center" type="geometry"/>
            <parameter mode="OUT" name="nearest" type="geometry"/>
            <parameter mode="OUT" name="radius" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_length(geog geography, use_spheroid boolean DEFAULT true)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_length]]></definition>
         <parameters>
            <parameter mode="IN" name="geog" type="geography"/>
            <parameter mode="IN" name="use_spheroid" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_length(geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_length2d_linestring]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_length(text)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_Length($1::public.geometry);]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_length2d(geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_length2d_linestring]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_length2dspheroid(geometry, spheroid)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_length2d_ellipsoid]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="spheroid"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_lengthspheroid(geometry, spheroid)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_length_ellipsoid_linestring]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="spheroid"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_letters(letters text, font json DEFAULT NULL::json)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
  letterarray text[];
  letter text;
  geom geometry;
  prevgeom geometry = NULL;
  adjustment float8 = 0.0;
  position float8 = 0.0;
  text_height float8 = 100.0;
  width float8;
  m_width float8;
  spacing float8;
  dist float8;
  wordarr geometry[];
  wordgeom geometry;
  -- geometry has been run through replace(encode(st_astwkb(geom),'base64'), E'\n', '')
  font_default_height float8 = 1000.0;
  font_default json = '{
  "!":"BgACAQhUrgsTFOQCABQAExELiwi5AgAJiggBYQmJCgAOAg4CDAIOBAoEDAYKBgoGCggICAgICAgGCgYKBgoGCgQMBAoECgQMAgoADAIKAAoADAEKAAwBCgMKAQwDCgMKAwoFCAUKBwgHBgcIBwYJBgkECwYJBAsCDQILAg0CDQANAQ0BCwELAwsDCwUJBQkFCQcHBwcHBwcFCQUJBQkFCQMLAwkDCQMLAQkACwEJAAkACwIJAAsCCQQJAgsECQQJBAkGBwYJCAcIBQgHCAUKBQoDDAUKAQwDDgEMAQ4BDg==",
  "&":"BgABAskBygP+BowEAACZAmcAANsCAw0FDwUNBQ0FDQcLBw0HCwcLCQsJCwkLCQkJCwsJCwkLCQ0HCwcNBw8HDQUPBQ8DDwMRAw8DEQERAREBEQERABcAFQIXAhUCEwQVBBMGEwYTBhEIEQgPChEKDwoPDA0MDQwNDgsOCRAJEAkQBxAHEgUSBRQFFAMUAxQBFgEWARgAigEAFAISABICEgQQAhAEEAQQBg4GEAoOCg4MDg4ODgwSDgsMCwoJDAcMBwwFDgUMAw4DDgEOARABDgEQARIBEAASAHgAIAQeBB4GHAgaChoMGA4WDhYQFBISEhISDhQQFAwWDBYKFgoYBhgIGAQYBBgCGgAaABgBGAMYAxYHFgUWCRYJFAsUCxIPEg0SERARDhMOFQwVDBcIGQYbBhsCHQIfAR+dAgAADAAKAQoBCgEIAwgFBgUGBQYHBAUEBwQHAgcCBwIHAAcABwAHAQcBBwMHAwUDBwUFBQUHBQUBBwMJAQkBCQAJAJcBAAUCBQAFAgUEBQIDBAUEAwQDBgMEAQYDBgEGAAgBBgAKSeECAJ8BFi84HUQDQCAAmAKNAQAvExMx",
  "\"":"BgACAQUmwguEAgAAkwSDAgAAlAQBBfACAIACAACTBP8BAACUBA==",
  "''":"BgABAQUmwguEAgAAkwSDAgAAlAQ=",
  "(":"BgABAUOQBNwLDScNKw0rCysLLwsxCTEJMwc1BzcHNwM7AzsDPwE/AEEANwI1AjMEMwIzBjEGLwYvCC0ILQgrCCkKKQonCicMJbkCAAkqCSoHLAksBywFLgcuBS4FMAMwAzADMgEwATQBMgA0ADwCOgI6BDoEOAY4BjYINgg2CjQKMgoyCjIMMAwwDi7AAgA=",
  ")":"BgABAUMQ3Au6AgAOLQwvDC8KMQoxCjEKMwg1CDUGNQY3BDcEOQI5AjkAOwAzATEBMQExAy8DLwMvBS8FLQctBS0HKwktBykJKwkpswIADCYKKAooCioIKggsCC4ILgYwBjAGMgQ0AjQCNAI2ADgAQgFAAz4DPAM8BzgHOAc2CTQJMgsyCzALLg0sDSoNKg==",
  "+":"BgABAQ3IBOwGALcBuAEAANUBtwEAALcB0wEAALgBtwEAANYBuAEAALgB1AEA",
  "/":"BgABAQVCAoIDwAuyAgCFA78LrQIA",
  "4":"BgABAhDkBr4EkgEAEREApwJ/AADxARIR5QIAEhIA9AHdAwAA7ALIA9AG6gIAEREA8QYFqwIAAIIDwwH/AgABxAEA",
  "v":"BgABASDmA5AEPu4CROwBExb6AgAZFdMC0wgUFaECABIU0wLWCBcW+AIAExVE6wEEFQQXBBUEFwQVBBUEFwQVBBUEFwQVBBUEFwQXBBUEFwYA",
  ",":"BgABAWMYpAEADgIOAgwCDgQMBAoGDAYKBgoICAgICAgICAoGCgYKBAoEDAQKBAoCDAIKAgwCCgAKAAwACgEMAQoBCgMMAwoDCgUKBQgFCgUIBwYJCAcGCQYJBAsGCQQLAg0CCwINAg0AAwABAAMAAwADAQMAAwADAAMBBQAFAQcBBwEHAwcBCQMJAQsDCwMLAw0FDQMNBQ8FDwURBxMFEwkTBxcJFwkXswEAIMgBCQYJBgkGBwYJCAcIBQgHCgUKBQoFDAEMAwwBDgEOABA=",
  "-":"BgABAQUq0AMArALEBAAAqwLDBAA=",
  ".":"BgABAWFOrAEADgIOAg4CDgQMBAoGDAYKBgoICAgKCAgIBgoGCgYKBgoEDAQKBAwECgIMAAwCDAAMAAwBCgAMAQoDDAMKAwoDCgUKBQgFCgUIBwgJBgcICQYJBgsGCQQLAg0CDQINAA0ADQENAQ0BCwMNAwkFCwUJBQkHBwcJBwUHBwkFCQUJBQkDCwMJAwsDCQELAAsBCwALAAsCCQALAgkECwQJBAkECQYJBgcGBwgJBgcKBQgHCgUKBQwFCgEOAwwBDgEOAA4=",
  "0":"BgABAoMB+APaCxwAHAEaARoDFgMYBRYFFAcUBxIJEgkQCRALEAsOCwwNDA0MDQoPCg0IDwgPBhEGDwYRBA8EEQIRAhMCEQITABMA4QUAEQETAREBEQMRAxEFEQURBREHDwkPBw8JDwsNCw0LDQ0NDQsNCw8JEQkRCREJEwcTBxUFFQUVAxUDFwEXARkAGQAZAhcCFwQXBBUGEwYTCBMIEQoRCg8KDwoPDA0MDQ4NDgsOCQ4JEAkQBxAHEAUSBRIDEgMSAxIDEgESARQAEgDiBQASAhQCEgISBBIEEgYSBhIGEggQChAIEAoQDBAMDgwODg4ODA4MEgwQChIKEggUCBQIFgYWBBYGGAQYAhgCGgILZIcDHTZBEkMRHTUA4QUeOUITRBIePADiBQ==",
  "2":"BgABAWpUwALUA44GAAoBCAEKAQgDBgMGBQYFBgUEBwQFBAUCBwIHAgUABwAHAAUBBwMFAQcFBQMHBQUHBQcFBwMJAwkBCQELAQsAC68CAAAUAhIAFAISBBQCEgQUBBIEEgYUCBIGEAgSChAKEAoQDBAMDg4ODgwQDBIMEgoSChQIFggWCBgGGAQaAhwCHAIWABQBFgEUARQDFAMSAxQFEgUSBxIHEAkQCRALDgsODQ4NDA8KDwwRCBMKEwgTBhUGFwQXBBcEGwAbABsAHQEftwPJBdIDAACpAhIPzwYAFBIArgI=",
  "1":"BgABARCsBLALAJ0LEhERADcA2QEANwATABQSAOYIpwEAALgCERKEBAASABER",
  "3":"BgABAZ0B/gbEC/sB0QQOAwwBDAMMAwwFCgMKBQoFCgUIBwoFCAcICQgJBgkICQYLCAsECwYLBA0GDwINBA8CDwQRAhECEQITABUCFQAVAH0AEQETAREBEQETAxEDEQURBREFDwcRBw8JDwkNCQ8LDQsNDQsNCw0LDwsPCREJEQcRBxMFFQUVBRUDFwEXARkAGQAZAhkCFwQVBBUEEwYTCBEIEQgRCg0MDwoNDA0OCw4LDgkQCRAHEAkQBRAFEgUSAxIDFAMSAxYBFAEWARYAFqQCAAALAgkCCQQHAgcGBwYHBgUIBQYDCAMIAwYDCAEIAQgACAAIAAgCCAIIAgYCCAQIBAgGBgYEBgQIBAoCCgAKAAwAvAEABgEIAAYBBgMGAwQDBgMEBQQDBAUCBQQFAgUABwIFAJkBAACmAaIB3ALbAgAREQDmAhIRggYA",
  "5":"BgABAaAB0APgBxIAFAESABIBEgMSARADEgMQAxIFEAcOBRAHDgkOCQ4JDgsMCwwLCgsKDQoPCA0IDwgPBhEEEwYTAhMEFwIXABcAiQIAEwETABEBEQMTAxEDDwMRBQ8FDwUPBw8JDQcNCQ0LDQsLCwsNCw0JDwkPCREHEQcTBxMFEwMVAxcDGQEZARkAFwAVAhUCFQQTBBMGEwYRCBEIDwoPCg8KDQwNDA0MCw4LDgkOCRAJEAcOBxAHEgUQBRIDEAMSAxIBEgEUARIAFLgCAAAFAgUABQIFBAUCBQQDBAUEAwYDBgMIAwgBCAEIAQoACAAIAgYACAQGAgQEBgQEBAQGBAQCBgIGAgYCBgIIAAYA4AEABgEIAAYBBgMGAQQDBgMEAwQFBAMCBQQFAgUABwIFAPkBAG+OAQCCBRESAgAAAuYFABMRAK8CjQMAAJ8BNgA=",
  "7":"BgABAQrQBsILhQOvCxQR7wIAEhK+AvYIiwMAAKgCERKwBgA=",
  "6":"BgABAsYBnAOqBxgGFgYYBBYEFgIWABQBFgEUAxQDFAUUBRIFEAcSCRAJEAkOCw4NDgsMDQoPCg8KDwgRCBEGEQYRBBMCEwITAhUAkwIBAAERAREBEQEPAxEFEQMPBREFDwcPBw8HDwkNCQ0LDQsNCwsNCw0LDQkPCQ8JDwcRBxEHEwUTAxMFFQEXAxcBGQAVABUCEwIVBBMEEQYTBhEIEQgPChEKDQoPDA0MDQwNDgsOCxALDgkQCRAHEgcQBxIFEgUSBRIBFAMSARIBFAASAOIFABACEgIQAhIEEAQQBhIGEAYQCBAKEAgOChAMDgwMDA4ODA4MDgwODBAKEAoQChIIEggSBhQGFgYUAhYCGAIYABoAGAEYARYBFgMUBRQFEgUSBxAHEAcQCQ4LDgkMCwwNDA0KDQgPCg0GEQgPBhEEEQQRBBMEEwITAhMCFQIVABWrAgAACgEIAQoBCAEGAwYDBgUGBQQFBAUEBQQFAgUABwIFAAUABwEFAAUBBQMFAwUDBQMFBQMFAwUBBQEHAQkBBwAJAJcBDUbpBDASFi4A4AETLC8SBQAvERUrAN8BFC0yEQQA",
  "8":"BgABA9gB6gPYCxYAFAEUARYBEgMUBRQFEgUSBxIHEAcSCQ4JEAkOCw4LDgsMDQwNCg0KDQoPCg8IDwgPBhEGEQQPBBMCEQIRABMAQwAxAA8BEQEPAREDDwMRAw8FEQUPBxEJDwkPCQ8NDw0PDQ8IBwYHCAcGBwgHBgkGBwYJBgcECQYJBAkGCQQJBAsECwQLBA0CCwINAg8CDwIPAA8AaQATAREBEwERAxEFEQURBREHEQcPBw8JDwkPCw8LDQsNDQ0LCw0LDwsNCQ8JDwcPBw8HEQURAxEFEQMRARMBEwFDABEAEwIRAhEEEQQRBg8GEQgPCA8KDwoPCg0MDQwNDAsOCw4LDgkQCRAJDgkQBxIHEAcSBRADEgMUAxIBFAEUABQAagAOAhAADgIOAg4EDAIOBAwEDAQMBgwECgYMBAoGCAYKBgoGCggKBgoICgYICAoICA0MCwwLDgsOCRAHEAcQBxIFEgUSAxIDEgMSARABEgASADIARAASAhICEgQSAhIGEAYSBhAIEAgQCBAKDgoODA4MDgwMDgwODA4KEAwQCBIKEggSCBQIFAYUBBQEFgQWAhYCGAANT78EFis0EwYANBIYLgC0ARcsMRQFADERGS0AswELogHtAhcuNxA3DRkvALMBGjE6ETYSGDIAtAE=",
  "9":"BgABAsYBpASeBBcFFQUXAxUDFQEVABMCFQITBBMEEwYRBhMGDwgRCg8KDwoNDA0OCwwNDgkQCRAJEAcSBxIFEgUSAxQBFAEUARYAlAICAAISAhICEgQSAhAGEgQQBhIGEAgSCA4IEAoOChAMDAwODAwODA4MEAoOChAKEAgSCBIIFAYUBBQGFgIYBBgCGgAWABYBFAEWAxQDEgUUBRIHEgcQCRIJEAkOCw4LDgsODQwNDA0MDwoPCg8IDwgRCBEGEQYRBhEEEQITAhECEwARAOEFAA8BEQEPAREDDwMPBREFDwUPBw8JDwcNCQ8LDQsLCw0NCw0LDQsNCw8JEQkPCREHEQcTBRMFEwUTARUBFQEXABkAFwIXAhcCFQQTBhMGEQYRCA8IDwgNCg8MCwoLDAsOCQ4JDgkQBxAHEAUQBRIFEgMSAxQDFAEUAxQAFgEWABamAgAACwIJAgkCCQIHBAcEBwYFBgUGAwYDBgMGAQgBBgEIAAgABgIIAgYCBgQGBAYEBgYGBgQIBAgECAIKAgoCCgAMAJgBDUXqBC8RFS0A3wEUKzARBgAwEhYsAOABEy4xEgMA",
  ":":"BgACAWE0rAEADgIOAg4CDgQMBAoGDAYKBgoICAgKCAgIBgoGCgYKBgoEDAQKBAwECgIMAAwCDAAMAAwBCgAMAQoDDAMKAwoDCgUKBQgFCgUIBwgJBgcICQYJBgsGCQQLAg0CDQINAA0ADQENAQ0BCwMNAwkFCwUJBQkHBwcJBwUHBwkFCQUJBQkDCwMJAwsDCQELAAsBCwALAAsCCQALAgkECwQJBAkECQYJBgcGBwgJBgcKBQgHCgUKBQwFCgEOAwwBDgEOAA4BYQDqBAAOAg4CDgIOBAwECgYMBgoGCggICAoICAgGCgYKBgoGCgQMBAoEDAQKAgwADAIMAAwADAEKAAwBCgMMAwoDCgMKBQoFCAUKBQgHCAkGBwgJBgkGCwYJBAsCDQINAg0ADQANAQ0BDQELAw0DCQULBQkFCQcHBwkHBQcHCQUJBQkFCQMLAwkDCwEJAwsACwELAAsACwIJAAsECQILBAkECQQJBgkGBwYHCAkGBwoFCAcKBQoFDAUKAQ4DDAEOAQ4ADg==",
  "x":"BgABARHmAoAJMIMBNLUBNrYBMIQB1AIA9QG/BI4CvwTVAgA5hgFBwAFFxwE1fdUCAI4CwATzAcAE1AIA",
  ";":"BgACAWEslgYADgIOAg4CDgQMBAoGDAYKBgoICAgKCAgIBgoGCgYKBgoEDAQKBAwECgIMAAwCDAAMAAwBCgAMAQoDDAMKAwoDCgUKBQgFCgUIBwgJBgcICQYJBgsGCQQLAg0CDQINAA0ADQENAQ0BCwMNAwkFCwUJBQkHBwcJBwUHBwkFCQUJBQkDCwMJAwsBCQMLAAsBCwALAAsCCQALBAkCCwQJBAkECQYJBgcGBwgJBgcKBQgHCgUKBQwFCgEOAwwBDgEOAA4BYwjxBAAOAg4CDAIOBAwECgYMBgoGCggICAgICAgICgYKBgoECgQMBAoECgIMAgoCDAIKAAoADAAKAQwBCgEKAwwDCgMKBQoFCAUKBQgHBgkIBwYJBgkECwYJBAsCDQILAg0CDQADAAEAAwADAAMBAwADAAMAAwEFAAUBBwEHAQcDBwEJAwkBCwMLAwsDDQUNAw0FDwUPBREHEwUTCRMHFwkXCRezAQAgyAEJBgkGCQYHBgkIBwgFCAcKBQoFCgUMAQwDDAEOAQ4AEA==",
  "=":"BgACAQUawAUA5gHEBAAA5QHDBAABBQC5AgDsAcQEAADrAcMEAA==",
  "B":"BgABA2e2BMQLFgAUARQBFAEUAxIDEgUSBRIFEAcQBxAJDgkOCQ4LDgsMCwwNDA0KDQgNCg0IDwYPBg8GDwQRBBEEEQIRAhMAEwAHAAkABwEHAAkBCQAHAQkBCQEHAQkBCQMJAwcDCQMJAwkFBwUJAwkHCQUHBQkHCQcJBwcHBwkHBwcJBwsHCQUQBQ4FDgcOCQ4JDAkMCwoNCg0IDwgRBhMEFQQXAhcCGwDJAQEvAysFJwklDSMPHREbFRkXFRsTHw8fCyUJJwcrAy0B6wMAEhIAoAsREuYDAAiRAYEElgEAKioSSA1EOR6JAQAA0wEJkAGPBSwSEiwAzAETKikSjwEAAMUCkAEA",
  "A":"BgABAg/KBfIBqQIAN98BEhHzAgAWEuwCngsREvwCABMR8gKdCxIR8QIAFBI54AEFlwGCBk3TA6ABAE3UAwMA",
  "?":"BgACAe4BsgaYCAAZABkBFwEXBRUDEwUTBxEHEQcPCQ8JDQkNCQ0LCwsLCwsLCQsJCwcNBwsHDQcLBQsFDQULAwkFCwMLAwkDCQMBAAABAQABAAEBAQABAAEAAQABAAABAQAAAQEAEwcBAQABAAMBAwADAAUABQAFAAcABwAFAAcABwAFAgcABQAHAAUAW7cCAABcABgBFgAUAhQAFAISAhACEAIQBA4EDgQMBgwGDAYMBgoICgYKCAgKCggICAgKBgoICgYMCAwGDAgOBg4GEAYQBgIAAgIEAAICBAACAgQCBAIKBAoGCAQKBggIBgYICAYIBggGCgQIBAoECAQKAggCCgIKAAgACgAKAAgBCAEKAwgDCAMIAwgFBgMIBQYHBAUGBQQFBAcCBQQHAgcCCQIHAgkCBwAJAgkACQAJAAkBCQAJAQsACQELAQsDCwELAwsDCwMLAwsDCwULAwsFCwMLBV2YAgYECAQKBAwGDAQMBhAIEAYSBhIIEgYUBhIEFgYUBBYEFgQWAhgCFgIYABYAGAAYARgBGAMWBRYHFgcWCRYLFA0IBQYDCAUIBwYFCAcGBwgHBgcICQYJCAkGCQYJCAsGCwYLBgsGDQYNBA0GDQQNBA8EDwQPAg8EEQIRAhEAEQITAWGpBesGAA4CDgIOAg4EDAQKBgwGCgYKCAgICggICAYKBgoGCgYKBAwECgQMBAoCDAAMAgwADAAMAQoADAEKAwwDCgMKAwoFCgUIBQoFCAcICQYHCAkGCQYLBgkECwINAg0CDQANAA0BDQENAQsDDQMJBQsFCQUJBwcHCQcFBwcJBQkFCQUJAwsDCQMLAwkBCwALAQsACwALAgkACwIJBAsECQQJBAkGCQYHBgcICQYHCgUIBwoFCgUMBQoBDgMMAQ4BDgAO",
  "C":"BgABAWmmA4ADAAUCBQAFAgUEBQIDBAUEAwQDBgMEAQYDBgEGAAgBBgDWAgAAwQLVAgATABMCEQITBBEEEQQRBhEIEQgPCA8KDwoNCg0MDQwNDAsOCw4LDgkOCxAHEAkQBxIHEgUSBRIDEgEUARIBFAAUAMIFABQCFAISBBQEEgQSBhIIEggSCBAKEAoQCg4MDgwODA4ODA4MDgwQDA4KEggQChIIEggSBhIGFAQSAhQCEgIUAMYCAADBAsUCAAUABwEFAAUBBQMDAQUDAwMDAwMFAQMDBQEFAAUBBwAFAMEF",
  "L":"BgABAQmcBhISEdkFABIQALQLwgIAAIEJ9AIAAK8C",
  "D":"BgABAkeyBMQLFAAUARIBFAESAxIDEgMSBRIFEAcQBxAHDgkOCQ4LDgsMCwwNDA0KDwoPCg8IDwgRCBEGEwQTBBMEEwIVAhUAFwDBBQAXARcBFwMTAxUDEwUTBxEHEQcPCQ8JDwkNCw0LCwsLDQsNCQ0JDQcPBw8HDwcRBREFEQMRAxEDEwERARMBEwDfAwASEgCgCxES4AMACT6BAxEuKxKLAQAAvwaMAQAsEhIsAMIF",
  "F":"BgABARGABoIJ2QIAAIECsgIAEhIA4QIRErECAACvBBIR5QIAEhIAsgucBQASEgDlAhES",
  "E":"BgABARRkxAuWBQAQEgDlAhES0QIAAP0BtgIAEhIA5wIRFLUCAAD/AfACABISAOUCERLDBQASEgCyCw==",
  "G":"BgABAZsBjgeIAgMNBQ8FDQUNBQ0HCwcNBwsHCwkLCQsJCwsJCwsLCQsJDQkLBw0HDwcNBw8FDwUPAw8DEQMPAxEBEQERARMBEQAXABUCFwIVAhMEFQQTBhMGEwYRCBEIDwoRCg8KDwwNDA0MDQ4LDgkQCRAJEAcQBxIFEgUUBRQDFAMUARYBFgEYAMoFABQCFAASBBQCEgQSBBIEEgYSBhAGEAgQCBAKDgoOCg4MDgwMDgwOChAKEAoSCBIIFAgUBhQEGAYWAhgEGAIaAOoCAAC3AukCAAcABwEFAQUBBQMFAwMFAwUDBQEFAQcBBQEFAQUABwAFAMUFAAUCBwIFAgUCBQQFBAMGBQYDBgUGAwgDBgMIAQgDCAEIAQoBCAEIAAgACgAIAAgCCAIIAggECgQGBAgECAYIBgC6AnEAAJwCmAMAAJcF",
  "H":"BgABARbSB7ILAQAAnwsSEeUCABISAOAE5QEAAN8EEhHlAgASEgCiCxEQ5gIAEREA/QPmAQAAgAQPEOYCABER",
  "I":"BgABAQmuA7ILAJ8LFBHtAgAUEgCgCxMS7gIAExE=",
  "J":"BgABAWuqB7ILALEIABEBEwERAREDEwMRAxEFEQURBw8HEQcPCQ0LDwsNCw0NDQ0LDwsPCxEJEQkTCRMJFQcVBxcFFwMZAxsBGwEbAB8AHQIbAhsEGQYXBhcGFQgTCBMKEwoRDA8KDwwNDA0OCw4LDgkQCRAJEAcQBRIFEgUSAxQDEgESARIBFAESABIAgAEREtoCABERAn8ACQIHBAcEBwYHBgUIBQoDCgMKAwoDDAEKAQwBCgEMAAwACgAMAgoCDAIKBAoECgYKBggGBgYGCAQGBAgCCgAIALIIERLmAgAREQ==",
  "M":"BgACAQRm1gsUABMAAAABE5wIAQDBCxIR5QIAEhIA6gIK5gLVAe0B1wHuAQztAgDhAhIR5QIAEhIAxAsUAPoDtwT4A7YEFgA=",
  "K":"BgABAVXMCRoLBQsDCQMLAwsDCwMLAwsBCwELAQsBCwELAQ0ACwELAAsADQALAg0ACwILAA0CCwILAgsCDQQLBAsECwYNBAsGCwYLCAsGCwgJCgsICQoJCgkMCQwJDAkOCRALEAkQCRKZAdICUQAAiwQSEecCABQSAKALExLoAgAREQC3BEIA+AG4BAEAERKCAwAREdkCzQXGAYUDCA0KDQgJCgkMBwoFDAUMAQwBDgAMAg4CDAQOBAwGDghmlQI=",
  "O":"BgABAoMBsATaCxwAHAEaARoDGgMYBRYFFgcWBxQJEgkSCRILEAsODQ4NDg0MDwoNDA8KDwgPCBEIDwYRBg8GEQQRAhMCEQITABMA0QUAEQETAREBEQMTBREFEQURBxEHDwcRCQ8LDQsPCw0NDQ0NDwsPCw8LEQkTCRMJEwkVBxUHFwUXAxkDGQEbARsAGwAZAhkCGQQXBhcGFQYVCBUIEwoRChEMEQoRDA8MDQ4NDg0OCxAJEAsQCRAHEgcSBxIFFAMSAxIDEgEUARIAEgDSBQASAhQCEgISBBIEEgYSBhIIEggQCBAKEgwODBAMEA4ODg4QDhIMEAwSChQKFAgUCBYIFgYYBBoGGgQcAh4CHgILggGLAylCWxZbFSlBANEFKklcGVwYKkwA0gU=",
  "N":"BgABAQ+YA/oEAOUEEhHVAgASEgC+CxQAwATnBQDIBRMS2AIAExEAzQsRAL8ElgU=",
  "P":"BgABAkqoB5AGABcBFQEVAxMDEwMTBREHEQcRBw8JDwkNCQ0LDQsNCwsNCw0JDQkNCQ8HDwcPBxEFEQURAxEDEQMTAREBEwETAH8AAIMDEhHlAgASEgCgCxES1AMAFAAUARIAFAESAxIDEgMSAxIFEAUQBRAHDgkOCQ4JDgsMCwwNDA0KDQoNCg8IDwgRCBEGEwQTBBUEFQIXAhkAGQCzAgnBAsoCESwrEn8AANUDgAEALBISLgDYAg==",
  "R":"BgABAj9msgsREvYDABQAFAESARQBEgESAxIDEgUSBRAFEAcQBw4JDgkOCQ4LDAsMDQwLCg0KDwoNCA8IDwgPBhEEEwYTAhMEFQIXABcAowIAEwEVARMDEwMTBRMFEQcTBxELEQsRDQ8PDREPEQ0VC8QB/QMSEfkCABQSiQGyA3EAALEDFBHnAgASEgCgCwnCAscFogEALhISLACqAhEsLRKhAQAApQM=",
  "Q":"BgABA4YBvAniAbkB8wGZAYABBQUFAwUFBQUHBQUDBwUFBQcFBQMHBQcDBwUJAwcDCQMJAwkDCQMJAQsDCwMLAQsDCwENAw0BDQEPAA8BDwAPABsAGwIZAhcEGQQXBBUGFQgVCBMIEQoTChEKDwwPDA8ODQ4NDgsQCxAJEAkQBxIHEgUSBRQFFAMUARQDFAEWABYAxgUAEgIUAhICEgQSBBIGEgYSCBIIEAgQChIMDgwQDBAODg4OEA4SDBAMEgoUChQIFAgWCBYGGAQaBhoEHAIeAh4CHAAcARoBGgMaAxgFFgUWBxYHFAkSCRIJEgsQCw4NDg0ODQwPCg0MDwoPCA8IEQgPBhEGDwYRBBECEwIRAhMAEwC7BdgBrwEImQSyAwC6AylAWxZbFSk/AP0BjAK7AQeLAoMCGEc4J0wHVBbvAaYBAEM=",
  "S":"BgABAYMC8gOEBxIFEgUQBxIFEgcSBxIJEgcSCRIJEAkQCRALEAsOCw4NDg0MDQ4PDA0KEQoPChEKEQgRCBMGFQQTBBcCFQAXABkBEwARAREBEQMPAQ8DDwMPAw0DDQUNAw0FCwULBwsFCwUJBwsFCQcHBQkHCQUHBwcHBwUHBwUFBQcHBwUHAwcFEQsRCxMJEwkTBxMFEwUVBRUDFQMVARMBFwEVABUAFQIVAhUCFQQVBBUEEwYVBhMIEwgTCBMIEwgRCBMKEQgRCmK6AgwFDgUMAw4FEAUOBRAFEAUQBRAFEAMSAw4DEAMQAxABEAEOAQ4AEAIMAg4CDgQMBAwGCggKCAoKBgwGDgYQBBACCgAMAAoBCAMKBQgFCAcIBwgJCAsGCQgLCA0IDQgNCA8IDQgPCA8IDwgPChEIDwgPCBEKDwoPDBEMDwwPDg8ODw4NEA0QCxALEgsSCRIHEgcUBRQFGAUYAxgBGgEcAR4CJAYkBiAIIAweDBwQHBAYEhgUFBYUFhQWEBoQGg4aDBwKHAoeBh4GIAQgAiACIgEiASIFIgUiBSAJIgkgCyINZ58CBwQJAgkECwQLAgsECwINBA0CDQQNAg0CDQALAg0ADQANAAsBCwELAQsDCwULBQkFCQcHBwcJBwkFCwMLAw0BDQENAAsCCwQLBAkGCQgJCAkKBwoJCgcMBQoHDAcMBQwF",
  "V":"BgABARG2BM4DXrYEbKwDERL0AgAVEesCnQsSEfsCABQS8QKeCxES8gIAExFuqwNgtQQEAA==",
  "T":"BgABAQskxAv0BgAAtQKVAgAA+wgSEeUCABISAPwImwIAALYC",
  "U":"BgABAW76B7ALAKMIABcBFwMXARUFFQUTBxMHEwkRCREJEQsPDQ0LDw0NDwsPCw8LEQkPCRMJEQcTBxMFEwUVBRUDEwMXARUBFQEXABUAEwIVAhMCFQQTBBUEEwYTBhMIEwgRChEIEQwRDA8MDw4PDg0OCxANEAsSCRIJEgcUBxQHFAMWBRYBGAEYARgApggBAREU9AIAExMAAgClCAALAgkECQQHBAcIBwgHCAUKBQoDCgMKAwwBCgEMAQwADAAMAgoCDAIKAgoECgQKBggGCAYICAYKBAgCCgIMAgwApggAARMU9AIAExM=",
  "X":"BgABARmsCBISEYkDABQSS54BWYICXYkCRZUBEhGJAwAUEtYCzgXVAtIFExKIAwATEVClAVj3AVb0AVKqAREShgMAERHXAtEF2ALNBQ==",
  "W":"BgABARuODcQLERHpAp8LFBHlAgASEnW8A2+7AxIR6wIAFBKNA6ALERKSAwATEdQB7wZigARZ8AIREugCAA8RaKsDYsMDXsoDaqYDExLqAgA=",
  "Y":"BgABARK4BcQLhgMAERHnAvMGAKsEEhHnAgAUEgCsBOkC9AYREoYDABERWOEBUJsCUqICVtwBERI=",
  "Z":"BgABAQmAB8QLnwOBCaADAADBAusGAMgDggmhAwAAwgLGBgA=",
  "`":"BgABAQfqAd4JkQHmAQAOlgJCiAGpAgALiwIA",
  "c":"BgABAW3UA84GBQAFAQUABQEFAwMBBQMDAwMDAwUBAwMFAQUABQEHAAUAnQMABQIFAAUCBQQFAgMEBQQDBAMGAwQBBgMGAQYABgEGAPABABoMAMsCGw7tAQATABMCEwARAhMEEQIPBBEEDwQPBg8IDwYNCA0KDQoNCgsMCwwLDAkOCRAHDgcQBxIFEgUUBRQDFAEWAxgBGAAYAKQDABQCFAISBBQCEgYSBhAGEggQCBAIEAoQCg4MDAwODAwODAwKDgwQCg4IEAgQCBAIEAYSBhIGEgQSAhQCFAIUAOABABwOAM0CGQzbAQA=",
  "a":"BgABApoB8AYCxwF+BwkHCQcJCQkHBwkHBwcJBQkFBwUJBQkFCQMHBQkDCQMJAwcDCQEHAQkBBwEJAQcABwAHAQcABQAHAAUBBQAFABMAEwITAhEEEwQPBBEGDwgPCA0IDwoLCg0KCwwLDAsMCQ4JDgkOBw4HEAcQBRAFEAUSAxADEgESAxIBFAESABQAFAISAhQCEgQSBBIEEgYSBhIIEAgQChAIDgwODA4MDg4MDgwODBAMEAoSCBIKEggUCBQGFgYWBBgEGAIaAhoAcgAADgEMAQoBCgEIAwgDBgUEBQQFBAcCBwIHAgkCCQAJAKsCABcPAMwCHAvCAgAUABYBEgAUARIDFAMQAxIDEAUSBQ4FEAcOCRAJDAkOCwwLDA0MCwoNCg8IDwgPCA8GEQYRBhMEEwIXAhUCFwAZAIMGFwAKmQLqA38ATxchQwgnGiMwD1AMUDYAdg==",
  "b":"BgABAkqmBIIJGAAYARYBFgEUAxQDEgUSBRIFEAcQCQ4HDgkOCw4LDAsMDQoNCg0KDQgPBg8GDwYRBBEEEQQTBBECEwIVAhMAFQD/AgAZARcBFwEXAxUDEwUTBREFEQcPBw8JDwkNCQ0LDQsLCwsNCQ0JDQcPBw8HDwURAxEDEQMTAxMBEwMVARUAFQHPAwAUEgCWCxEY5gIAERkAowKCAQAJOvECESwrEn8AAJsEgAEALBISLgCeAw==",
  "d":"BgABAkryBgDLAXAREQ8NEQ0PDREJDwkRBw8FDwURAw8DDwERAw8BEQEPACMCHwQfCB0MGw4bEhcUFxgVGhEeDSANJAkmBSgDKgEuAIADABYCFAIUAhQCFAQUBBIGEgYSBhAIEAgQCBAKDgoODAwMDAwMDgoOCg4KEAgQCBIGEgYSBhQEFgQWBBYCGAIYAHwAAKQCERrmAgARFwCnCxcADOsCugJGMgDmA3sAKxERLQCfAwolHBUmBSQKBAA=",
  "e":"BgABAqMBigP+AgAJAgkCCQQHBAcGBwYFCAUIBQgDCgMIAQoDCAEKAQoACgAKAAoCCAIKAggECgQIBAgGCAYGBgQIBAoECAIKAAyiAgAAGQEXARcBFwMVBRMFEwURBxEHDwcPCQ8LDQkNCwsNCw0LDQkNBw8JDwcPBQ8FEQURAxEDEwMTAxMBFQAVARcALwIrBCkIJwwlDiESHxQbGBkaFR4TIA0iCyQJKAMqASwAggMAFAIUABIEFAISBBIEEgQSBhIGEAgQCBAIEAoODA4MDgwODgwQDBAKEAoSChIIFAgUCBYGGAQYBhoCGgQcAh4ALgEqAygFJgkkDSANHhEaFRgXFBsSHQ4fDCUIJwQpAi0AGQEXAxcDFQcTBRMJEQkPCw8LDQ0PDQsNDQ8LEQsRCxEJEwkTCRMJEwcTBxUHFQUVBRUHFQUVBRUHFwcVBRUHCs4BkAMfOEUURxEfMwBvbBhAGBwaBiA=",
  "h":"BgABAUHYBJAGAAYBBgAGAQYDBgEEAwYDBAMEBQQDAgUEBQIFAAUCBQB1AAC5BhIT5wIAFhQAlAsRGOYCABEZAKMCeAAYABgBFgEWARQDFAMSBRIFEgUQBxAJDgcOCQ4LDgsMCwwNCg0KDQoNCA8GDwYPBhEEEQQRBBMEEQITAhUCEwAVAO0FFhPnAgAUEgD+BQ==",
  "g":"BgABArkBkAeACQCNCw8ZERkRFxEVExMVERUPFQ8XDRcLGQkZBxsFGwUdAR0BDQALAA0ADQINAAsCDQANAg0CDQILAg0EDQINBA0GDQQNBg0EDQYNCA0GDwgNCA0IDQgPCg0KDwwNDA8MDw4PDqIB7gEQDRALEAkQCQ4JEAcOBw4FDgUOAwwFDgMMAQwBDAEMAQwACgEKAAoACAIIAAgCCAIGAggCBgIGBAYCBgQEAgYEAqIBAQADAAEBAwADAAMABQADAAUAAwAFAAMABQAFAAMABQA3ABMAEwIRAhMCEQQRBBEEEQYRBg8IDwgPCA0KDQoNCg0MCwwLDgsOCQ4JDgkQBxAHEgcSBRIDFAMWAxQBFgEYABgA/gIAFgIWAhQEFgQUBBIGFAgSCBIIEAoSChAKDgwODA4MDg4MDgwODA4KEAgQCBAIEgYSBhIEEgYSBBQCEgIUAhQCOgAQABABDgEQAQ4BEAMOAw4FDgUOBQwFDgcMBQ4HDAkMB4oBUBgACbsCzQYAnAR/AC0RES0AnQMSKy4RgAEA",
  "f":"BgABAUH8A6QJBwAHAAUABwEFAQcBBQEFAwUDBQMDAwMDAwUDAwMFAQUAwQHCAQAWEgDZAhUUwQEAAOMEFhftAgAWFADKCQoSChIKEAoQCg4KDgwOCgwMDAoKDAwMCgwIDAgMCAwIDAYOCAwEDgYMBA4GDAIOBA4CDgQOAg4CDgAOAg4ADgC2AQAcDgDRAhkQowEA",
  "i":"BgACAQlQABISALoIERLqAgAREQC5CBIR6QIAAWELyAoADgIOAgwEDgIKBgwGCgYKCAoGCAgICggIBggGCgYKBAoECgQMBAoCDAIMAgwCDAAMAAwADAEMAQoBDAMKAwoDCgUKBQgFCgUIBwgHCAcICQgJBgkECwQJBA0CCwANAA0ADQELAQ0BCwMJBQsFCQUJBwkFBwcHBwcJBQcFCQUJBQkDCQMLAwkBCwELAQsACwALAAsCCwILAgkCCwIJBAkECQQJBgcGCQYHCAcIBwgHCgUKBQwFCgMMAQwBDgEMAA4=",
  "j":"BgACAWFKyAoADgIOAgwEDgIKBgwGCgYKCAoGCAgICggIBggGCgYKBAoECgQMBAoCDAIMAgwCDAAMAAwADAEMAQoBDAMKAwoDCgUKBQgFCgUIBwgHCAcICQgJBgkECwQJBA0CCwANAA0ADQELAQ0BCwMJBQsFCQUJBwkFBwcHBwcJBQcFCQUJBQkDCQMLAwkBCwELAQsACwALAAsCCwILAgkCCwIJBAkECQQJBgcGCQYHCAcIBwgHCgUKBQwFCgMMAQwBDgEMAA4BO+YCnwwJEQkRCQ8JDwsNCQ0LDQkLCwsJCQsLCQkLBwsHCwcLBwsFCwcNAwsFDQMLBQ0BDQMNAQ0DDQENAQ0ADQENAA0AVwAbDQDSAhoPQgAIAAgABgAIAgYCCAIGAgYEBgQGBAQEBAQEBgQEBAYCBgC4CRES6gIAEREAowo=",
  "k":"BgABARKoA/QFIAC0AYoD5gIAjwK5BJICwwTfAgDDAbIDFwAAnwMSEeUCABISAJILERLmAgAREQCvBQ==",
  "n":"BgABAW1yggmQAU8GBAgEBgQGBgYCCAQGBAYEBgQIAgYECAQGAggEBgIIBAgCCAQIAggCCAIIAgoACAIKAAgCCgAKAgoADAAKAgwAFgAWARQAFAEUAxQDFAMSAxIFEgUQBRIHEAkOBxAJDgsOCwwLDA0MDQoPCA8IEQgRBhEGEwYVBBUEFQIXAhkCGQDtBRQR5QIAFBAA/AUACAEIAQYBCAMGBQQFBgUEBwQFBAcCBwIHAgcCCQIHAAcACQAHAQcABwMHAQUDBwMFAwUFBQUDBQEFAwcBBwAHAPkFEhHjAgASEgDwCBAA",
  "m":"BgABAZoBfoIJigFbDAwMCg4KDggOCA4IDgYQBhAGEAQQBBAEEAISAhACEgAmASQDJAciCyANHhEcFRwXDg4QDBAKEAwQCBAKEggSBhIGEgYSBBQEEgIUAhICFAAUABQBEgEUARIDEgMSAxIFEgUQBxAHEAcQBw4JDgkOCw4LDAsMDQoNCg8KDwgPCBEIEQYRBBMEEwQTAhMCFQAVAP0FEhHlAgASEgCCBgAIAQgBBgEGAwYFBgUEBQQHBAUEBwIHAgcCBwIJAAcABwAJAAcBBwEHAQUBBwMFAwUDBQMDBQMFAwUBBQEHAQcAgQYSEeUCABISAIIGAAgBCAEGAQYDBgUGBQQFBAcEBQQHAgcCBwIHAgkABwAHAAkABwEHAQcBBQEHAwUDBQMFAwMFAwUDBQEFAQcBBwCBBhIR5QIAEhIA8AgYAA==",
  "l":"BgABAQnAAwDrAgASFgDWCxEa6gIAERkA0wsUFw==",
  "y":"BgABAZ8BogeNAg8ZERkRFxEVExMVERUPFQ8XDRcLGQkZBxsFGwUdAR0BDQALAA0ADQINAAsCDQANAg0CDQILAg0EDQINBA0GDQQNBg0EDQYNCA0GDwgNCA0IDQgPCg0KDwwNDA8MDw4PDqIB7gEQDRALEAkQCQ4JEAcOBw4FDgUOAwwFDgMMAQwBDAEMAQwACgEKAAoACAIIAAgCCAIGAggCBgIGBAYCBgQEAgYEAqIBAQADAAEBAwADAAMABQADAAUAAwAFAAMABQAFAAMABQA3ABMAEwIRABECEwQRAg8EEQQPBBEGDwgNCA8IDQgNCg0MDQwLDAkOCw4JDgcQBxAHEgUSBRQFFAMWARgDGAEaABwA9AUTEuQCABEPAP8FAAUCBQAFAgUEBQIDBAUEAwQDBgMEAQYDBgEGAAgBBgCAAQAAvAYREuICABMPAP0K",
  "q":"BgABAmj0A4YJFgAWARQAEgESAxADEAMOAw4FDgUMBQ4HDgcOBwwJDgmeAU4A2QwWGesCABYaAN4DAwADAAMBAwADAAUAAwADAAMABQAFAAUABwAHAQcACQAVABUCFQATAhUCEwQRAhMEEQQRBhEGDwgPCA8IDQoNDA0MCwwLDgkOCRAJEAkQBxIHEgUUBRYDFgMYARoBGgAcAP4CABYCFgIWBBYEFAQSBhQIEggSCBAKEgoQDA4MDgwODg4ODBAMDgwQChIIEAoSCBIGEgYUBhQEFAQWAhYCFgIWAApbkQYSKy4ReAAAjARTEjkRHykJMwDvAg==",
  "p":"BgABAmiCBIYJFgAWARYBFAEWAxQDEgUUBRIFEgcSBxAJEAkQCQ4LDgsOCwwNDA0KDwoPCg8IEQgRCBEGEwQTBhMCFQQVAhUAFQD9AgAbARkBFwMXAxcDEwUTBxMHEQcRCQ8JDQsNCw0LCw0LDQkPCQ0JDwURBxEFEQURAxMDEQMTARUBEwEVARUBFQAJAAcABwAFAAcABQAFAAMAAwADAAUAAwIDAAMAAwIDAADdAxYZ6wIAFhoA2gyeAU0OCgwIDgoMCA4GDgYMBg4GDgQQBBAEEgQUAhQCFgIWAApcoQMJNB8qNxJVEQCLBHgALhISLADwAg==",
  "o":"BgABAoMB8gOICRYAFgEWARQBFgMUAxIDFAUSBRIHEgcQBxAJEAkOCw4LDgsMDQwNCg8KDwoPCg8IEQgRBhMGEwQTBBMCFQIVABcAiwMAFwEVARUDEwMTAxMFEwcRBxEHDwkPCQ8LDQsNCw0NCw0LDwkNCw8HEQkPBxEHEQcRBRMFEwMTAxUDFQEVABUAFQAVAhUCFQITBBMEEwYTBhEGEQgRCA8KDwoPCg0KDQwNDAsOCw4JDgkQCRAJEgcSBxIFFAUUAxQDFgEWARYAFgCMAwAYAhYCFgQUBBQEFAYUCBIIEggQChAKEAwODA4MDg4MDgwQCg4KEgoQChIIEggSBhQGEgYUBBYEFAIWAhYCFgALYv0CHTZBFEMRHTcAjwMcNUITQhIiOACQAw==",
  "r":"BgACAQRigAkQAA8AAAABShAAhAFXDAwODAwKDgoOCBAIDgYQBhAEEAQQBBAEEAISABACEAAQAA4BEAAQARADEAEQAxADEAUSBRIHFAcUCxQLFA0WDVJFsQHzAQsMDQwLCgkICwgLCAkGCQYJBAkGBwIJBAcCBwQHAAcCBwAFAgcABQAHAQUABQEFAQUBBQEDAQUBAwMDAQMDAwEAmwYSEeMCABISAO4IEAA=",
  "u":"BgABAV2KBwGPAVANCQsHDQcNBw0FCwUNBQ0FDQMPAw8DEQMTARMBFQEVABUAFQITABMEEwITBBMEEQQRBhEGDwYRCA8KDQgPCg0MDQwLDAsOCRALDgcQBxIHEgUUBRQFFAMWAxgBGAEYARoA7gUTEuYCABMPAPsFAAcCBwIFBAcCBQYDBgUGAwgDBgMIAQgBCAEIAQoBCAAIAAoACAIIAggCCAIGBAgEBgQGBgYGBAYCBgQIAggACAD6BRES5AIAEREA7wgPAA==",
  "s":"BgABAasC/gLwBQoDCgMMBQ4DDgUOBRAFEAUSBRAHEgcQCRIJEAkSCxALEAsQDRANDg0ODw4PDA8MDwoRChEIEwYTBBcCFQIXABkBGQEXAxcFFQUTBRMHEwcRCREJDwkNCQ8LDQ0LCwsNCw0JDQkPBw8HDwUPBREDEQMRAREDEQETABEBEwARABMADwIRABECEQIRBBMCEwQVBBUEFQYVBhMIFwgVChUKFQxgsAIIAwYDCAMKAQgDCAMKAQoDCgEKAwoBCgMKAQwDCgEKAwoBDAMKAQoBCgEMAQoACgEKAAoBCgAKAQgACgAIAQgABgoECAIKAgoCCgAMAQoBDAUEBwIHBAcEBwIHBAkECQQJBAkECQYLBAkGCwYJBgsGCwYJCAsGCwgJBgsICQgLCAkICwgJCgkKCQoJCgcKCQwHDAcMBwwFDAcMAw4FDAMOAw4BDgMQARAAEAESABIAEgIQAg4CDgIOBA4CDgQMBAwEDAQMBgoECgYKBgoGCgYIBggGCAgIBggGBgYIBgYGBgYGBgYGBAgGBgQIBAYECAQQChIIEggSBhIEEgQSBBQCFAISABQAEgASABIAEgESARIBEAEQAxIDDgMQAxADDgUOBQwDDAMMAwoDCAMIAQYBe6cCAwIDAgUAAwIFAgUCBwIFAgcCBQIHAgUCBwIHAAUCBwIHAgUABwIHAgcABQIHAAcCBwAFAgUABQIFAAUABQIDAAEAAQABAQEAAQEBAQEBAQEBAQEDAQEAAwEBAQMAAwEDAAMBAwADAQMAAwABAQMAAwADAAEAAwIBAAMCAQQDAgE=",
  "t":"BgABAUe8BLACWAAaEADRAhsOaQANAA0ADwINAA0CDQANAg0CDQINBA0CCwYNBA0GCwYNBgsIDQgLCAsKCwgJDAsKCQwJDAkOCQ4HEAcSBxIHEgUUAOAEawAVEQDWAhYTbAAAygIVFOYCABUXAMUCogEAFhQA1QIVEqEBAADzAwIFBAMEBQQDBAMEAwYDBgMGAwYBCAEGAQgBBgEIAAgA",
  "w":"BgABARz8BsAEINYCKNgBERLuAgARD+8B3QgSEc0CABQSW7YCV7UCFBHJAgASEpMC3AgREvACABERmAHxBDDaAVeYAxES7gIAEREo1QE81wIIAA==",
  "z":"BgABAQ6cA9AGuQIAFw8AzAIaC9QFAAAr9wKjBuACABYQAMsCGQyZBgCaA9AG"
   }';
BEGIN

  IF font IS NULL THEN
    font := font_default;
  END IF;

  -- For character spacing, use m as guide size
  geom := ST_GeomFromTWKB(decode(font->>'m', 'base64'));
  m_width := ST_XMax(geom) - ST_XMin(geom);
  spacing := m_width / 12;

  letterarray := regexp_split_to_array(replace(letters, ' ', E'\t'), E'');
  FOREACH letter IN ARRAY letterarray
  LOOP
    geom := ST_GeomFromTWKB(decode(font->>(letter), 'base64'));
    -- Chars are not already zeroed out, so do it now
    geom := ST_Translate(geom, -1 * ST_XMin(geom), 0.0);
    -- unknown characters are treated as spaces
    IF geom IS NULL THEN
      -- spaces are a "quarter m" in width
      width := m_width / 3.5;
    ELSE
      width := (ST_XMax(geom) - ST_XMin(geom));
    END IF;
    geom := ST_Translate(geom, position, 0.0);
    -- Tighten up spacing when characters have a large gap
    -- between them like Yo or To
    adjustment := 0.0;
    IF prevgeom IS NOT NULL AND geom IS NOT NULL THEN
      dist = ST_Distance(prevgeom, geom);
      IF dist > spacing THEN
        adjustment = spacing - dist;
        geom := ST_Translate(geom, adjustment, 0.0);
      END IF;
    END IF;
    prevgeom := geom;
    position := position + width + spacing + adjustment;
    wordarr := array_append(wordarr, geom);
  END LOOP;
  -- apply the start point and scaling options
  wordgeom := ST_CollectionExtract(ST_Collect(wordarr));
  wordgeom := ST_Scale(wordgeom,
                text_height/font_default_height,
                text_height/font_default_height);
  return wordgeom;
END;]]></definition>
         <parameters>
            <parameter mode="IN" name="letters" type="text"/>
            <parameter mode="IN" name="font" type="json"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_linecrossingdirection(line1 geometry, line2 geometry)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_LineCrossingDirection]]></definition>
         <parameters>
            <parameter mode="IN" name="line1" type="geometry"/>
            <parameter mode="IN" name="line2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_lineextend(geom geometry, distance_forward double precision, distance_backward double precision DEFAULT 0.0)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geometry_line_extend]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="distance_forward" type="double precision"/>
            <parameter mode="IN" name="distance_backward" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_linefromencodedpolyline(txtin text, nprecision integer DEFAULT 5)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[line_from_encoded_polyline]]></definition>
         <parameters>
            <parameter mode="IN" name="txtin" type="text"/>
            <parameter mode="IN" name="nprecision" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_linefrommultipoint(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_line_from_mpoint]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_linefromtext(text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromText($1)) = 'LINESTRING'
	THEN public.ST_GeomFromText($1)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_linefromtext(text, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromText($1, $2)) = 'LINESTRING'
	THEN public.ST_GeomFromText($1,$2)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_linefromwkb(bytea)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1)) = 'LINESTRING'
	THEN public.ST_GeomFromWKB($1)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_linefromwkb(bytea, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1, $2)) = 'LINESTRING'
	THEN public.ST_GeomFromWKB($1, $2)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_lineinterpolatepoint(geography, double precision, use_spheroid boolean DEFAULT true)" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_line_interpolate_point]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" name="use_spheroid" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_lineinterpolatepoint(geometry, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_line_interpolate_point]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_lineinterpolatepoint(text, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_LineInterpolatePoint($1::public.geometry, $2);]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_lineinterpolatepoints(geography, double precision, use_spheroid boolean DEFAULT true, repeat boolean DEFAULT true)" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_line_interpolate_point]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" name="use_spheroid" type="boolean"/>
            <parameter mode="IN" name="repeat" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_lineinterpolatepoints(geometry, double precision, repeat boolean DEFAULT true)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_line_interpolate_point]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" name="repeat" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_lineinterpolatepoints(text, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_LineInterpolatePoints($1::public.geometry, $2);]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_linelocatepoint(geography, geography, use_spheroid boolean DEFAULT true)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_line_locate_point]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" name="use_spheroid" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_linelocatepoint(geom1 geometry, geom2 geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_line_locate_point]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_linelocatepoint(text, text)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_LineLocatePoint($1::public.geometry, $2::public.geometry);]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_linemerge(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[linemerge]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_linemerge(geometry, boolean)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[linemerge]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_linestringfromwkb(bytea)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1)) = 'LINESTRING'
	THEN public.ST_GeomFromWKB($1)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_linestringfromwkb(bytea, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1, $2)) = 'LINESTRING'
	THEN public.ST_GeomFromWKB($1, $2)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_linesubstring(geography, double precision, double precision)" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_line_substring]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_linesubstring(geometry, double precision, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_line_substring]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_linesubstring(text, double precision, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_LineSubstring($1::public.geometry, $2, $3);]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_linetocurve(geometry geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_line_desegmentize]]></definition>
         <parameters>
            <parameter mode="IN" name="geometry" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_locatealong(geometry geometry, measure double precision, leftrightoffset double precision DEFAULT 0.0)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_LocateAlong]]></definition>
         <parameters>
            <parameter mode="IN" name="geometry" type="geometry"/>
            <parameter mode="IN" name="measure" type="double precision"/>
            <parameter mode="IN" name="leftrightoffset" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_locatebetween(geometry geometry, frommeasure double precision, tomeasure double precision, leftrightoffset double precision DEFAULT 0.0)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_LocateBetween]]></definition>
         <parameters>
            <parameter mode="IN" name="geometry" type="geometry"/>
            <parameter mode="IN" name="frommeasure" type="double precision"/>
            <parameter mode="IN" name="tomeasure" type="double precision"/>
            <parameter mode="IN" name="leftrightoffset" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_locatebetweenelevations(geometry geometry, fromelevation double precision, toelevation double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_LocateBetweenElevations]]></definition>
         <parameters>
            <parameter mode="IN" name="geometry" type="geometry"/>
            <parameter mode="IN" name="fromelevation" type="double precision"/>
            <parameter mode="IN" name="toelevation" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_longestline(geom1 geometry, geom2 geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_LongestLine(public.ST_ConvexHull($1), public.ST_ConvexHull($2))]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_m(geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_m_point]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_makebox2d(geom1 geometry, geom2 geometry)" returnType="box2d" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[BOX2D_construct]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_makeenvelope(double precision, double precision, double precision, double precision, integer DEFAULT 0)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_MakeEnvelope]]></definition>
         <parameters>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_makeline(geom1 geometry, geom2 geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_makeline]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_makeline(geometry)" returnType="geometry" securityType="INVOKER" type="AGGREGATE">
         <comment/>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_makeline(geometry[])" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_makeline_garray]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_makepoint(double precision, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_makepoint]]></definition>
         <parameters>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_makepoint(double precision, double precision, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_makepoint]]></definition>
         <parameters>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_makepoint(double precision, double precision, double precision, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_makepoint]]></definition>
         <parameters>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_makepointm(double precision, double precision, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_makepoint3dm]]></definition>
         <parameters>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_makepolygon(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_makepoly]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_makepolygon(geometry, geometry[])" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_makepoly]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="geometry[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_makevalid(geom geometry, params text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_MakeValid]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="params" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_makevalid(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_MakeValid]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_maxdistance(geom1 geometry, geom2 geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_MaxDistance(public.ST_ConvexHull($1), public.ST_ConvexHull($2))]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_maximuminscribedcircle(geometry, OUT center geometry, OUT nearest geometry, OUT radius double precision)" returnType="record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_MaximumInscribedCircle]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="OUT" name="center" type="geometry"/>
            <parameter mode="OUT" name="nearest" type="geometry"/>
            <parameter mode="OUT" name="radius" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_memcollect(geometry)" returnType="geometry" securityType="INVOKER" type="AGGREGATE">
         <comment/>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_memsize(geometry)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_mem_size]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_memunion(geometry)" returnType="geometry" securityType="INVOKER" type="AGGREGATE">
         <comment/>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_minimumboundingcircle(inputgeom geometry, segs_per_quarter integer DEFAULT 48)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_MinimumBoundingCircle]]></definition>
         <parameters>
            <parameter mode="IN" name="inputgeom" type="geometry"/>
            <parameter mode="IN" name="segs_per_quarter" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_minimumboundingradius(geometry, OUT center geometry, OUT radius double precision)" returnType="record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_MinimumBoundingRadius]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="OUT" name="center" type="geometry"/>
            <parameter mode="OUT" name="radius" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_minimumclearance(geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_MinimumClearance]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_minimumclearanceline(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_MinimumClearanceLine]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mlinefromtext(text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromText($1)) = 'MULTILINESTRING'
	THEN public.ST_GeomFromText($1)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mlinefromtext(text, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE
	WHEN public.geometrytype(public.ST_GeomFromText($1, $2)) = 'MULTILINESTRING'
	THEN public.ST_GeomFromText($1,$2)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mlinefromwkb(bytea)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1)) = 'MULTILINESTRING'
	THEN public.ST_GeomFromWKB($1)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mlinefromwkb(bytea, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1, $2)) = 'MULTILINESTRING'
	THEN public.ST_GeomFromWKB($1, $2)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mpointfromtext(text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromText($1)) = 'MULTIPOINT'
	THEN public.ST_GeomFromText($1)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mpointfromtext(text, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromText($1, $2)) = 'MULTIPOINT'
	THEN ST_GeomFromText($1, $2)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mpointfromwkb(bytea)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1)) = 'MULTIPOINT'
	THEN public.ST_GeomFromWKB($1)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mpointfromwkb(bytea, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1, $2)) = 'MULTIPOINT'
	THEN public.ST_GeomFromWKB($1, $2)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mpolyfromtext(text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromText($1)) = 'MULTIPOLYGON'
	THEN public.ST_GeomFromText($1)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mpolyfromtext(text, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromText($1, $2)) = 'MULTIPOLYGON'
	THEN public.ST_GeomFromText($1,$2)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mpolyfromwkb(bytea)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1)) = 'MULTIPOLYGON'
	THEN public.ST_GeomFromWKB($1)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mpolyfromwkb(bytea, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1, $2)) = 'MULTIPOLYGON'
	THEN public.ST_GeomFromWKB($1, $2)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_multi(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_force_multi]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_multilinefromwkb(bytea)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1)) = 'MULTILINESTRING'
	THEN public.ST_GeomFromWKB($1)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_multilinestringfromtext(text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_MLineFromText($1)]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_multilinestringfromtext(text, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_MLineFromText($1, $2)]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_multipointfromtext(text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_MPointFromText($1)]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_multipointfromwkb(bytea)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1)) = 'MULTIPOINT'
	THEN public.ST_GeomFromWKB($1)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_multipointfromwkb(bytea, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1,$2)) = 'MULTIPOINT'
	THEN public.ST_GeomFromWKB($1, $2)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_multipolyfromwkb(bytea)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1)) = 'MULTIPOLYGON'
	THEN public.ST_GeomFromWKB($1)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_multipolyfromwkb(bytea, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1, $2)) = 'MULTIPOLYGON'
	THEN public.ST_GeomFromWKB($1, $2)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_multipolygonfromtext(text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_MPolyFromText($1)]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_multipolygonfromtext(text, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_MPolyFromText($1, $2)]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_ndims(geometry)" returnType="smallint" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_ndims]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_node(g geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_Node]]></definition>
         <parameters>
            <parameter mode="IN" name="g" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_normalize(geom geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_Normalize]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_npoints(geometry)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_npoints]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_nrings(geometry)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_nrings]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_numcurves(geometry geometry)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_NumCurves]]></definition>
         <parameters>
            <parameter mode="IN" name="geometry" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_numgeometries(geometry)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_numgeometries_collection]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_numinteriorring(geometry)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_numinteriorrings_polygon]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_numinteriorrings(geometry)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_numinteriorrings_polygon]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_numpatches(geometry)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.ST_GeometryType($1) = 'ST_PolyhedralSurface'
	THEN public.ST_NumGeometries($1)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_numpoints(geometry)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_numpoints_linestring]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_offsetcurve(line geometry, distance double precision, params text DEFAULT ''::text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_OffsetCurve]]></definition>
         <parameters>
            <parameter mode="IN" name="line" type="geometry"/>
            <parameter mode="IN" name="distance" type="double precision"/>
            <parameter mode="IN" name="params" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_orderingequals(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_same]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_orientedenvelope(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_OrientedEnvelope]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_overlaps(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[overlaps]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_patchn(geometry, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.ST_GeometryType($1) = 'ST_PolyhedralSurface'
	THEN public.ST_GeometryN($1, $2)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_perimeter(geog geography, use_spheroid boolean DEFAULT true)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_perimeter]]></definition>
         <parameters>
            <parameter mode="IN" name="geog" type="geography"/>
            <parameter mode="IN" name="use_spheroid" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_perimeter(geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_perimeter2d_poly]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_perimeter2d(geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_perimeter2d_poly]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_point(double precision, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_makepoint]]></definition>
         <parameters>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_point(double precision, double precision, srid integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_Point]]></definition>
         <parameters>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" name="srid" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_pointfromgeohash(text, integer DEFAULT NULL::integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[point_from_geohash]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_pointfromtext(text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromText($1)) = 'POINT'
	THEN public.ST_GeomFromText($1)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_pointfromtext(text, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromText($1, $2)) = 'POINT'
	THEN public.ST_GeomFromText($1, $2)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_pointfromwkb(bytea)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1)) = 'POINT'
	THEN public.ST_GeomFromWKB($1)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_pointfromwkb(bytea, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1, $2)) = 'POINT'
	THEN public.ST_GeomFromWKB($1, $2)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_pointinsidecircle(geometry, double precision, double precision, double precision)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_inside_circle_point]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_pointm(xcoordinate double precision, ycoordinate double precision, mcoordinate double precision, srid integer DEFAULT 0)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_PointM]]></definition>
         <parameters>
            <parameter mode="IN" name="xcoordinate" type="double precision"/>
            <parameter mode="IN" name="ycoordinate" type="double precision"/>
            <parameter mode="IN" name="mcoordinate" type="double precision"/>
            <parameter mode="IN" name="srid" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_pointn(geometry, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_pointn_linestring]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_pointonsurface(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pointonsurface]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_points(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_Points]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_pointz(xcoordinate double precision, ycoordinate double precision, zcoordinate double precision, srid integer DEFAULT 0)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_PointZ]]></definition>
         <parameters>
            <parameter mode="IN" name="xcoordinate" type="double precision"/>
            <parameter mode="IN" name="ycoordinate" type="double precision"/>
            <parameter mode="IN" name="zcoordinate" type="double precision"/>
            <parameter mode="IN" name="srid" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_pointzm(xcoordinate double precision, ycoordinate double precision, zcoordinate double precision, mcoordinate double precision, srid integer DEFAULT 0)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_PointZM]]></definition>
         <parameters>
            <parameter mode="IN" name="xcoordinate" type="double precision"/>
            <parameter mode="IN" name="ycoordinate" type="double precision"/>
            <parameter mode="IN" name="zcoordinate" type="double precision"/>
            <parameter mode="IN" name="mcoordinate" type="double precision"/>
            <parameter mode="IN" name="srid" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_polyfromtext(text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromText($1)) = 'POLYGON'
	THEN public.ST_GeomFromText($1)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_polyfromtext(text, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromText($1, $2)) = 'POLYGON'
	THEN public.ST_GeomFromText($1, $2)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_polyfromwkb(bytea)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1)) = 'POLYGON'
	THEN public.ST_GeomFromWKB($1)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_polyfromwkb(bytea, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1, $2)) = 'POLYGON'
	THEN public.ST_GeomFromWKB($1, $2)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_polygon(geometry, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_SetSRID(public.ST_MakePolygon($1), $2)]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_polygonfromtext(text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_PolyFromText($1)]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_polygonfromtext(text, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_PolyFromText($1, $2)]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_polygonfromwkb(bytea)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1)) = 'POLYGON'
	THEN public.ST_GeomFromWKB($1)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_polygonfromwkb(bytea, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1,$2)) = 'POLYGON'
	THEN public.ST_GeomFromWKB($1, $2)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_polygonize(geometry)" returnType="geometry" securityType="INVOKER" type="AGGREGATE">
         <comment/>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_polygonize(geometry[])" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[polygonize_garray]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_project(geog geography, distance double precision, azimuth double precision)" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_project]]></definition>
         <parameters>
            <parameter mode="IN" name="geog" type="geography"/>
            <parameter mode="IN" name="distance" type="double precision"/>
            <parameter mode="IN" name="azimuth" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_project(geog_from geography, geog_to geography, distance double precision)" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_project_geography]]></definition>
         <parameters>
            <parameter mode="IN" name="geog_from" type="geography"/>
            <parameter mode="IN" name="geog_to" type="geography"/>
            <parameter mode="IN" name="distance" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_project(geom1 geometry, distance double precision, azimuth double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geometry_project_direction]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="distance" type="double precision"/>
            <parameter mode="IN" name="azimuth" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_project(geom1 geometry, geom2 geometry, distance double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geometry_project_geometry]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
            <parameter mode="IN" name="distance" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_quantizecoordinates(g geometry, prec_x integer, prec_y integer DEFAULT NULL::integer, prec_z integer DEFAULT NULL::integer, prec_m integer DEFAULT NULL::integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_QuantizeCoordinates]]></definition>
         <parameters>
            <parameter mode="IN" name="g" type="geometry"/>
            <parameter mode="IN" name="prec_x" type="integer"/>
            <parameter mode="IN" name="prec_y" type="integer"/>
            <parameter mode="IN" name="prec_z" type="integer"/>
            <parameter mode="IN" name="prec_m" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_reduceprecision(geom geometry, gridsize double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_ReducePrecision]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="gridsize" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_relate(geom1 geometry, geom2 geometry)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[relate_full]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_relate(geom1 geometry, geom2 geometry, integer)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[relate_full]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_relate(geom1 geometry, geom2 geometry, text)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[relate_pattern]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_relatematch(text, text)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_RelateMatch]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_removeirrelevantpointsforview(geometry, box2d, boolean DEFAULT false)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_RemoveIrrelevantPointsForView]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="box2d"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_removepoint(geometry, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_removepoint]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_removerepeatedpoints(geom geometry, tolerance double precision DEFAULT 0.0)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_RemoveRepeatedPoints]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="tolerance" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_removesmallparts(geometry, double precision, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_RemoveSmallParts]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_reverse(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_reverse]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_rotate(geometry, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_Affine($1,  cos($2), -sin($2), 0,  sin($2), cos($2), 0,  0, 0, 1,  0, 0, 0)]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_rotate(geometry, double precision, double precision, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_Affine($1,  cos($2), -sin($2), 0,  sin($2),  cos($2), 0, 0, 0, 1,	$3 - cos($2) * $3 + sin($2) * $4, $4 - sin($2) * $3 - cos($2) * $4, 0)]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_rotate(geometry, double precision, geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_Affine($1,  cos($2), -sin($2), 0,  sin($2),  cos($2), 0, 0, 0, 1, public.ST_X($3) - cos($2) * public.ST_X($3) + sin($2) * public.ST_Y($3), public.ST_Y($3) - sin($2) * public.ST_X($3) - cos($2) * public.ST_Y($3), 0)]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_rotatex(geometry, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_Affine($1, 1, 0, 0, 0, cos($2), -sin($2), 0, sin($2), cos($2), 0, 0, 0)]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_rotatey(geometry, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_Affine($1,  cos($2), 0, sin($2),  0, 1, 0,  -sin($2), 0, cos($2), 0,  0, 0)]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_rotatez(geometry, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_Rotate($1, $2)]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_scale(geometry, double precision, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_Scale($1, $2, $3, 1)]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_scale(geometry, double precision, double precision, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_Scale($1, public.ST_MakePoint($2, $3, $4))]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_scale(geometry, geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_Scale]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_scale(geometry, geometry, origin geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_Scale]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" name="origin" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_scroll(geometry, geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_Scroll]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_segmentize(geog geography, max_segment_length double precision)" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_segmentize]]></definition>
         <parameters>
            <parameter mode="IN" name="geog" type="geography"/>
            <parameter mode="IN" name="max_segment_length" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_segmentize(geometry, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_segmentize2d]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_seteffectivearea(geometry, double precision DEFAULT '-1'::integer, integer DEFAULT 1)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_SetEffectiveArea]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_setpoint(geometry, integer, geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_setpoint_linestring]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_setsrid(geog geography, srid integer)" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_set_srid]]></definition>
         <parameters>
            <parameter mode="IN" name="geog" type="geography"/>
            <parameter mode="IN" name="srid" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_setsrid(geom geometry, srid integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_set_srid]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="srid" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_sharedpaths(geom1 geometry, geom2 geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_SharedPaths]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_shiftlongitude(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_longitude_shift]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_shortestline(geography, geography, use_spheroid boolean DEFAULT true)" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_shortestline]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" name="use_spheroid" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_shortestline(geom1 geometry, geom2 geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_shortestline2d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_shortestline(text, text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_ShortestLine($1::public.geometry, $2::public.geometry);]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_simplify(geometry, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_simplify2d]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_simplify(geometry, double precision, boolean)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_simplify2d]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_simplifypolygonhull(geom geometry, vertex_fraction double precision, is_outer boolean DEFAULT true)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_SimplifyPolygonHull]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="vertex_fraction" type="double precision"/>
            <parameter mode="IN" name="is_outer" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_simplifypreservetopology(geometry, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[topologypreservesimplify]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_simplifyvw(geometry, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_SetEffectiveArea]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_snap(geom1 geometry, geom2 geometry, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_Snap]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_snaptogrid(geom1 geometry, geom2 geometry, double precision, double precision, double precision, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_snaptogrid_pointoff]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_snaptogrid(geometry, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_SnapToGrid($1, 0, 0, $2, $2)]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_snaptogrid(geometry, double precision, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_SnapToGrid($1, 0, 0, $2, $3)]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_snaptogrid(geometry, double precision, double precision, double precision, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_snaptogrid]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_split(geom1 geometry, geom2 geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_Split]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_square(size double precision, cell_i integer, cell_j integer, origin geometry DEFAULT '010100000000000000000000000000000000000000'::geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_Square]]></definition>
         <parameters>
            <parameter mode="IN" name="size" type="double precision"/>
            <parameter mode="IN" name="cell_i" type="integer"/>
            <parameter mode="IN" name="cell_j" type="integer"/>
            <parameter mode="IN" name="origin" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_squaregrid(size double precision, bounds geometry, OUT geom geometry, OUT i integer, OUT j integer)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_ShapeGrid]]></definition>
         <parameters>
            <parameter mode="IN" name="size" type="double precision"/>
            <parameter mode="IN" name="bounds" type="geometry"/>
            <parameter mode="OUT" name="geom" type="geometry"/>
            <parameter mode="OUT" name="i" type="integer"/>
            <parameter mode="OUT" name="j" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_srid(geog geography)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_get_srid]]></definition>
         <parameters>
            <parameter mode="IN" name="geog" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_srid(geom geometry)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_get_srid]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_startpoint(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_startpoint_linestring]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_subdivide(geom geometry, maxvertices integer DEFAULT 256, gridsize double precision DEFAULT '-1.0'::numeric)" returnType="SETOF geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_Subdivide]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="maxvertices" type="integer"/>
            <parameter mode="IN" name="gridsize" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_summary(geography)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_summary]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_summary(geometry)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_summary]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_swapordinates(geom geometry, ords cstring)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_SwapOrdinates]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="ords" type="cstring"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_symdifference(geom1 geometry, geom2 geometry, gridsize double precision DEFAULT '-1.0'::numeric)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_SymDifference]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
            <parameter mode="IN" name="gridsize" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_symmetricdifference(geom1 geometry, geom2 geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_SymDifference(geom1, geom2, -1.0);]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_tileenvelope(zoom integer, x integer, y integer, bounds geometry DEFAULT '0102000020110F00000200000093107C45F81B73C193107C45F81B73C193107C45F81B734193107C45F81B7341'::geometry, margin double precision DEFAULT 0.0)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_TileEnvelope]]></definition>
         <parameters>
            <parameter mode="IN" name="zoom" type="integer"/>
            <parameter mode="IN" name="x" type="integer"/>
            <parameter mode="IN" name="y" type="integer"/>
            <parameter mode="IN" name="bounds" type="geometry"/>
            <parameter mode="IN" name="margin" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_touches(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[touches]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_transform(geom geometry, from_proj text, to_proj text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.postgis_transform_geometry($1, $2, $3, 0)]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="from_proj" type="text"/>
            <parameter mode="IN" name="to_proj" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_transform(geom geometry, from_proj text, to_srid integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.postgis_transform_geometry($1, $2, proj4text, $3)
	FROM public.spatial_ref_sys WHERE srid=$3;]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="from_proj" type="text"/>
            <parameter mode="IN" name="to_srid" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_transform(geom geometry, to_proj text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.postgis_transform_geometry($1, proj4text, $2, 0)
	FROM public.spatial_ref_sys WHERE srid=public.ST_SRID($1);]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="to_proj" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_transform(geometry, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[transform]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_transformpipeline(geom geometry, pipeline text, to_srid integer DEFAULT 0)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.postgis_transform_pipeline_geometry($1, $2, TRUE, $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="pipeline" type="text"/>
            <parameter mode="IN" name="to_srid" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_translate(geometry, double precision, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_Translate($1, $2, $3, 0)]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_translate(geometry, double precision, double precision, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_Affine($1, 1, 0, 0, 0, 1, 0, 0, 0, 1, $2, $3, $4)]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_transscale(geometry, double precision, double precision, double precision, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_Affine($1,  $4, 0, 0,  0, $5, 0,
		0, 0, 1,  $2 * $4, $3 * $5, 0)]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_triangulatepolygon(g1 geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_TriangulatePolygon]]></definition>
         <parameters>
            <parameter mode="IN" name="g1" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_unaryunion(geometry, gridsize double precision DEFAULT '-1.0'::numeric)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_UnaryUnion]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" name="gridsize" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_union(geom1 geometry, geom2 geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_Union]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_union(geom1 geometry, geom2 geometry, gridsize double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_Union]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
            <parameter mode="IN" name="gridsize" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_union(geometry)" returnType="geometry" securityType="INVOKER" type="AGGREGATE">
         <comment/>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_union(geometry, gridsize double precision)" returnType="geometry" securityType="INVOKER" type="AGGREGATE">
         <comment/>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" name="gridsize" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_union(geometry[])" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_union_geometry_array]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_voronoilines(g1 geometry, tolerance double precision DEFAULT 0.0, extend_to geometry DEFAULT NULL::geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_Voronoi(g1, extend_to, tolerance, false)]]></definition>
         <parameters>
            <parameter mode="IN" name="g1" type="geometry"/>
            <parameter mode="IN" name="tolerance" type="double precision"/>
            <parameter mode="IN" name="extend_to" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_voronoipolygons(g1 geometry, tolerance double precision DEFAULT 0.0, extend_to geometry DEFAULT NULL::geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_Voronoi(g1, extend_to, tolerance, true)]]></definition>
         <parameters>
            <parameter mode="IN" name="g1" type="geometry"/>
            <parameter mode="IN" name="tolerance" type="double precision"/>
            <parameter mode="IN" name="extend_to" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_within(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[within]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_wkbtosql(wkb bytea)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_from_WKB]]></definition>
         <parameters>
            <parameter mode="IN" name="wkb" type="bytea"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_wkttosql(text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_from_text]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_wrapx(geom geometry, wrap double precision, move double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_WrapX]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="wrap" type="double precision"/>
            <parameter mode="IN" name="move" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_x(geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_x_point]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_xmax(box3d)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[BOX3D_xmax]]></definition>
         <parameters>
            <parameter mode="IN" type="box3d"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_xmin(box3d)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[BOX3D_xmin]]></definition>
         <parameters>
            <parameter mode="IN" type="box3d"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_y(geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_y_point]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_ymax(box3d)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[BOX3D_ymax]]></definition>
         <parameters>
            <parameter mode="IN" type="box3d"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_ymin(box3d)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[BOX3D_ymin]]></definition>
         <parameters>
            <parameter mode="IN" type="box3d"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_z(geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_z_point]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_zmax(box3d)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[BOX3D_zmax]]></definition>
         <parameters>
            <parameter mode="IN" type="box3d"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_zmflag(geometry)" returnType="smallint" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_zmflag]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_zmin(box3d)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[BOX3D_zmin]]></definition>
         <parameters>
            <parameter mode="IN" type="box3d"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="strict_word_similarity(text, text)" returnType="real" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[strict_word_similarity]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="strict_word_similarity_commutator_op(text, text)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[strict_word_similarity_commutator_op]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="strict_word_similarity_dist_commutator_op(text, text)" returnType="real" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[strict_word_similarity_dist_commutator_op]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="strict_word_similarity_dist_op(text, text)" returnType="real" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[strict_word_similarity_dist_op]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="strict_word_similarity_op(text, text)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[strict_word_similarity_op]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="subvector(halfvec, integer, integer)" returnType="halfvec" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[halfvec_subvector]]></definition>
         <parameters>
            <parameter mode="IN" type="halfvec"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="subvector(vector, integer, integer)" returnType="vector" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[subvector]]></definition>
         <parameters>
            <parameter mode="IN" type="vector"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="sum(halfvec)" returnType="halfvec" securityType="INVOKER" type="AGGREGATE">
         <comment/>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="halfvec"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="sum(vector)" returnType="vector" securityType="INVOKER" type="AGGREGATE">
         <comment/>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="vector"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="svals(hstore)" returnType="SETOF text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hstore_svals]]></definition>
         <parameters>
            <parameter mode="IN" type="hstore"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="tconvert(text, text)" returnType="hstore" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[hstore_from_text]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="text(geometry)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_to_text]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="text_soundex(text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[soundex]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="time_dist(time without time zone, time without time zone)" returnType="interval" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[time_dist]]></definition>
         <parameters>
            <parameter mode="IN" type="time without time zone"/>
            <parameter mode="IN" type="time without time zone"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="ts_dist(timestamp without time zone, timestamp without time zone)" returnType="interval" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ts_dist]]></definition>
         <parameters>
            <parameter mode="IN" type="timestamp without time zone"/>
            <parameter mode="IN" type="timestamp without time zone"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="tstz_dist(timestamp with time zone, timestamp with time zone)" returnType="interval" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[tstz_dist]]></definition>
         <parameters>
            <parameter mode="IN" type="timestamp with time zone"/>
            <parameter mode="IN" type="timestamp with time zone"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="unaccent(regdictionary, text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[unaccent_dict]]></definition>
         <parameters>
            <parameter mode="IN" type="regdictionary"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="unaccent(text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[unaccent_dict]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="unaccent_init(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[unaccent_init]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="unaccent_lexize(internal, internal, internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[unaccent_lexize]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="updategeometrysrid(catalogn_name character varying, schema_name character varying, table_name character varying, column_name character varying, new_srid_in integer)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
	myrec RECORD;
	okay boolean;
	cname varchar;
	real_schema name;
	unknown_srid integer;
	new_srid integer := new_srid_in;

BEGIN

	-- Find, check or fix schema_name
	IF ( schema_name != '' ) THEN
		okay = false;

		FOR myrec IN SELECT nspname FROM pg_namespace WHERE text(nspname) = schema_name LOOP
			okay := true;
		END LOOP;

		IF ( okay <> true ) THEN
			RAISE EXCEPTION 'Invalid schema name';
		ELSE
			real_schema = schema_name;
		END IF;
	ELSE
		SELECT INTO real_schema current_schema()::text;
	END IF;

	-- Ensure that column_name is in geometry_columns
	okay = false;
	FOR myrec IN SELECT type, coord_dimension FROM public.geometry_columns WHERE f_table_schema = text(real_schema) and f_table_name = table_name and f_geometry_column = column_name LOOP
		okay := true;
	END LOOP;
	IF (NOT okay) THEN
		RAISE EXCEPTION 'column not found in geometry_columns table';
		RETURN false;
	END IF;

	-- Ensure that new_srid is valid
	IF ( new_srid > 0 ) THEN
		IF ( SELECT count(*) = 0 from public.spatial_ref_sys where srid = new_srid ) THEN
			RAISE EXCEPTION 'invalid SRID: % not found in spatial_ref_sys', new_srid;
			RETURN false;
		END IF;
	ELSE
		unknown_srid := public.ST_SRID('POINT EMPTY'::public.geometry);
		IF ( new_srid != unknown_srid ) THEN
			new_srid := unknown_srid;
			RAISE NOTICE 'SRID value % converted to the officially unknown SRID value %', new_srid_in, new_srid;
		END IF;
	END IF;

	IF postgis_constraint_srid(real_schema, table_name, column_name) IS NOT NULL THEN
	-- srid was enforced with constraints before, keep it that way.
		-- Make up constraint name
		cname = 'enforce_srid_'  || column_name;

		-- Drop enforce_srid constraint
		EXECUTE 'ALTER TABLE ' || quote_ident(real_schema) ||
			'.' || quote_ident(table_name) ||
			' DROP constraint ' || quote_ident(cname);

		-- Update geometries SRID
		EXECUTE 'UPDATE ' || quote_ident(real_schema) ||
			'.' || quote_ident(table_name) ||
			' SET ' || quote_ident(column_name) ||
			' = public.ST_SetSRID(' || quote_ident(column_name) ||
			', ' || new_srid::text || ')';

		-- Reset enforce_srid constraint
		EXECUTE 'ALTER TABLE ' || quote_ident(real_schema) ||
			'.' || quote_ident(table_name) ||
			' ADD constraint ' || quote_ident(cname) ||
			' CHECK (st_srid(' || quote_ident(column_name) ||
			') = ' || new_srid::text || ')';
	ELSE
		-- We will use typmod to enforce if no srid constraints
		-- We are using postgis_type_name to lookup the new name
		-- (in case Paul changes his mind and flips geometry_columns to return old upper case name)
		EXECUTE 'ALTER TABLE ' || quote_ident(real_schema) || '.' || quote_ident(table_name) ||
		' ALTER COLUMN ' || quote_ident(column_name) || ' TYPE  geometry(' || public.postgis_type_name(myrec.type, myrec.coord_dimension, true) || ', ' || new_srid::text || ') USING public.ST_SetSRID(' || quote_ident(column_name) || ',' || new_srid::text || ');' ;
	END IF;

	RETURN real_schema || '.' || table_name || '.' || column_name ||' SRID changed to ' || new_srid::text;

END;]]></definition>
         <parameters>
            <parameter mode="IN" name="catalogn_name" type="character varying"/>
            <parameter mode="IN" name="schema_name" type="character varying"/>
            <parameter mode="IN" name="table_name" type="character varying"/>
            <parameter mode="IN" name="column_name" type="character varying"/>
            <parameter mode="IN" name="new_srid_in" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="updategeometrysrid(character varying, character varying, character varying, integer)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
	ret  text;
BEGIN
	SELECT public.UpdateGeometrySRID('',$1,$2,$3,$4) into ret;
	RETURN ret;
END;]]></definition>
         <parameters>
            <parameter mode="IN" type="character varying"/>
            <parameter mode="IN" type="character varying"/>
            <parameter mode="IN" type="character varying"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="updategeometrysrid(character varying, character varying, integer)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
	ret  text;
BEGIN
	SELECT public.UpdateGeometrySRID('','',$1,$2,$3) into ret;
	RETURN ret;
END;]]></definition>
         <parameters>
            <parameter mode="IN" type="character varying"/>
            <parameter mode="IN" type="character varying"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="uuid_generate_v1()" returnType="uuid" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[uuid_generate_v1]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="uuid_generate_v1mc()" returnType="uuid" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[uuid_generate_v1mc]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="uuid_generate_v3(namespace uuid, name text)" returnType="uuid" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[uuid_generate_v3]]></definition>
         <parameters>
            <parameter mode="IN" name="namespace" type="uuid"/>
            <parameter mode="IN" name="name" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="uuid_generate_v4()" returnType="uuid" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[uuid_generate_v4]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="uuid_generate_v5(namespace uuid, name text)" returnType="uuid" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[uuid_generate_v5]]></definition>
         <parameters>
            <parameter mode="IN" name="namespace" type="uuid"/>
            <parameter mode="IN" name="name" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="uuid_nil()" returnType="uuid" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[uuid_nil]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="uuid_ns_dns()" returnType="uuid" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[uuid_ns_dns]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="uuid_ns_oid()" returnType="uuid" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[uuid_ns_oid]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="uuid_ns_url()" returnType="uuid" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[uuid_ns_url]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="uuid_ns_x500()" returnType="uuid" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[uuid_ns_x500]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="vector(vector, integer, boolean)" returnType="vector" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[vector]]></definition>
         <parameters>
            <parameter mode="IN" type="vector"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="vector_accum(double precision[], vector)" returnType="double precision[]" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[vector_accum]]></definition>
         <parameters>
            <parameter mode="IN" type="double precision[]"/>
            <parameter mode="IN" type="vector"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="vector_add(vector, vector)" returnType="vector" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[vector_add]]></definition>
         <parameters>
            <parameter mode="IN" type="vector"/>
            <parameter mode="IN" type="vector"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="vector_avg(double precision[])" returnType="vector" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[vector_avg]]></definition>
         <parameters>
            <parameter mode="IN" type="double precision[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="vector_cmp(vector, vector)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[vector_cmp]]></definition>
         <parameters>
            <parameter mode="IN" type="vector"/>
            <parameter mode="IN" type="vector"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="vector_combine(double precision[], double precision[])" returnType="double precision[]" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[vector_combine]]></definition>
         <parameters>
            <parameter mode="IN" type="double precision[]"/>
            <parameter mode="IN" type="double precision[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="vector_concat(vector, vector)" returnType="vector" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[vector_concat]]></definition>
         <parameters>
            <parameter mode="IN" type="vector"/>
            <parameter mode="IN" type="vector"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="vector_dims(halfvec)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[halfvec_vector_dims]]></definition>
         <parameters>
            <parameter mode="IN" type="halfvec"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="vector_dims(vector)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[vector_dims]]></definition>
         <parameters>
            <parameter mode="IN" type="vector"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="vector_eq(vector, vector)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[vector_eq]]></definition>
         <parameters>
            <parameter mode="IN" type="vector"/>
            <parameter mode="IN" type="vector"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="vector_ge(vector, vector)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[vector_ge]]></definition>
         <parameters>
            <parameter mode="IN" type="vector"/>
            <parameter mode="IN" type="vector"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="vector_gt(vector, vector)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[vector_gt]]></definition>
         <parameters>
            <parameter mode="IN" type="vector"/>
            <parameter mode="IN" type="vector"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="vector_in(cstring, oid, integer)" returnType="vector" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[vector_in]]></definition>
         <parameters>
            <parameter mode="IN" type="cstring"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="vector_l2_squared_distance(vector, vector)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[vector_l2_squared_distance]]></definition>
         <parameters>
            <parameter mode="IN" type="vector"/>
            <parameter mode="IN" type="vector"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="vector_le(vector, vector)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[vector_le]]></definition>
         <parameters>
            <parameter mode="IN" type="vector"/>
            <parameter mode="IN" type="vector"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="vector_lt(vector, vector)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[vector_lt]]></definition>
         <parameters>
            <parameter mode="IN" type="vector"/>
            <parameter mode="IN" type="vector"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="vector_mul(vector, vector)" returnType="vector" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[vector_mul]]></definition>
         <parameters>
            <parameter mode="IN" type="vector"/>
            <parameter mode="IN" type="vector"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="vector_ne(vector, vector)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[vector_ne]]></definition>
         <parameters>
            <parameter mode="IN" type="vector"/>
            <parameter mode="IN" type="vector"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="vector_negative_inner_product(vector, vector)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[vector_negative_inner_product]]></definition>
         <parameters>
            <parameter mode="IN" type="vector"/>
            <parameter mode="IN" type="vector"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="vector_norm(vector)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[vector_norm]]></definition>
         <parameters>
            <parameter mode="IN" type="vector"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="vector_out(vector)" returnType="cstring" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[vector_out]]></definition>
         <parameters>
            <parameter mode="IN" type="vector"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="vector_recv(internal, oid, integer)" returnType="vector" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[vector_recv]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="vector_send(vector)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[vector_send]]></definition>
         <parameters>
            <parameter mode="IN" type="vector"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="vector_spherical_distance(vector, vector)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[vector_spherical_distance]]></definition>
         <parameters>
            <parameter mode="IN" type="vector"/>
            <parameter mode="IN" type="vector"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="vector_sub(vector, vector)" returnType="vector" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[vector_sub]]></definition>
         <parameters>
            <parameter mode="IN" type="vector"/>
            <parameter mode="IN" type="vector"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="vector_to_float4(vector, integer, boolean)" returnType="real[]" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[vector_to_float4]]></definition>
         <parameters>
            <parameter mode="IN" type="vector"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="vector_to_halfvec(vector, integer, boolean)" returnType="halfvec" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[vector_to_halfvec]]></definition>
         <parameters>
            <parameter mode="IN" type="vector"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="vector_to_sparsevec(vector, integer, boolean)" returnType="sparsevec" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[vector_to_sparsevec]]></definition>
         <parameters>
            <parameter mode="IN" type="vector"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="vector_typmod_in(cstring[])" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[vector_typmod_in]]></definition>
         <parameters>
            <parameter mode="IN" type="cstring[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="word_similarity(text, text)" returnType="real" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[word_similarity]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="word_similarity_commutator_op(text, text)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[word_similarity_commutator_op]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="word_similarity_dist_commutator_op(text, text)" returnType="real" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[word_similarity_dist_commutator_op]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="word_similarity_dist_op(text, text)" returnType="real" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[word_similarity_dist_op]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="word_similarity_op(text, text)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[word_similarity_op]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
   </routines>
</database>
