openapi: 3.0.1
info:
  title: Terraware Seed Bank
  description: Local server API for seed banks
  license:
    name: MIT
  version: 0.1-SNAPSHOT
servers:
- url: http://localhost:32109
  description: Generated server url
tags:
- name: SeedBankApp
- name: DeviceManager
- name: GISApp
paths:
  /api/v1/devices:
    post:
      tags:
      - DeviceManager
      operationId: createDevice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDeviceRequestPayload'
        required: true
      responses:
        "200":
          description: The requested operation succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
  /api/v1/devices/{id}:
    get:
      tags:
      - DeviceManager
      summary: Gets the configuration of a single device.
      operationId: getDevice
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Device configuration retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDeviceResponsePayload'
        "404":
          description: The requested resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
    put:
      tags:
      - DeviceManager
      summary: Updates the configuration of an existing device.
      operationId: updateDevice
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDeviceRequestPayload'
        required: true
      responses:
        "200":
          description: Device configuration updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
        "404":
          description: The requested resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
  /api/v1/facility:
    get:
      tags:
      - Customer
      summary: List all accessible facilities
      description: List all the facilities the current user can access.
      operationId: listAllFacilities
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFacilitiesResponse'
  /api/v1/facility/{facilityId}:
    get:
      tags:
      - Customer
      summary: Gets information about a single facility
      operationId: getFacility
      parameters:
      - name: facilityId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFacilityResponse'
  /api/v1/facility/{facilityId}/devices:
    get:
      tags:
      - DeviceManager
      summary: Lists the configurations of all the devices at a facility.
      operationId: listFacilityDevices
      parameters:
      - name: facilityId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Successfully listed the facility's devices.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDeviceConfigsResponse'
        "404":
          description: The facility does not exist or is not accessible by the current
            user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
  /api/v1/gis/features:
    post:
      tags:
      - GISApp
      summary: Create a new feature.
      operationId: create_4
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFeatureRequestPayload'
        required: true
      responses:
        "200":
          description: "The feature was created successfully. Response includes fields\
            \ populated by the server, including the feature id."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateFeatureResponsePayload'
  /api/v1/gis/features/list/{layerId}:
    get:
      tags:
      - GISApp
      summary: List all features associated with a layer.
      operationId: list_1
      parameters:
      - name: skip
        in: query
        required: false
        schema:
          type: integer
          description: Number of entries to skip in search results. Used in conjunction
            with limit to paginate through large results. Default is 0 (don't skip
            any results).
          format: int32
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          description: Maximum number of entries to return. Used in conjunction with
            skip to paginate through large results. The system may impose a cap on
            this value.
          format: int32
      - name: layerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFeaturesResponsePayload'
  /api/v1/gis/features/{featureId}:
    get:
      tags:
      - GISApp
      operationId: read_2
      parameters:
      - name: featureId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFeatureResponsePayload'
        "404":
          description: The specified feature doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
    put:
      tags:
      - GISApp
      summary: Update an existing feature. Overwrites all fields. Does not allow a
        feature to be moved between layers (layerId cannot be updated)
      operationId: update_4
      parameters:
      - name: featureId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFeatureRequestPayload'
        required: true
      responses:
        "200":
          description: The feature was updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateFeatureResponsePayload'
        "404":
          description: The specified feature doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
    delete:
      tags:
      - GISApp
      summary: "Deletes an existing feature and all records that directly or indirectly\
        \ reference thatfeature. This includes but is not limited to plants, plant\
        \ observations, photos, and thumbnails."
      operationId: delete_1
      parameters:
      - name: featureId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteFeatureResponsePayload'
        "404":
          description: The specified feature doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
  /api/v1/gis/features/{featureId}/photos:
    get:
      tags:
      - GISApp
      operationId: listFeaturePhotos
      parameters:
      - name: featureId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFeaturePhotosResponsePayload'
    post:
      tags:
      - GISApp
      summary: Uploads a new photo of a feature.
      operationId: createFeaturePhoto
      parameters:
      - name: featureId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - file
              - metadata
              type: object
              properties:
                metadata:
                  $ref: '#/components/schemas/CreateFeaturePhotoRequestPayload'
                file:
                  type: string
                  format: binary
            encoding:
              file:
                contentType: image/jpeg
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateFeaturePhotoResponsePayload'
  /api/v1/gis/features/{featureId}/photos/{photoId}:
    get:
      tags:
      - GISApp
      summary: Gets the contents of a photo of a feature.
      description: "Optional maxWidth and maxHeight parameters may be included to\
        \ control the dimensions of the image; the server will scale the original\
        \ down as needed. If neither parameter is specified, the original full-size\
        \ image will be returned. The aspect ratio of the original image is maintained,\
        \ so the returned image may be smaller than the requested width and height.\
        \ If only maxWidth or only maxHeight is supplied, the other dimension will\
        \ be computed based on the original image's aspect ratio."
      operationId: downloadFeaturePhoto
      parameters:
      - name: featureId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: photoId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: maxWidth
        in: query
        required: false
        schema:
          type: integer
          description: "Maximum desired width in pixels. If neither this nor maxHeight\
            \ is specified, the full-sized original image will be returned. If this\
            \ is specified, an image no wider than this will be returned. The image\
            \ may be narrower than this value if needed to preserve the aspect ratio\
            \ of the original."
          format: int32
      - name: maxHeight
        in: query
        required: false
        schema:
          type: integer
          description: "Maximum desired height in pixels. If neither this nor maxWidth\
            \ is specified, the full-sized original image will be returned. If this\
            \ is specified, an image no taller than this will be returned. The image\
            \ may be shorter than this value if needed to preserve the aspect ratio\
            \ of the original."
          format: int32
      responses:
        "200":
          description: The photo was successfully retrieved.
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
        "404":
          description: "The accession does not exist, or does not have a photo with\
            \ the requested filename."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
    delete:
      tags:
      - GISApp
      summary: Deletes a photo of a feature.
      operationId: deleteFeaturePhoto
      parameters:
      - name: featureId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: photoId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Photo deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
        "404":
          description: The requested resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
  /api/v1/gis/features/{featureId}/photos/{photoId}/metadata:
    get:
      tags:
      - GISApp
      summary: Gets information about a photo of a feature.
      operationId: getFeaturePhotoMetadata
      parameters:
      - name: featureId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: photoId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Photo metadata retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFeaturePhotoMetadataResponsePayload'
        "404":
          description: The requested resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
  /api/v1/gis/layers:
    post:
      tags:
      - GISApp
      summary: Create a new layer.
      operationId: create_3
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLayerRequestPayload'
        required: true
      responses:
        "200":
          description: "The layer was created successfully. Response includes fields\
            \ populated by the server, including the layer id."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateLayerResponsePayload'
  /api/v1/gis/layers/list/{siteId}:
    get:
      tags:
      - GISApp
      operationId: list
      parameters:
      - name: siteId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLayersResponsePayload'
  /api/v1/gis/layers/{layerId}:
    get:
      tags:
      - GISApp
      operationId: read_1
      parameters:
      - name: layerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetLayerResponsePayload'
        "404":
          description: The specified layer doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
    put:
      tags:
      - GISApp
      summary: "Update an existing layer. Overwrites all fields, so they must all\
        \ be defined. Does not allow a layer to be moved between sites (siteId cannot\
        \ be updated)"
      operationId: update_3
      parameters:
      - name: layerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLayerRequestPayload'
        required: true
      responses:
        "200":
          description: The layer was updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateLayerResponsePayload'
        "404":
          description: The specified layer doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
    delete:
      tags:
      - GISApp
      operationId: delete
      parameters:
      - name: layerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteLayerResponsePayload'
        "404":
          description: The specified layer doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
  /api/v1/gis/plant_observations:
    post:
      tags:
      - GISApp
      summary: Creates a new plant observation. Feature id must reference an existing
        Plant. Plant observations can only be deleted as part of a feature deletion.
      operationId: create_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateObservationRequestPayload'
        required: true
      responses:
        "200":
          description: The plant observation was created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateObservationResponsePayload'
  /api/v1/gis/plant_observations/list/{featureId}:
    get:
      tags:
      - GISApp
      summary: Fetch a list of the plant observations associated with a plant.
      operationId: getList
      parameters:
      - name: featureId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListObservationsResponsePayload'
  /api/v1/gis/plant_observations/{plantObservationId}:
    get:
      tags:
      - GISApp
      operationId: get_1
      parameters:
      - name: plantObservationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetObservationResponsePayload'
        "404":
          description: The specified plant observation doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
    put:
      tags:
      - GISApp
      summary: Update an existing plant observation. Cannot update the feature id.
        Overwrites all other fields.
      operationId: update_2
      parameters:
      - name: plantObservationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateObservationRequestPayload'
        required: true
      responses:
        "200":
          description: The plant observation was updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateObservationResponsePayload'
        "404":
          description: The specified plant observation doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
  /api/v1/gis/plants:
    post:
      tags:
      - GISApp
      summary: Creates a new plant. Use the Features API to delete the plant.
      operationId: create_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePlantRequestPayload'
        required: true
      responses:
        "200":
          description: The plant was created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatePlantResponsePayload'
  /api/v1/gis/plants/list/summary/{layerId}:
    get:
      tags:
      - GISApp
      summary: Fetch a count of how many plants of each species exist in a layer.
        Can filter based on enteredTime. Plants that are not associated with any species
        will be grouped together and keyed on the sentinel value of -1.
      operationId: getPlantSummary
      parameters:
      - name: minEnteredTime
        in: query
        required: false
        schema:
          type: string
          format: date-time
      - name: maxEnteredTime
        in: query
        required: false
        schema:
          type: string
          format: date-time
      - name: layerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlantSummaryResponsePayload'
  /api/v1/gis/plants/list/{layerId}:
    get:
      tags:
      - GISApp
      summary: "Fetch a list of the plants in a layer. Can apply species, entered\
        \ time, and/or notes filters."
      operationId: getPlantsList
      parameters:
      - name: speciesName
        in: query
        required: false
        schema:
          type: string
      - name: minEnteredTime
        in: query
        required: false
        schema:
          type: string
          format: date-time
      - name: maxEnteredTime
        in: query
        required: false
        schema:
          type: string
          format: date-time
      - name: notes
        in: query
        required: false
        schema:
          type: string
      - name: layerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPlantsResponsePayload'
  /api/v1/gis/plants/{featureId}:
    get:
      tags:
      - GISApp
      operationId: get
      parameters:
      - name: featureId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPlantResponsePayload'
        "404":
          description: The specified plant doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
    put:
      tags:
      - GISApp
      summary: Update an existing plant. Overwrites all fields.
      operationId: update_1
      parameters:
      - name: featureId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePlantRequestPayload'
        required: true
      responses:
        "200":
          description: The plant was updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdatePlantResponsePayload'
        "404":
          description: The specified plant doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
  /api/v1/login:
    get:
      tags:
      - Customer
      summary: Redirects to a login page.
      description: "For interactive web applications, this can be used to redirect\
        \ the user to a login page to allow the application to make other API requests.\
        \ The login process will set a cookie that will authenticate to the API, and\
        \ will then redirect back to the application. One approach is to use this\
        \ in error response handlers: if an API request returns HTTP 401 Unauthorized,\
        \ set location.href to this endpoint and set \"redirect\" to the URL of the\
        \ page the user was on so they'll return there after logging in."
      operationId: login
      parameters:
      - name: redirect
        in: query
        required: true
        schema:
          type: string
          description: URL to redirect to after login. The list of valid redirect
            URLs is restricted; this must be the URL of a Terraware web application.
      responses:
        "302":
          description: "Redirects to a login page. After login, the user will be redirected\
            \ back to the URL specified in the \"redirect\" parameter."
  /api/v1/organization:
    get:
      tags:
      - Customer
      summary: List all organizations
      description: List all organizations the user can access.
      operationId: listAll_1
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOrganizationsResponse'
  /api/v1/organizations/{organizationId}/projects:
    get:
      tags:
      - Customer
      summary: Gets a list of the projects in an organization.
      description: Only projects that are accessible by the current user are included.
      operationId: listOrganizationProjects
      parameters:
      - name: organizationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Projects retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProjectsResponsePayload'
        "404":
          description: "The user is not a member of the organization, or the organization\
            \ does not exist."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
  /api/v1/projects:
    get:
      tags:
      - Customer
      summary: Gets a list of all projects the user can access.
      operationId: listAllProjects
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProjectsResponsePayload'
    post:
      tags:
      - Customer
      summary: Creates a new project in an existing organization.
      operationId: createProject
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectRequestPayload'
        required: true
      responses:
        "200":
          description: Project created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProjectResponsePayload'
  /api/v1/projects/{id}:
    get:
      tags:
      - Customer
      summary: Gets information about a single project.
      operationId: getProject
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Project retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProjectResponsePayload'
        "404":
          description: The requested resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
    put:
      tags:
      - Customer
      operationId: updateProject
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectRequestPayload'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
  /api/v1/projects/{projectId}/sites:
    get:
      tags:
      - Customer
      summary: Gets all of the sites associated with a project.
      operationId: listProjectSites
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: srid
        in: query
        required: false
        schema:
          type: integer
          description: Spatial reference system identifier to use for locations.
          format: int32
          default: 4326
      responses:
        "200":
          description: Retrieved list of sites.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSitesResponsePayload'
        "404":
          description: The project does not exist or is not accessible.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
  /api/v1/seedbank/accession:
    post:
      tags:
      - SeedBankApp
      summary: Create a new accession.
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccessionRequestPayload'
        required: true
      responses:
        "200":
          description: "The accession was created successfully. Response includes\
            \ fields populated by the server, including the accession number and ID."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAccessionResponsePayload'
  /api/v1/seedbank/accession/{id}:
    get:
      tags:
      - SeedBankApp
      summary: Retrieve an existing accession.
      operationId: read
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAccessionResponsePayload'
        "404":
          description: The requested resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
    put:
      tags:
      - SeedBankApp
      summary: Update an existing accession.
      operationId: update
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: simulate
        in: query
        required: false
        schema:
          type: boolean
          description: "If true, do not actually save the accession; just return the\
            \ result that would have been returned if it had been saved."
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAccessionRequestPayload'
        required: true
      responses:
        "200":
          description: The accession was updated successfully. Response includes fields
            populated or modified by the server as a result of the update.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateAccessionResponsePayload'
        "404":
          description: The specified accession doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
  /api/v1/seedbank/accession/{id}/photo:
    get:
      tags:
      - SeedBankApp
      summary: List all the available photos for an accession.
      operationId: listPhotos
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: The accession's photos are listed in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPhotosResponsePayload'
        "404":
          description: The accession does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
  /api/v1/seedbank/accession/{id}/photo/{photoFilename}:
    get:
      tags:
      - SeedBankApp
      summary: Retrieve a specific photo from an accession.
      description: "Optional maxWidth and maxHeight parameters may be included to\
        \ control the dimensions of the image; the server will scale the original\
        \ down as needed. If neither parameter is specified, the original full-size\
        \ image will be returned. The aspect ratio of the original image is maintained,\
        \ so the returned image may be smaller than the requested width and height.\
        \ If only maxWidth or only maxHeight is supplied, the other dimension will\
        \ be computed based on the original image's aspect ratio."
      operationId: getPhoto
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: photoFilename
        in: path
        required: true
        schema:
          type: string
      - name: maxWidth
        in: query
        required: false
        schema:
          type: integer
          description: "Maximum desired width in pixels. If neither this nor maxHeight\
            \ is specified, the full-sized original image will be returned. If this\
            \ is specified, an image no wider than this will be returned. The image\
            \ may be narrower than this value if needed to preserve the aspect ratio\
            \ of the original."
          format: int32
      - name: maxHeight
        in: query
        required: false
        schema:
          type: integer
          description: "Maximum desired height in pixels. If neither this nor maxWidth\
            \ is specified, the full-sized original image will be returned. If this\
            \ is specified, an image no taller than this will be returned. The image\
            \ may be shorter than this value if needed to preserve the aspect ratio\
            \ of the original."
          format: int32
      responses:
        "200":
          description: The photo was successfully retrieved.
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
        "404":
          description: "The accession does not exist, or does not have a photo with\
            \ the requested filename."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
    post:
      tags:
      - SeedBankApp
      summary: Upload a new photo for an accession.
      operationId: uploadPhoto
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: photoFilename
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - file
              - metadata
              type: object
              properties:
                file:
                  type: string
                  format: binary
                metadata:
                  $ref: '#/components/schemas/UploadPhotoMetadataPayload'
            encoding:
              file:
                contentType: image/jpeg
      responses:
        "200":
          description: The requested operation succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
        "404":
          description: The specified accession does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
        "409":
          description: The requested photo already exists on the accession.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
  /api/v1/seedbank/clock:
    get:
      tags:
      - SeedBankApp
      summary: Get the server's current date and time.
      description: "In test environments, the clock can be advanced artificially,\
        \ which will cause it to differ from the real-world date and time."
      operationId: getCurrentTime
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCurrentTimeResponsePayload'
  /api/v1/seedbank/clock/advance:
    post:
      tags:
      - SeedBankApp
      summary: Advance the server's clock.
      description: Advancing the clock causes any scheduled processes to run. Subsequent
        GET requests to read the current time will take the advancement into account.
        Only supported in test and development environments.
      operationId: advanceClock
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdvanceClockRequestPayload'
        required: true
      responses:
        "200":
          description: The clock has been advanced. The response includes the newly-adjusted
            time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCurrentTimeResponsePayload'
  /api/v1/seedbank/log/{tag}:
    post:
      tags:
      - SeedBankApp
      operationId: recordLogMessage
      parameters:
      - name: tag
        in: path
        required: true
        schema:
          type: string
          description: Source of the log message.
          example: seedbank-app
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: object
                description: "Values to log. This can be an arbitrary bucket of key/value\
                  \ pairs, but the 'level' field should be set to one of 'debug',\
                  \ 'info', 'warn', or 'error'. Default level is 'info'. If there\
                  \ is a human-readable message, it should go in the 'message' field."
              description: "Values to log. This can be an arbitrary bucket of key/value\
                \ pairs, but the 'level' field should be set to one of 'debug', 'info',\
                \ 'warn', or 'error'. Default level is 'info'. If there is a human-readable\
                \ message, it should go in the 'message' field."
        required: true
      responses:
        "200":
          description: OK
  /api/v1/seedbank/notification:
    get:
      tags:
      - SeedBankApp
      summary: Get a list of recent notifications
      operationId: listAll
      parameters:
      - name: facilityId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      - name: since
        in: query
        description: Don't return notifications older than this; default is 1 month
          ago
        required: false
        schema:
          type: string
          format: date-time
      - name: limit
        in: query
        description: Return at most this many notifications; default is no limit
        required: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Notifications in reverse time order (newest first).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationListResponse'
  /api/v1/seedbank/notification/all/markRead:
    post:
      tags:
      - SeedBankApp
      summary: Mark all notifications as read.
      operationId: markAllRead
      responses:
        "200":
          description: All notifications have been marked as read.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
  /api/v1/seedbank/notification/all/markUnread:
    post:
      tags:
      - SeedBankApp
      summary: Mark all notifications as unread.
      description: For development and testing of notifications. Not available in
        production.
      operationId: markAllUnread
      responses:
        "200":
          description: All notifications have been marked as unread.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
  /api/v1/seedbank/notification/{id}/markRead:
    post:
      tags:
      - SeedBankApp
      summary: Mark a specific notification as read.
      operationId: markRead
      parameters:
      - name: id
        in: path
        description: ID of notification to mark as read
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Notification has been marked as read.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
        "404":
          description: The requested notification ID was not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
  /api/v1/seedbank/search:
    post:
      tags:
      - SeedBankApp
      summary: Searches for accessions based on filter criteria.
      operationId: search
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequestPayload'
            examples:
              example1:
                description: Search for all accessions of species "Species Name" whose
                  remaining seeds weigh between 100 and 200 milligrams or that have
                  between 30 and 40 seeds remaining.
                value:
                  fields:
                  - accessionNumber
                  - remainingQuantity
                  - remainingUnits
                  search:
                    operation: and
                    children:
                    - operation: field
                      field: species
                      values:
                      - Species Name
                    - operation: or
                      children:
                      - operation: field
                        field: remainingGrams
                        type: Range
                        values:
                        - 100 Milligrams
                        - 200 Milligrams
                      - operation: and
                        children:
                        - operation: field
                          field: remainingUnits
                          values:
                          - Seeds
                        - operation: field
                          field: remainingQuantity
                          type: Range
                          values:
                          - "30"
                          - "40"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponsePayload'
  /api/v1/seedbank/search/export:
    post:
      tags:
      - SeedBankApp
      summary: Exports the results of a search as a downloadable CSV file.
      operationId: export
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportRequestPayload'
        required: true
      responses:
        "200":
          description: Export succeeded.
          content:
            text/csv:
              schema:
                type: string
                format: binary
  /api/v1/seedbank/summary/{facilityId}:
    get:
      tags:
      - SeedBankApp
      summary: Get summary statistics about a seed bank
      operationId: getSummary
      parameters:
      - name: facilityId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SummaryResponse'
  /api/v1/seedbank/timeseries/create:
    post:
      tags:
      - DeviceManager
      summary: Defines a list of timeseries for one or more devices.
      description: "If there are existing timeseries with the same names, the old\
        \ definitions will be overwritten."
      operationId: createMultipleTimeseries
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTimeseriesRequestPayload'
        required: true
      responses:
        "200":
          description: The requested operation succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
  /api/v1/seedbank/timeseries/values:
    post:
      tags:
      - DeviceManager
      summary: Records new values for one or more timeseries.
      operationId: recordTimeseriesValues
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecordTimeseriesValuesRequestPayload'
        required: true
      responses:
        "200":
          description: "Successfully processed the request. Note that this status\
            \ will be returned even if the server was unable to record some of the\
            \ values. In that case, the failed values will be returned in the response\
            \ payload."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecordTimeseriesValuesResponsePayload'
  /api/v1/seedbank/values:
    post:
      tags:
      - SeedBankApp
      summary: List the values of a set of search fields for a set of accessions matching
        certain filter criteria.
      operationId: listFieldValues
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListFieldValuesRequestPayload'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFieldValuesResponsePayload'
  /api/v1/seedbank/values/all:
    post:
      tags:
      - SeedBankApp
      summary: List the possible values of a set of search fields.
      operationId: listAllFieldValues
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListAllFieldValuesRequestPayload'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAllFieldValuesResponsePayload'
  /api/v1/seedbank/values/species:
    get:
      tags:
      - SeedBankApp
      description: Use /api/v1/species instead.
      operationId: listSpecies
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSpeciesResponsePayload'
      deprecated: true
    post:
      tags:
      - SeedBankApp
      description: Use /api/v1/species instead.
      operationId: createSpecies
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSpeciesRequestPayload'
        required: true
      responses:
        "200":
          description: Species created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSpeciesResponsePayload'
        "409":
          description: A species with the requested name already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSpeciesResponsePayload'
      deprecated: true
  /api/v1/seedbank/values/species/{id}:
    post:
      tags:
      - SeedBankApp
      description: Use /api/v1/species instead.
      operationId: updateSpecies
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSpeciesRequestPayload'
        required: true
      responses:
        "200":
          description: The requested operation succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
        "404":
          description: The requested resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
      deprecated: true
  /api/v1/seedbank/values/storageLocation/{facilityId}:
    get:
      tags:
      - SeedBankApp
      operationId: getStorageLocations
      parameters:
      - name: facilityId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageLocationsResponsePayload'
  /api/v1/sites:
    get:
      tags:
      - Customer
      summary: Gets all of the sites the current user can access.
      operationId: listAllSites
      parameters:
      - name: srid
        in: query
        required: false
        schema:
          type: integer
          description: Spatial reference system identifier to use for locations.
          format: int32
          default: 4326
      responses:
        "200":
          description: Retrieved list of sites.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSitesResponsePayload'
  /api/v1/sites/{siteId}:
    get:
      tags:
      - Customer
      summary: Gets information about a particular site.
      operationId: getSite
      parameters:
      - name: siteId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: srid
        in: query
        required: false
        schema:
          type: integer
          description: Spatial reference system identifier to use for locations.
          format: int32
          default: 4326
      responses:
        "200":
          description: Site retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSiteResponsePayload'
        "404":
          description: The requested resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
  /api/v1/species:
    get:
      tags:
      - GISApp
      summary: Lists all known species.
      operationId: speciesList
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpeciesListResponsePayload'
    post:
      tags:
      - GISApp
      summary: Creates a new species.
      operationId: speciesCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpeciesRequestPayload'
        required: true
      responses:
        "200":
          description: Species created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpeciesCreateResponsePayload'
        "409":
          description: A species with the requested name already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpeciesCreateResponsePayload'
  /api/v1/species/names:
    get:
      tags:
      - GISApp
      summary: Lists all species names.
      operationId: speciesNamesListAll
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpeciesNamesListResponsePayload'
    post:
      tags:
      - GISApp
      summary: Adds a new name for an existing species.
      operationId: speciesNameCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpeciesNameRequestPayload'
        required: true
      responses:
        "200":
          description: Species name added.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpeciesNameCreateResponsePayload'
        "404":
          description: The species does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
        "409":
          description: The species already has the requested name.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpeciesNameCreateResponsePayload'
  /api/v1/species/names/{speciesNameId}:
    get:
      tags:
      - GISApp
      description: Gets information about a single species name.
      operationId: speciesNameGet
      parameters:
      - name: speciesNameId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Species name retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpeciesNameGetResponsePayload'
        "404":
          description: The requested resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
    put:
      tags:
      - GISApp
      description: Updates one of the names of a species.
      operationId: speciesNameUpdate
      parameters:
      - name: speciesNameId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpeciesNameRequestPayload'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
    delete:
      tags:
      - GISApp
      description: Deletes one of the secondary names of a species.
      operationId: speciesNameDelete
      parameters:
      - name: speciesNameId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Species name deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
        "404":
          description: The requested resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
        "409":
          description: Cannot delete the primary name of a species.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
  /api/v1/species/{speciesId}:
    get:
      tags:
      - GISApp
      summary: Gets information about a single species.
      operationId: speciesRead
      parameters:
      - name: speciesId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Species retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpeciesGetResponsePayload'
        "404":
          description: The requested resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
    put:
      tags:
      - GISApp
      summary: Updates an existing species.
      operationId: speciesUpdate
      parameters:
      - name: speciesId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpeciesRequestPayload'
        required: true
      responses:
        "200":
          description: Species updated or merged with an existing species.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
        "404":
          description: The requested resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
    delete:
      tags:
      - GISApp
      summary: Delete an existing species.
      operationId: speciesDelete
      parameters:
      - name: speciesId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Species deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
        "404":
          description: The requested resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
        "409":
          description: Cannot delete the species because it is currently in use.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
  /api/v1/species/{speciesId}/names:
    get:
      tags:
      - GISApp
      operationId: speciesNamesList
      parameters:
      - name: speciesId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Species names retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpeciesNamesListResponsePayload'
        "404":
          description: The species does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
components:
  schemas:
    AccessionPayload:
      required:
      - accessionNumber
      - active
      - facilityId
      - id
      - state
      type: object
      properties:
        accessionNumber:
          type: string
          description: "Server-generated human-readable identifier for the accession.\
            \ This is unique within a single seed bank, but different seed banks may\
            \ have accessions with the same number."
        active:
          type: string
          description: Server-calculated active indicator. This is based on the accession's
            state.
          enum:
          - Inactive
          - Active
        bagNumbers:
          uniqueItems: true
          type: array
          items:
            type: string
        collectedDate:
          type: string
          format: date
        deviceInfo:
          $ref: '#/components/schemas/DeviceInfoPayload'
        cutTestSeedsCompromised:
          type: integer
          format: int32
        cutTestSeedsEmpty:
          type: integer
          format: int32
        cutTestSeedsFilled:
          type: integer
          format: int32
        dryingEndDate:
          type: string
          format: date
        dryingMoveDate:
          type: string
          format: date
        dryingStartDate:
          type: string
          format: date
        endangered:
          type: string
          enum:
          - "No"
          - "Yes"
          - Unsure
        environmentalNotes:
          type: string
        estimatedSeedCount:
          type: integer
          format: int32
        facilityId:
          type: integer
          format: int64
        family:
          type: string
        fieldNotes:
          type: string
        founderId:
          type: string
        geolocations:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Geolocation'
        germinationTests:
          type: array
          items:
            $ref: '#/components/schemas/GerminationTestPayload'
        germinationTestTypes:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
            - Lab
            - Nursery
        id:
          type: integer
          description: "Server-generated unique identifier for the accession. This\
            \ is unique across all seed banks, but is not suitable for display to\
            \ end users."
          format: int64
        initialQuantity:
          description: Initial size of accession. The units of this value must match
            the measurement type in "processingMethod".
          allOf:
          - $ref: '#/components/schemas/SeedQuantityPayload'
        landowner:
          type: string
        latestGerminationTestDate:
          type: string
          format: date
        latestViabilityPercent:
          type: integer
          format: int32
        numberOfTrees:
          type: integer
          format: int32
        nurseryStartDate:
          type: string
          format: date
        photoFilenames:
          type: array
          items:
            type: string
        primaryCollector:
          type: string
        processingMethod:
          type: string
          enum:
          - Count
          - Weight
        processingNotes:
          type: string
        processingStaffResponsible:
          type: string
        processingStartDate:
          type: string
          format: date
        rare:
          type: string
          enum:
          - "No"
          - "Yes"
          - Unsure
        receivedDate:
          type: string
          format: date
        remainingQuantity:
          description: Number or weight of seeds remaining for withdrawal and testing.
            Calculated by the server when the accession's total size is known.
          allOf:
          - $ref: '#/components/schemas/SeedQuantityPayload'
        secondaryCollectors:
          uniqueItems: true
          type: array
          items:
            type: string
        siteLocation:
          type: string
        source:
          type: string
          description: Which application this accession originally came from. This
            is currently based on the presence of the deviceInfo field.
          enum:
          - Web
          - SeedCollectorApp
        sourcePlantOrigin:
          type: string
          enum:
          - Wild
          - Outplant
        species:
          type: string
        speciesId:
          type: integer
          description: Server-generated unique ID of the species.
          format: int64
        state:
          type: string
          description: Server-calculated accession state. Can change due to modifications
            to accession data or based on passage of time.
          enum:
          - Pending
          - Processing
          - Processed
          - Drying
          - Dried
          - In Storage
          - Withdrawn
          - Nursery
        storageCondition:
          type: string
          enum:
          - Refrigerator
          - Freezer
        storageLocation:
          type: string
        storagePackets:
          type: integer
          format: int32
        storageNotes:
          type: string
        storageStaffResponsible:
          type: string
        storageStartDate:
          type: string
          format: date
        subsetCount:
          type: integer
          format: int32
        subsetWeight:
          description: "Weight of subset of seeds. Units must be a weight measurement,\
            \ not \"Seeds\"."
          allOf:
          - $ref: '#/components/schemas/SeedQuantityPayload'
        targetStorageCondition:
          type: string
          enum:
          - Refrigerator
          - Freezer
        totalPastWithdrawalQuantity:
          description: "Total quantity of all past withdrawals, including germination\
            \ tests."
          allOf:
          - $ref: '#/components/schemas/SeedQuantityPayload'
        totalScheduledNonTestQuantity:
          description: "Total quantity of scheduled withdrawals, not counting germination\
            \ tests."
          allOf:
          - $ref: '#/components/schemas/SeedQuantityPayload'
        totalScheduledTestQuantity:
          description: Total quantity of scheduled withdrawals for germination tests.
          allOf:
          - $ref: '#/components/schemas/SeedQuantityPayload'
        totalScheduledWithdrawalQuantity:
          description: "Total quantity of scheduled withdrawals, including germination\
            \ tests."
          allOf:
          - $ref: '#/components/schemas/SeedQuantityPayload'
        totalViabilityPercent:
          type: integer
          format: int32
        totalWithdrawalQuantity:
          description: "Total quantity of all past and scheduled withdrawals, including\
            \ germination tests."
          allOf:
          - $ref: '#/components/schemas/SeedQuantityPayload'
        withdrawals:
          type: array
          items:
            $ref: '#/components/schemas/WithdrawalPayload'
    AdvanceClockRequestPayload:
      required:
      - days
      type: object
      properties:
        days:
          minimum: 1
          type: integer
          format: int32
    AllFieldValuesPayload:
      required:
      - partial
      - values
      type: object
      properties:
        values:
          type: array
          description: "All the values this field could possibly have, whether or\
            \ not any accessions have them. For fields that allow the user to enter\
            \ arbitrary values, this is equivalent to querying the list of values\
            \ without any filter criteria, that is, it's a list of all the user-entered\
            \ values."
          items:
            type: string
        partial:
          type: boolean
          description: "If true, the list of values is too long to return in its entirety\
            \ and \"values\" is a partial list."
    AndNodePayload:
      required:
      - children
      type: object
      description: "Search criterion that matches results that meet all of a set of\
        \ other search criteria. That is, if the list of children is x, y, and z,\
        \ this will require x AND y AND z."
      allOf:
      - $ref: '#/components/schemas/SearchNodePayload'
      - type: object
        properties:
          children:
            minItems: 1
            type: array
            items:
              $ref: '#/components/schemas/SearchNodePayload'
    CRS:
      required:
      - properties
      - type
      type: object
      properties:
        type:
          type: string
          enum:
          - name
        properties:
          $ref: '#/components/schemas/CRSProperties'
      description: "Coordinate reference system used for X and Y coordinates in this\
        \ geometry. By default, coordinates are in WGS 84, with longitude and latitude\
        \ in degrees. In that case, this element is not present. Otherwise, it specifies\
        \ which coordinate system to use."
    CRSProperties:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: "Name of the coordinate reference system. This must be in the\
            \ form EPSG:nnnn where nnnn is the numeric identifier of a coordinate\
            \ system in the EPSG dataset. The default is Longitude/Latitude EPSG:4326,\
            \ which is the coordinate system +for GeoJSON."
          example: EPSG:4326
          externalDocs:
            url: https://en.wikipedia.org/wiki/EPSG_Geodetic_Parameter_Dataset
    CreateAccessionRequestPayload:
      type: object
      properties:
        bagNumbers:
          uniqueItems: true
          type: array
          writeOnly: true
          items:
            type: string
        collectedDate:
          type: string
          format: date
          writeOnly: true
        deviceInfo:
          $ref: '#/components/schemas/DeviceInfoPayload'
        endangered:
          type: string
          writeOnly: true
          enum:
          - "No"
          - "Yes"
          - Unsure
        environmentalNotes:
          type: string
          writeOnly: true
        facilityId:
          type: integer
          format: int64
          writeOnly: true
        family:
          type: string
          writeOnly: true
        fieldNotes:
          type: string
          writeOnly: true
        founderId:
          type: string
          writeOnly: true
        geolocations:
          uniqueItems: true
          type: array
          writeOnly: true
          items:
            $ref: '#/components/schemas/Geolocation'
        germinationTestTypes:
          uniqueItems: true
          type: array
          writeOnly: true
          items:
            type: string
            enum:
            - Lab
            - Nursery
        landowner:
          type: string
          writeOnly: true
        numberOfTrees:
          type: integer
          format: int32
          writeOnly: true
        primaryCollector:
          type: string
          writeOnly: true
        rare:
          type: string
          writeOnly: true
          enum:
          - "No"
          - "Yes"
          - Unsure
        receivedDate:
          type: string
          format: date
          writeOnly: true
        secondaryCollectors:
          uniqueItems: true
          type: array
          writeOnly: true
          items:
            type: string
        siteLocation:
          type: string
          writeOnly: true
        sourcePlantOrigin:
          type: string
          writeOnly: true
          enum:
          - Wild
          - Outplant
        species:
          type: string
          writeOnly: true
    CreateAccessionResponsePayload:
      required:
      - accession
      - status
      type: object
      properties:
        accession:
          $ref: '#/components/schemas/AccessionPayload'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    CreateDeviceRequestPayload:
      required:
      - facilityId
      - make
      - model
      - name
      - type
      type: object
      properties:
        facilityId:
          type: integer
          description: Identifier of facility where this device is located.
          format: int64
        name:
          type: string
          description: Name of this device.
          example: BMU-1
        type:
          type: string
          description: High-level type of the device. Device manager may use this
            in conjunction with the make and model to determine which metrics to report.
          example: inverter
        make:
          type: string
          description: Name of device manufacturer.
          example: InHand Networks
        model:
          type: string
          description: Model number or model name of the device.
          example: IR915L
        protocol:
          type: string
          description: Device manager protocol name.
          example: modbus
        address:
          type: string
          description: "Protocol-specific address of device, e.g., an IP address or\
            \ a Bluetooth device ID."
          example: 192.168.1.100
        port:
          type: integer
          description: Port number if relevant for the protocol.
          format: int32
          example: 50000
        settings:
          type: object
          description: Protocol- and device-specific custom settings. This is an arbitrary
            JSON object; the exact settings depend on the device type.
        pollingInterval:
          type: integer
          description: "How often the device manager should poll for status updates,\
            \ in seconds."
          format: int32
        parentId:
          type: integer
          description: "ID of parent device such as a hub or gateway, if any. The\
            \ parent device must exist."
          format: int64
    CreateFeaturePhotoRequestPayload:
      required:
      - capturedTime
      type: object
      properties:
        capturedTime:
          type: string
          format: date-time
        heading:
          type: number
          description: Compass heading of phone/camera when photo was taken.
          format: double
        location:
          $ref: '#/components/schemas/Point'
        orientation:
          type: number
          description: Orientation of phone/camera when photo was taken.
          format: double
        gpsHorizAccuracy:
          type: number
          description: GPS horizontal accuracy in meters.
          format: double
        gpsVertAccuracy:
          type: number
          description: GPS vertical (altitude) accuracy in meters.
          format: double
    CreateFeaturePhotoResponsePayload:
      required:
      - photoId
      - status
      type: object
      properties:
        photoId:
          type: integer
          format: int64
        status:
          $ref: '#/components/schemas/SuccessOrError'
    CreateFeatureRequestPayload:
      required:
      - layerId
      type: object
      properties:
        layerId:
          type: integer
          format: int64
        geom:
          $ref: '#/components/schemas/Geometry'
        gpsHorizAccuracy:
          type: number
          format: double
        gpsVertAccuracy:
          type: number
          format: double
        attrib:
          type: string
        notes:
          type: string
        enteredTime:
          type: string
          format: date-time
    CreateFeatureResponsePayload:
      required:
      - feature
      - status
      type: object
      properties:
        feature:
          $ref: '#/components/schemas/FeatureResponse'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    CreateLayerRequestPayload:
      required:
      - hidden
      - layerType
      - proposed
      - siteId
      type: object
      properties:
        siteId:
          type: integer
          format: int64
        layerType:
          type: string
          enum:
          - Aerial Photos
          - Surface Color Map
          - Terrain Color Map
          - Boundaries
          - Plants Planted
          - Plants Existing
          - Irrigation
          - Infrastructure
          - Partner Input
          - Restoration Zones
          - Site Prep
          - Map notes
        tileSetName:
          type: string
        proposed:
          type: boolean
        hidden:
          type: boolean
    CreateLayerResponsePayload:
      required:
      - layer
      - status
      type: object
      properties:
        layer:
          $ref: '#/components/schemas/LayerResponse'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    CreateObservationRequestPayload:
      required:
      - featureId
      - timestamp
      type: object
      properties:
        featureId:
          type: integer
          format: int64
        timestamp:
          type: string
          format: date-time
        healthState:
          type: string
          enum:
          - Good
          - Moderate
          - Poor
          - Dead
        flowers:
          type: boolean
        seeds:
          type: boolean
        pests:
          type: string
        height:
          type: number
          description: Height in meters
          format: double
        diameterAtBreastHeight:
          type: number
          description: Diameter at breast height in meters
          format: double
    CreateObservationResponsePayload:
      required:
      - resp
      - status
      type: object
      properties:
        resp:
          $ref: '#/components/schemas/ObservationResponse'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    CreatePlantRequestPayload:
      required:
      - featureId
      type: object
      properties:
        featureId:
          type: integer
          format: int64
        label:
          type: string
        speciesId:
          type: integer
          format: int64
        naturalRegen:
          type: boolean
        datePlanted:
          type: string
          format: date
    CreatePlantResponsePayload:
      required:
      - plant
      - status
      type: object
      properties:
        plant:
          $ref: '#/components/schemas/PlantResponse'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    CreateProjectRequestPayload:
      required:
      - name
      - organizationId
      type: object
      properties:
        name:
          type: string
        organizationId:
          type: integer
          format: int64
    CreateSpeciesRequestPayload:
      required:
      - name
      type: object
      properties:
        name:
          type: string
    CreateSpeciesResponsePayload:
      required:
      - details
      - status
      type: object
      properties:
        details:
          $ref: '#/components/schemas/SpeciesDetails'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    CreateTimeseriesEntry:
      required:
      - deviceId
      - timeseriesName
      - type
      type: object
      properties:
        deviceId:
          type: integer
          description: ID of device that produces this timeseries.
          format: int64
        timeseriesName:
          type: string
          description: "Name of this timeseries. Duplicate timeseries names for the\
            \ same device aren't allowed, but different devices can have timeseries\
            \ with the same name."
        type:
          type: string
          enum:
          - Numeric
          - Text
        decimalPlaces:
          type: integer
          description: "Number of significant fractional digits (after the decimal\
            \ point), if this is a timeseries with non-integer numeric values."
          format: int32
        units:
          type: string
          description: Units of measure for values in this timeseries.
          example: volts
    CreateTimeseriesRequestPayload:
      required:
      - timeseries
      type: object
      properties:
        timeseries:
          type: array
          items:
            $ref: '#/components/schemas/CreateTimeseriesEntry'
    DeleteFeatureResponsePayload:
      required:
      - id
      - status
      type: object
      properties:
        id:
          type: integer
          format: int64
        status:
          $ref: '#/components/schemas/SuccessOrError'
    DeleteLayerResponse:
      required:
      - id
      - siteId
      type: object
      properties:
        id:
          type: integer
          format: int64
        siteId:
          type: integer
          format: int64
    DeleteLayerResponsePayload:
      required:
      - layer
      - status
      type: object
      properties:
        layer:
          $ref: '#/components/schemas/DeleteLayerResponse'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    DeviceConfig:
      required:
      - facilityId
      - id
      - make
      - model
      - name
      - type
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier of this device.
          format: int64
        facilityId:
          type: integer
          description: Identifier of facility where this device is located.
          format: int64
        name:
          type: string
          description: Name of this device.
          example: BMU-1
        type:
          type: string
          description: High-level type of the device. Device manager may use this
            in conjunction with the make and model to determine which metrics to report.
          example: inverter
        make:
          type: string
          description: Name of device manufacturer.
          example: InHand Networks
        model:
          type: string
          description: Model number or model name of the device.
          example: IR915L
        protocol:
          type: string
          description: Device manager protocol name.
          example: modbus
        address:
          type: string
          description: "Protocol-specific address of device, e.g., an IP address or\
            \ a Bluetooth device ID."
          example: 192.168.1.100
        port:
          type: integer
          description: Port number if relevant for the protocol.
          format: int32
          example: 50000
        settings:
          type: object
          description: Protocol- and device-specific custom settings. This is an arbitrary
            JSON object; the exact settings depend on the device type.
        pollingInterval:
          type: integer
          description: "How often the device manager should poll for status updates,\
            \ in seconds."
          format: int32
        parentId:
          type: integer
          description: "ID of parent device such as a hub or gateway, if any."
          format: int64
    DeviceInfoPayload:
      type: object
      properties:
        appBuild:
          type: string
          description: "Build number of application that is submitting the accession,\
            \ e.g., from React Native getBuildId()"
        appName:
          type: string
          description: Name of application
          example: Seed Collector
        brand:
          type: string
          description: "Brand of device, e.g., from React Native getBrand()."
          example: Samsung
        model:
          type: string
          description: "Model of device hardware, e.g., from React Native getDeviceId()."
        name:
          type: string
          description: "Name the user has assigned to the device, e.g., from React\
            \ Native getDeviceName()."
          example: Carlos's iPhone
        osType:
          type: string
          description: "Type of operating system, e.g., from React Native getSystemName()."
          example: Android
        osVersion:
          type: string
          description: "Version of operating system, e.g., from React Native getSystemVersion()."
          example: 7.1.1
        uniqueId:
          type: string
          description: "Unique identifier of the hardware device, e.g., from React\
            \ Native getUniqueId()."
      description: Details about the device and the application that created the accession.
        All these values are optional and most of them are platform-dependent.
    ErrorDetails:
      required:
      - message
      type: object
      properties:
        message:
          type: string
    ExportRequestPayload:
      required:
      - facilityId
      - fields
      type: object
      properties:
        facilityId:
          type: integer
          format: int64
        fields:
          type: array
          items:
            $ref: '#/components/schemas/SearchField'
        sortOrder:
          type: array
          items:
            $ref: '#/components/schemas/SearchSortOrderElement'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/SearchFilter'
        search:
          oneOf:
          - $ref: '#/components/schemas/AndNodePayload'
          - $ref: '#/components/schemas/FieldNodePayload'
          - $ref: '#/components/schemas/NotNodePayload'
          - $ref: '#/components/schemas/OrNodePayload'
    FacilityPayload:
      required:
      - id
      - name
      - role
      - siteId
      - type
      type: object
      properties:
        id:
          type: integer
          format: int64
        siteId:
          type: integer
          format: int64
        name:
          type: string
        type:
          type: string
          enum:
          - Seed Bank
          - Desalination
          - Reverse Osmosis
        role:
          type: string
          description: The name of the role the current user has at the facility.
    FeaturePhoto:
      required:
      - capturedTime
      - contentType
      - featureId
      - fileName
      - id
      - size
      type: object
      properties:
        capturedTime:
          type: string
          format: date-time
        contentType:
          type: string
        featureId:
          type: integer
          format: int64
        fileName:
          type: string
        gpsHorizAccuracy:
          type: number
          description: GPS horizontal accuracy in meters.
          format: double
        gpsVertAccuracy:
          type: number
          description: GPS vertical (altitude) accuracy in meters.
          format: double
        heading:
          type: number
          description: Compass heading of phone/camera when photo was taken.
          format: double
        id:
          type: integer
          format: int64
        location:
          $ref: '#/components/schemas/Point'
        orientation:
          type: number
          description: Orientation of phone/camera when photo was taken.
          format: double
        size:
          type: integer
          format: int64
    FeatureResponse:
      required:
      - id
      - layerId
      type: object
      properties:
        id:
          type: integer
          format: int64
        layerId:
          type: integer
          format: int64
        geom:
          $ref: '#/components/schemas/Geometry'
        gpsHorizAccuracy:
          type: number
          format: double
        gpsVertAccuracy:
          type: number
          format: double
        attrib:
          type: string
        notes:
          type: string
        enteredTime:
          type: string
          format: date-time
      description: Describes a map feature. The coordinate reference system of the
        "geom" field will be longitude/latitude EPSG:4326.
    FieldNodePayload:
      required:
      - field
      - type
      - values
      type: object
      allOf:
      - $ref: '#/components/schemas/SearchNodePayload'
      - type: object
        properties:
          field:
            $ref: '#/components/schemas/SearchField'
          values:
            minItems: 1
            type: array
            description: "List of values to match. For exact and fuzzy searches, a\
              \ list of at least one value to search for; the list may include null\
              \ to match accessions where the field does not have a value. For range\
              \ searches, the list must contain exactly two values, the minimum and\
              \ maximum; one of the values may be null to search for all values above\
              \ a minimum or below a maximum."
            items:
              type: string
              nullable: true
          type:
            type: string
            enum:
            - Exact
            - Fuzzy
            - Range
    FieldValuesPayload:
      required:
      - partial
      - values
      type: object
      properties:
        values:
          type: array
          description: "List of values in the matching accessions. If there are accessions\
            \ where the field has no value, this list will contain null (an actual\
            \ null value, not the string \"null\")."
          items:
            type: string
            nullable: true
        partial:
          type: boolean
          description: "If true, the list of values is too long to return in its entirety\
            \ and \"values\" is a partial list."
    Geolocation:
      required:
      - latitude
      - longitude
      type: object
      properties:
        latitude:
          type: number
        longitude:
          type: number
        accuracy:
          type: number
    Geometry:
      required:
      - type
      type: object
      properties:
        type:
          type: string
          enum:
          - Point
          - LineString
          - Polygon
          - MultiPoint
          - MultiLineString
          - MultiPolygon
          - GeometryCollection
        crs:
          $ref: '#/components/schemas/CRS'
      description: GEOMETRY-FIX-TYPE-ON-CLIENT-SIDE
      discriminator:
        propertyName: type
        mapping:
          GeometryCollection: '#/components/schemas/GeometryCollection'
          LineString: '#/components/schemas/LineString'
          MultiLineString: '#/components/schemas/MultiLineString'
          MultiPoint: '#/components/schemas/MultiPoint'
          MultiPolygon: '#/components/schemas/MultiPolygon'
          Point: '#/components/schemas/Point'
          Polygon: '#/components/schemas/Polygon'
    GeometryCollection:
      required:
      - geometries
      type: object
      externalDocs:
        url: https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.8
      allOf:
      - $ref: '#/components/schemas/Geometry'
      - type: object
        properties:
          geometries:
            type: array
            items:
              $ref: '#/components/schemas/Geometry'
    GerminationPayload:
      required:
      - recordingDate
      - seedsGerminated
      type: object
      properties:
        recordingDate:
          type: string
          format: date
        seedsGerminated:
          type: integer
          format: int32
    GerminationTestPayload:
      required:
      - testType
      type: object
      properties:
        id:
          type: string
          description: Server-assigned unique ID of this germination test. Null when
            creating a new test.
        testType:
          type: string
          description: Which type of test is described. At most one of each test type
            is allowed.
          enum:
          - Lab
          - Nursery
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        seedType:
          type: string
          enum:
          - Fresh
          - Stored
        substrate:
          type: string
          enum:
          - Nursery Media
          - Agar Petri Dish
          - Paper Petri Dish
          - Other
        treatment:
          type: string
          enum:
          - Soak
          - Scarify
          - GA3
          - Stratification
          - Other
        notes:
          type: string
        remainingQuantity:
          description: "Quantity of seeds remaining. For weight-based accessions,\
            \ this is user input and is required. For count-based accessions, it is\
            \ calculated by the server and ignored on input."
          allOf:
          - $ref: '#/components/schemas/SeedQuantityPayload'
        staffResponsible:
          type: string
        seedsSown:
          type: integer
          format: int32
        totalPercentGerminated:
          type: integer
          format: int32
        totalSeedsGerminated:
          type: integer
          format: int32
        germinations:
          type: array
          items:
            $ref: '#/components/schemas/GerminationPayload'
    GetAccessionResponsePayload:
      required:
      - accession
      - status
      type: object
      properties:
        accession:
          $ref: '#/components/schemas/AccessionPayload'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    GetCurrentTimeResponsePayload:
      required:
      - currentTime
      - status
      type: object
      properties:
        currentTime:
          type: string
          format: date-time
        status:
          $ref: '#/components/schemas/SuccessOrError'
    GetDeviceResponsePayload:
      required:
      - device
      - status
      type: object
      properties:
        device:
          $ref: '#/components/schemas/DeviceConfig'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    GetFacilityResponse:
      required:
      - facility
      - status
      type: object
      properties:
        facility:
          $ref: '#/components/schemas/FacilityPayload'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    GetFeaturePhotoMetadataResponsePayload:
      required:
      - photo
      - status
      type: object
      properties:
        photo:
          $ref: '#/components/schemas/FeaturePhoto'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    GetFeatureResponsePayload:
      required:
      - feature
      - status
      type: object
      properties:
        feature:
          $ref: '#/components/schemas/FeatureResponse'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    GetLayerResponsePayload:
      required:
      - layer
      - status
      type: object
      properties:
        layer:
          $ref: '#/components/schemas/LayerResponse'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    GetObservationResponsePayload:
      required:
      - resp
      - status
      type: object
      properties:
        resp:
          $ref: '#/components/schemas/ObservationResponse'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    GetPlantResponsePayload:
      required:
      - plant
      - status
      type: object
      properties:
        plant:
          $ref: '#/components/schemas/PlantResponse'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    GetProjectResponsePayload:
      required:
      - project
      - status
      type: object
      properties:
        project:
          $ref: '#/components/schemas/ProjectPayload'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    GetSiteResponsePayload:
      required:
      - site
      - status
      type: object
      properties:
        site:
          $ref: '#/components/schemas/SiteElement'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    LayerResponse:
      required:
      - hidden
      - id
      - layerType
      - proposed
      - siteId
      type: object
      properties:
        id:
          type: integer
          format: int64
        siteId:
          type: integer
          format: int64
        layerType:
          type: string
          enum:
          - Aerial Photos
          - Surface Color Map
          - Terrain Color Map
          - Boundaries
          - Plants Planted
          - Plants Existing
          - Irrigation
          - Infrastructure
          - Partner Input
          - Restoration Zones
          - Site Prep
          - Map notes
        tileSetName:
          type: string
        proposed:
          type: boolean
        hidden:
          type: boolean
    LineString:
      required:
      - coordinates
      type: object
      externalDocs:
        url: https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.4
      allOf:
      - $ref: '#/components/schemas/Geometry'
      - type: object
        properties:
          coordinates:
            minItems: 2
            type: array
            items:
              maxItems: 3
              minItems: 3
              type: array
              description: "A single position. In the terraware-server API, positions\
                \ must always include 3 dimensions. The X and Y dimensions use the\
                \ coordinate system specified by the crs field, and the Z dimension\
                \ is in meters."
              example:
              - 120
              - -9.53
              - 16
              items:
                type: number
                format: double
    ListAllFieldValuesRequestPayload:
      required:
      - facilityId
      - fields
      type: object
      properties:
        facilityId:
          type: integer
          format: int64
        fields:
          type: array
          items:
            $ref: '#/components/schemas/SearchField'
    ListAllFieldValuesResponsePayload:
      required:
      - results
      - status
      type: object
      properties:
        results:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AllFieldValuesPayload'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    ListDeviceConfigsResponse:
      required:
      - devices
      - status
      type: object
      properties:
        devices:
          type: array
          items:
            $ref: '#/components/schemas/DeviceConfig'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    ListFacilitiesResponse:
      required:
      - facilities
      - status
      type: object
      properties:
        facilities:
          type: array
          items:
            $ref: '#/components/schemas/FacilityPayload'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    ListFeaturePhotosResponsePayload:
      required:
      - photos
      - status
      type: object
      properties:
        photos:
          type: array
          items:
            $ref: '#/components/schemas/FeaturePhoto'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    ListFeaturesResponsePayload:
      required:
      - features
      - status
      - totalCount
      type: object
      properties:
        features:
          type: array
          items:
            $ref: '#/components/schemas/FeatureResponse'
        totalCount:
          type: integer
          format: int32
        status:
          $ref: '#/components/schemas/SuccessOrError'
    ListFieldValuesRequestPayload:
      required:
      - facilityId
      - fields
      type: object
      properties:
        facilityId:
          type: integer
          format: int64
        fields:
          type: array
          items:
            $ref: '#/components/schemas/SearchField'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/SearchFilter'
        search:
          oneOf:
          - $ref: '#/components/schemas/AndNodePayload'
          - $ref: '#/components/schemas/FieldNodePayload'
          - $ref: '#/components/schemas/NotNodePayload'
          - $ref: '#/components/schemas/OrNodePayload'
    ListFieldValuesResponsePayload:
      required:
      - results
      - status
      type: object
      properties:
        results:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/FieldValuesPayload'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    ListLayersResponsePayload:
      required:
      - layers
      - status
      type: object
      properties:
        layers:
          type: array
          items:
            $ref: '#/components/schemas/LayerResponse'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    ListObservationsResponsePayload:
      required:
      - list
      - status
      type: object
      properties:
        list:
          type: array
          items:
            $ref: '#/components/schemas/ObservationResponse'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    ListOrganizationsElement:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    ListOrganizationsResponse:
      required:
      - organizations
      type: object
      properties:
        organizations:
          type: array
          items:
            $ref: '#/components/schemas/ListOrganizationsElement'
    ListPhotosResponseElement:
      required:
      - capturedTime
      - filename
      - size
      type: object
      properties:
        filename:
          type: string
        size:
          type: integer
          format: int64
        capturedTime:
          type: string
          format: date-time
        latitude:
          type: number
          description: Use location field instead.
          format: double
          deprecated: true
        longitude:
          type: number
          description: Use location field instead.
          format: double
          deprecated: true
        location:
          $ref: '#/components/schemas/Point'
        gpsAccuracy:
          type: integer
          description: GPS accuracy in meters.
          format: int32
    ListPhotosResponsePayload:
      required:
      - photos
      - status
      type: object
      properties:
        photos:
          type: array
          items:
            $ref: '#/components/schemas/ListPhotosResponseElement'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    ListPlantsResponseElement:
      required:
      - featureId
      - layerId
      type: object
      properties:
        featureId:
          type: integer
          format: int64
        label:
          type: string
        speciesId:
          type: integer
          format: int64
        naturalRegen:
          type: boolean
        datePlanted:
          type: string
          format: date
        layerId:
          type: integer
          format: int64
        gpsHorizAccuracy:
          type: number
          format: double
        gpsVertAccuracy:
          type: number
          format: double
        attrib:
          type: string
        notes:
          type: string
        enteredTime:
          type: string
          format: date-time
        geom:
          $ref: '#/components/schemas/Geometry'
    ListPlantsResponsePayload:
      required:
      - list
      - status
      type: object
      properties:
        list:
          type: array
          items:
            $ref: '#/components/schemas/ListPlantsResponseElement'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    ListProjectsResponsePayload:
      required:
      - projects
      - status
      type: object
      properties:
        projects:
          type: array
          items:
            $ref: '#/components/schemas/ProjectPayload'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    ListSitesResponsePayload:
      required:
      - sites
      - status
      type: object
      properties:
        sites:
          type: array
          items:
            $ref: '#/components/schemas/SiteElement'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    ListSpeciesResponsePayload:
      required:
      - status
      - values
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/SpeciesDetails'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    MultiLineString:
      required:
      - coordinates
      type: object
      externalDocs:
        url: https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.5
      allOf:
      - $ref: '#/components/schemas/Geometry'
      - type: object
        properties:
          coordinates:
            type: array
            items:
              minItems: 2
              type: array
              items:
                maxItems: 3
                minItems: 3
                type: array
                description: "A single position. In the terraware-server API, positions\
                  \ must always include 3 dimensions. The X and Y dimensions use the\
                  \ coordinate system specified by the crs field, and the Z dimension\
                  \ is in meters."
                example:
                - 120
                - -9.53
                - 16
                items:
                  type: number
                  format: double
    MultiPoint:
      required:
      - coordinates
      type: object
      externalDocs:
        url: https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.3
      allOf:
      - $ref: '#/components/schemas/Geometry'
      - type: object
        properties:
          coordinates:
            type: array
            items:
              maxItems: 3
              minItems: 3
              type: array
              description: "A single position. In the terraware-server API, positions\
                \ must always include 3 dimensions. The X and Y dimensions use the\
                \ coordinate system specified by the crs field, and the Z dimension\
                \ is in meters."
              example:
              - 120
              - -9.53
              - 16
              items:
                type: number
                format: double
    MultiPolygon:
      required:
      - coordinates
      type: object
      externalDocs:
        url: https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.7
      allOf:
      - $ref: '#/components/schemas/Geometry'
      - type: object
        properties:
          coordinates:
            type: array
            items:
              type: array
              items:
                minItems: 4
                type: array
                description: "A LineString with four or more positions. The first\
                  \ and last positions are equivalent, and they MUST contain identical\
                  \ values."
                externalDocs:
                  url: https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.6
                items:
                  maxItems: 3
                  minItems: 3
                  type: array
                  description: "A single position. In the terraware-server API, positions\
                    \ must always include 3 dimensions. The X and Y dimensions use\
                    \ the coordinate system specified by the crs field, and the Z\
                    \ dimension is in meters."
                  example:
                  - 120
                  - -9.53
                  - 16
                  items:
                    type: number
                    format: double
    NotNodePayload:
      required:
      - child
      type: object
      description: Search criterion that matches results that do not match a set of
        search criteria.
      allOf:
      - $ref: '#/components/schemas/SearchNodePayload'
      - type: object
        properties:
          child:
            $ref: '#/components/schemas/SearchNodePayload'
    NotificationListResponse:
      required:
      - notifications
      - status
      type: object
      properties:
        notifications:
          type: array
          items:
            $ref: '#/components/schemas/NotificationPayload'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    NotificationPayload:
      required:
      - id
      - read
      - text
      - timestamp
      - type
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for this notification. Clients should treat
            it as opaque.
          example: "12345"
        timestamp:
          type: string
          format: date-time
        type:
          type: string
          enum:
          - Alert
          - State
          - Date
        read:
          type: boolean
          description: "If true, this notification has been marked as read."
        text:
          type: string
          description: Plain-text body of notification.
          example: Accession XYZ is ready to be dried.
        accessionId:
          type: integer
          description: "For accession notifications, which accession caused the notification."
          format: int64
        state:
          type: string
          description: "For state notifications, which state is being summarized."
          enum:
          - Pending
          - Processing
          - Processed
          - Drying
          - Dried
          - In Storage
          - Withdrawn
          - Nursery
    ObservationResponse:
      required:
      - featureId
      - id
      - timestamp
      type: object
      properties:
        id:
          type: integer
          format: int64
        featureId:
          type: integer
          format: int64
        timestamp:
          type: string
          format: date-time
        healthState:
          type: string
          enum:
          - Good
          - Moderate
          - Poor
          - Dead
        flowers:
          type: boolean
        seeds:
          type: boolean
        pests:
          type: string
        height:
          type: number
          description: Height in meters
          format: double
        diameterAtBreastHeight:
          type: number
          description: Diameter at breast height in meters
          format: double
    OrNodePayload:
      type: object
      description: "Search criterion that matches results that meet any of a set of\
        \ other search criteria. That is, if the list of children is x, y, and z,\
        \ this will require x OR y OR z."
      allOf:
      - $ref: '#/components/schemas/SearchNodePayload'
    PlantResponse:
      required:
      - featureId
      type: object
      properties:
        featureId:
          type: integer
          format: int64
        label:
          type: string
        speciesId:
          type: integer
          format: int64
        naturalRegen:
          type: boolean
        datePlanted:
          type: string
          format: date
    PlantSummaryResponsePayload:
      required:
      - status
      - summary
      type: object
      properties:
        summary:
          type: object
          additionalProperties:
            type: integer
            format: int32
        status:
          $ref: '#/components/schemas/SuccessOrError'
    Point:
      required:
      - coordinates
      type: object
      externalDocs:
        url: https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.2
      allOf:
      - $ref: '#/components/schemas/Geometry'
      - type: object
        properties:
          coordinates:
            maxItems: 3
            minItems: 3
            type: array
            description: "A single position. In the terraware-server API, positions\
              \ must always include 3 dimensions. The X and Y dimensions use the coordinate\
              \ system specified by the crs field, and the Z dimension is in meters."
            example:
            - 120
            - -9.53
            - 16
            items:
              type: number
              format: double
    Polygon:
      required:
      - coordinates
      type: object
      externalDocs:
        url: https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.6
      allOf:
      - $ref: '#/components/schemas/Geometry'
      - type: object
        properties:
          coordinates:
            type: array
            items:
              minItems: 4
              type: array
              description: "A LineString with four or more positions. The first and\
                \ last positions are equivalent, and they MUST contain identical values."
              externalDocs:
                url: https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.6
              items:
                maxItems: 3
                minItems: 3
                type: array
                description: "A single position. In the terraware-server API, positions\
                  \ must always include 3 dimensions. The X and Y dimensions use the\
                  \ coordinate system specified by the crs field, and the Z dimension\
                  \ is in meters."
                example:
                - 120
                - -9.53
                - 16
                items:
                  type: number
                  format: double
    ProjectPayload:
      required:
      - id
      - name
      - organizationId
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        organizationId:
          type: integer
          format: int64
    RecordTimeseriesValuesRequestPayload:
      required:
      - timeseries
      type: object
      properties:
        timeseries:
          type: array
          items:
            $ref: '#/components/schemas/TimeseriesValuesPayload'
    RecordTimeseriesValuesResponsePayload:
      required:
      - status
      type: object
      properties:
        failures:
          type: array
          description: List of values that the server failed to record. Will not be
            included if all the values were recorded successfully.
          items:
            $ref: '#/components/schemas/TimeseriesValuesPayload'
        status:
          $ref: '#/components/schemas/SuccessOrError'
        error:
          $ref: '#/components/schemas/ErrorDetails'
      description: Results of a request to record timeseries values.
    SearchField:
      type: string
      enum:
      - accessionNumber
      - active
      - bagNumber
      - collectedDate
      - collectionNotes
      - cutTestSeedsCompromised
      - cutTestSeedsEmpty
      - cutTestSeedsFilled
      - dryingEndDate
      - dryingMoveDate
      - dryingStartDate
      - endangered
      - estimatedSeedsIncoming
      - family
      - geolocation
      - germinationEndDate
      - germinationPercentGerminated
      - germinationSeedType
      - germinationSeedsGerminated
      - germinationSeedsSown
      - germinationStartDate
      - germinationSubstrate
      - germinationTestNotes
      - germinationTestType
      - germinationTreatment
      - id
      - landowner
      - latestGerminationTestDate
      - latestViabilityPercent
      - nurseryStartDate
      - primaryCollector
      - processingMethod
      - processingNotes
      - processingStartDate
      - rare
      - receivedDate
      - remainingGrams
      - remainingQuantity
      - remainingUnits
      - siteLocation
      - sourcePlantOrigin
      - species
      - state
      - storageCondition
      - storageLocation
      - storageNotes
      - storagePackets
      - storageStartDate
      - targetStorageCondition
      - totalGrams
      - totalQuantity
      - totalUnits
      - totalViabilityPercent
      - treesCollectedFrom
      - viabilityTestType
      - withdrawalDate
      - withdrawalDestination
      - withdrawalGrams
      - withdrawalNotes
      - withdrawalPurpose
      - withdrawalQuantity
      - withdrawalRemainingGrams
      - withdrawalRemainingQuantity
      - withdrawalRemainingUnits
      - withdrawalUnits
    SearchFilter:
      required:
      - field
      - type
      - values
      type: object
      properties:
        field:
          $ref: '#/components/schemas/SearchField'
        values:
          minLength: 1
          type: array
          description: "List of values to match. For exact and fuzzy searches, a list\
            \ of at least one value to search for; the list may include null to match\
            \ accessions where the field does not have a value. For range searches,\
            \ the list must contain exactly two values, the minimum and maximum; one\
            \ of the values may be null to search for all values above a minimum or\
            \ below a maximum."
          items:
            type: string
            nullable: true
        type:
          type: string
          enum:
          - Exact
          - Fuzzy
          - Range
    SearchNodePayload:
      required:
      - operation
      type: object
      properties:
        operation:
          type: string
      description: A search criterion. The search will return results that match this
        criterion. The criterion can be composed of other search criteria to form
        arbitrary Boolean search expressions. TYPESCRIPT-OVERRIDE-TYPE-WITH-ANY
      discriminator:
        propertyName: operation
        mapping:
          and: '#/components/schemas/AndNodePayload'
          field: '#/components/schemas/FieldNodePayload'
          not: '#/components/schemas/NotNodePayload'
          or: '#/components/schemas/NotNodePayload'
      oneOf:
      - $ref: '#/components/schemas/AndNodePayload'
      - $ref: '#/components/schemas/FieldNodePayload'
      - $ref: '#/components/schemas/NotNodePayload'
      - $ref: '#/components/schemas/OrNodePayload'
    SearchRequestPayload:
      required:
      - count
      - facilityId
      - fields
      type: object
      properties:
        facilityId:
          type: integer
          format: int64
        fields:
          type: array
          items:
            $ref: '#/components/schemas/SearchField'
        sortOrder:
          type: array
          items:
            $ref: '#/components/schemas/SearchSortOrderElement'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/SearchFilter'
        search:
          oneOf:
          - $ref: '#/components/schemas/AndNodePayload'
          - $ref: '#/components/schemas/FieldNodePayload'
          - $ref: '#/components/schemas/NotNodePayload'
          - $ref: '#/components/schemas/OrNodePayload'
        cursor:
          type: string
        count:
          type: integer
          format: int32
          default: 10
    SearchResponsePayload:
      required:
      - results
      type: object
      properties:
        results:
          type: array
          items:
            type: object
            properties:
              accessionNumber:
                type: string
              active:
                type: string
              bagNumber:
                type: string
              collectedDate:
                type: string
              collectionNotes:
                type: string
              cutTestSeedsCompromised:
                type: string
              cutTestSeedsEmpty:
                type: string
              cutTestSeedsFilled:
                type: string
              dryingEndDate:
                type: string
              dryingMoveDate:
                type: string
              dryingStartDate:
                type: string
              endangered:
                type: string
              estimatedSeedsIncoming:
                type: string
              family:
                type: string
              geolocation:
                type: string
              germinationEndDate:
                type: string
              germinationPercentGerminated:
                type: string
              germinationSeedType:
                type: string
              germinationSeedsGerminated:
                type: string
              germinationSeedsSown:
                type: string
              germinationStartDate:
                type: string
              germinationSubstrate:
                type: string
              germinationTestNotes:
                type: string
              germinationTestType:
                type: string
              germinationTreatment:
                type: string
              id:
                type: string
              landowner:
                type: string
              latestGerminationTestDate:
                type: string
              latestViabilityPercent:
                type: string
              nurseryStartDate:
                type: string
              primaryCollector:
                type: string
              processingMethod:
                type: string
              processingNotes:
                type: string
              processingStartDate:
                type: string
              rare:
                type: string
              receivedDate:
                type: string
              remainingGrams:
                type: string
              remainingQuantity:
                type: string
              remainingUnits:
                type: string
              siteLocation:
                type: string
              sourcePlantOrigin:
                type: string
              species:
                type: string
              state:
                type: string
              storageCondition:
                type: string
              storageLocation:
                type: string
              storageNotes:
                type: string
              storagePackets:
                type: string
              storageStartDate:
                type: string
              targetStorageCondition:
                type: string
              totalGrams:
                type: string
              totalQuantity:
                type: string
              totalUnits:
                type: string
              totalViabilityPercent:
                type: string
              treesCollectedFrom:
                type: string
              viabilityTestType:
                type: string
              withdrawalDate:
                type: string
              withdrawalDestination:
                type: string
              withdrawalGrams:
                type: string
              withdrawalNotes:
                type: string
              withdrawalPurpose:
                type: string
              withdrawalRemainingGrams:
                type: string
              withdrawalRemainingQuantity:
                type: string
              withdrawalRemainingUnits:
                type: string
              withdrawalQuantity:
                type: string
              withdrawalUnits:
                type: string
        cursor:
          type: string
    SearchSortOrderElement:
      required:
      - field
      type: object
      properties:
        field:
          $ref: '#/components/schemas/SearchField'
        direction:
          type: string
          default: Ascending
          enum:
          - Ascending
          - Descending
    SeedQuantityPayload:
      required:
      - quantity
      - units
      type: object
      properties:
        quantity:
          type: number
          description: "Number of units of seeds. If \"units\" is \"Seeds\", this\
            \ is the number of seeds and must be an integer. Otherwise it is a measurement\
            \ in the weight units specified in the \"units\" field, and may have a\
            \ fractional part."
        units:
          type: string
          enum:
          - Seeds
          - Grams
          - Milligrams
          - Kilograms
          - Ounces
          - Pounds
        grams:
          type: number
          description: "If this quantity is a weight measurement, the weight in grams.\
            \ This is not set if the \"units\" field is \"Seeds\". This is always\
            \ calculated on the server side and is ignored on input."
          readOnly: true
      description: "Represents a quantity of seeds, measured either in individual\
        \ seeds or by weight."
      readOnly: true
    SimpleErrorResponsePayload:
      required:
      - error
      - status
      type: object
      properties:
        error:
          $ref: '#/components/schemas/ErrorDetails'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    SimpleSuccessResponsePayload:
      required:
      - status
      type: object
      properties:
        status:
          $ref: '#/components/schemas/SuccessOrError'
    SiteElement:
      required:
      - id
      - location
      - name
      - projectId
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        projectId:
          type: integer
          format: int64
        location:
          $ref: '#/components/schemas/Point'
        locale:
          type: string
        timezone:
          type: string
    SpeciesCreateResponsePayload:
      required:
      - id
      - status
      type: object
      properties:
        id:
          type: integer
          format: int64
        status:
          $ref: '#/components/schemas/SuccessOrError'
    SpeciesDetails:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    SpeciesGetResponsePayload:
      required:
      - species
      - status
      type: object
      properties:
        species:
          $ref: '#/components/schemas/SpeciesResponseElement'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    SpeciesListResponsePayload:
      required:
      - species
      - status
      type: object
      properties:
        species:
          type: array
          items:
            $ref: '#/components/schemas/SpeciesResponseElement'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    SpeciesNameCreateResponsePayload:
      required:
      - id
      - status
      type: object
      properties:
        id:
          type: integer
          format: int64
        status:
          $ref: '#/components/schemas/SuccessOrError'
    SpeciesNameGetResponsePayload:
      required:
      - speciesName
      - status
      type: object
      properties:
        speciesName:
          $ref: '#/components/schemas/SpeciesNamesResponseElement'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    SpeciesNameRequestPayload:
      required:
      - name
      - speciesId
      type: object
      properties:
        isScientific:
          type: boolean
          description: True if name is a scientific name for the species.
        locale:
          type: string
        name:
          type: string
        speciesId:
          type: integer
          format: int64
    SpeciesNamesListResponsePayload:
      required:
      - speciesNames
      - status
      type: object
      properties:
        speciesNames:
          type: array
          items:
            $ref: '#/components/schemas/SpeciesNamesResponseElement'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    SpeciesNamesResponseElement:
      required:
      - id
      - isScientific
      - name
      - speciesId
      type: object
      properties:
        id:
          type: integer
          format: int64
        isScientific:
          type: boolean
          description: True if name is the scientific name for the species.
        name:
          type: string
        speciesId:
          type: integer
          format: int64
    SpeciesRequestPayload:
      required:
      - name
      type: object
      properties:
        conservationStatus:
          type: string
        familyId:
          type: integer
          format: int64
        isScientific:
          type: boolean
          description: True if name is the scientific name for the species.
        name:
          type: string
        plantForm:
          type: string
          enum:
          - Tree
          - Shrub
          - Vine
          - Liana
          - Herbaceous
        rare:
          type: string
          enum:
          - "No"
          - "Yes"
          - Unsure
        tsn:
          type: string
          description: Taxonomic serial number from ITIS database.
          externalDocs:
            url: https://en.wikipedia.org/wiki/Integrated_Taxonomic_Information_System
    SpeciesResponseElement:
      required:
      - id
      - isScientific
      - name
      type: object
      properties:
        conservationStatus:
          type: string
        familyId:
          type: integer
          format: int64
        id:
          type: integer
          format: int64
        isScientific:
          type: boolean
          description: True if name is the scientific name for the species.
        name:
          type: string
        plantForm:
          type: string
          enum:
          - Tree
          - Shrub
          - Vine
          - Liana
          - Herbaceous
        rare:
          type: string
          enum:
          - "No"
          - "Yes"
          - Unsure
        tsn:
          type: string
          description: Taxonomic serial number from ITIS database.
          externalDocs:
            url: https://en.wikipedia.org/wiki/Integrated_Taxonomic_Information_System
    StorageLocationDetails:
      required:
      - storageCondition
      - storageLocation
      type: object
      properties:
        storageLocation:
          type: string
        storageCondition:
          type: string
          enum:
          - Refrigerator
          - Freezer
    StorageLocationsResponsePayload:
      required:
      - locations
      - status
      type: object
      properties:
        locations:
          type: array
          items:
            $ref: '#/components/schemas/StorageLocationDetails'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    SuccessOrError:
      type: string
      description: Indicates of success or failure of the requested operation.
      enum:
      - ok
      - error
    SummaryResponse:
      required:
      - activeAccessions
      - families
      - overdueDriedAccessions
      - overduePendingAccessions
      - overdueProcessedAccessions
      - recentlyWithdrawnAccessions
      - species
      type: object
      properties:
        activeAccessions:
          $ref: '#/components/schemas/SummaryStatistic'
        species:
          $ref: '#/components/schemas/SummaryStatistic'
        families:
          $ref: '#/components/schemas/SummaryStatistic'
        overduePendingAccessions:
          type: integer
          description: Number of accessions in Pending state overdue for processing
          format: int32
        overdueProcessedAccessions:
          type: integer
          description: Number of accessions in Processed state overdue for drying
          format: int32
        overdueDriedAccessions:
          type: integer
          description: Number of accessions in Dried state overdue for storage
          format: int32
        recentlyWithdrawnAccessions:
          type: integer
          description: Number of accessions withdrawn so far this week
          format: int32
      description: Summary of important statistics about the seed bank for the Summary
        page.
    SummaryStatistic:
      required:
      - current
      - lastWeek
      type: object
      properties:
        current:
          type: integer
          format: int32
        lastWeek:
          type: integer
          format: int32
      description: The current value and value as of last week for a summary statistic
    TimeseriesValuePayload:
      required:
      - timestamp
      - value
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        value:
          type: string
          description: "Value to record. If the timeseries is of type Numeric, this\
            \ must be a decimal or integer value in string form. If the timeseries\
            \ is of type Text, this can be an arbitrary string."
    TimeseriesValuesPayload:
      required:
      - deviceId
      - timeseriesName
      - values
      type: object
      properties:
        deviceId:
          type: integer
          description: ID of device that produced this value.
          format: int64
        timeseriesName:
          type: string
          description: Name of timeseries. This must be the name of a timeseries that
            has already been created for the device.
        values:
          type: array
          items:
            $ref: '#/components/schemas/TimeseriesValuePayload'
    UpdateAccessionRequestPayload:
      type: object
      properties:
        bagNumbers:
          uniqueItems: true
          type: array
          writeOnly: true
          items:
            type: string
        collectedDate:
          type: string
          format: date
          writeOnly: true
        cutTestSeedsCompromised:
          type: integer
          format: int32
          writeOnly: true
        cutTestSeedsEmpty:
          type: integer
          format: int32
          writeOnly: true
        cutTestSeedsFilled:
          type: integer
          format: int32
          writeOnly: true
        dryingEndDate:
          type: string
          format: date
          writeOnly: true
        dryingMoveDate:
          type: string
          format: date
          writeOnly: true
        dryingStartDate:
          type: string
          format: date
          writeOnly: true
        endangered:
          type: string
          writeOnly: true
          enum:
          - "No"
          - "Yes"
          - Unsure
        environmentalNotes:
          type: string
          writeOnly: true
        family:
          type: string
          writeOnly: true
        fieldNotes:
          type: string
          writeOnly: true
        founderId:
          type: string
          writeOnly: true
        geolocations:
          uniqueItems: true
          type: array
          writeOnly: true
          items:
            $ref: '#/components/schemas/Geolocation'
        germinationTestTypes:
          uniqueItems: true
          type: array
          writeOnly: true
          items:
            type: string
            enum:
            - Lab
            - Nursery
        germinationTests:
          type: array
          writeOnly: true
          items:
            $ref: '#/components/schemas/GerminationTestPayload'
        initialQuantity:
          description: Initial size of accession. The units of this value must match
            the measurement type in "processingMethod".
          allOf:
          - $ref: '#/components/schemas/SeedQuantityPayload'
        landowner:
          type: string
          writeOnly: true
        numberOfTrees:
          type: integer
          format: int32
          writeOnly: true
        nurseryStartDate:
          type: string
          format: date
          writeOnly: true
        primaryCollector:
          type: string
          writeOnly: true
        processingMethod:
          type: string
          writeOnly: true
          enum:
          - Count
          - Weight
        processingNotes:
          type: string
          writeOnly: true
        processingStaffResponsible:
          type: string
          writeOnly: true
        processingStartDate:
          type: string
          format: date
          writeOnly: true
        rare:
          type: string
          writeOnly: true
          enum:
          - "No"
          - "Yes"
          - Unsure
        receivedDate:
          type: string
          format: date
          writeOnly: true
        secondaryCollectors:
          uniqueItems: true
          type: array
          writeOnly: true
          items:
            type: string
        siteLocation:
          type: string
          writeOnly: true
        sourcePlantOrigin:
          type: string
          writeOnly: true
          enum:
          - Wild
          - Outplant
        species:
          type: string
          writeOnly: true
        storageLocation:
          type: string
          writeOnly: true
        storageNotes:
          type: string
          writeOnly: true
        storagePackets:
          type: integer
          format: int32
          writeOnly: true
        storageStaffResponsible:
          type: string
          writeOnly: true
        storageStartDate:
          type: string
          format: date
          writeOnly: true
        subsetCount:
          type: integer
          format: int32
          writeOnly: true
        subsetWeight:
          description: "Weight of subset of seeds. Units must be a weight measurement,\
            \ not \"Seeds\"."
          allOf:
          - $ref: '#/components/schemas/SeedQuantityPayload'
        targetStorageCondition:
          type: string
          writeOnly: true
          enum:
          - Refrigerator
          - Freezer
        withdrawals:
          type: array
          writeOnly: true
          items:
            $ref: '#/components/schemas/WithdrawalPayload'
    UpdateAccessionResponsePayload:
      required:
      - accession
      - status
      type: object
      properties:
        accession:
          $ref: '#/components/schemas/AccessionPayload'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    UpdateDeviceRequestPayload:
      required:
      - make
      - model
      - name
      - type
      type: object
      properties:
        name:
          type: string
          description: Name of this device.
          example: BMU-1
        type:
          type: string
          description: High-level type of the device. Device manager may use this
            in conjunction with the make and model to determine which metrics to report.
          example: inverter
        make:
          type: string
          description: Name of device manufacturer.
          example: InHand Networks
        model:
          type: string
          description: Model number or model name of the device.
          example: IR915L
        protocol:
          type: string
          description: Device manager protocol name.
          example: modbus
        address:
          type: string
          description: "Protocol-specific address of device, e.g., an IP address or\
            \ a Bluetooth device ID."
          example: 192.168.1.100
        port:
          type: integer
          description: Port number if relevant for the protocol.
          format: int32
          example: 50000
        settings:
          type: object
          description: Protocol- and device-specific custom settings. This is an arbitrary
            JSON object; the exact settings depend on the device type.
        pollingInterval:
          type: integer
          description: "How often the device manager should poll for status updates,\
            \ in seconds."
          format: int32
        parentId:
          type: integer
          description: "ID of parent device such as a hub or gateway, if any. The\
            \ parent device must exist."
          format: int64
    UpdateFeatureRequestPayload:
      required:
      - layerId
      type: object
      properties:
        layerId:
          type: integer
          format: int64
        geom:
          $ref: '#/components/schemas/Geometry'
        gpsHorizAccuracy:
          type: number
          format: double
        gpsVertAccuracy:
          type: number
          format: double
        attrib:
          type: string
        notes:
          type: string
        enteredTime:
          type: string
          format: date-time
    UpdateFeatureResponsePayload:
      required:
      - feature
      - status
      type: object
      properties:
        feature:
          $ref: '#/components/schemas/FeatureResponse'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    UpdateLayerRequestPayload:
      required:
      - hidden
      - layerType
      - proposed
      - siteId
      type: object
      properties:
        siteId:
          type: integer
          format: int64
        layerType:
          type: string
          enum:
          - Aerial Photos
          - Surface Color Map
          - Terrain Color Map
          - Boundaries
          - Plants Planted
          - Plants Existing
          - Irrigation
          - Infrastructure
          - Partner Input
          - Restoration Zones
          - Site Prep
          - Map notes
        tileSetName:
          type: string
        proposed:
          type: boolean
        hidden:
          type: boolean
    UpdateLayerResponsePayload:
      required:
      - layer
      - status
      type: object
      properties:
        layer:
          $ref: '#/components/schemas/LayerResponse'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    UpdateObservationRequestPayload:
      required:
      - timestamp
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        healthState:
          type: string
          enum:
          - Good
          - Moderate
          - Poor
          - Dead
        flowers:
          type: boolean
        seeds:
          type: boolean
        pests:
          type: string
        height:
          type: number
          description: Height in meters
          format: double
        diameterAtBreastHeight:
          type: number
          description: Diameter at breast height in meters
          format: double
    UpdateObservationResponsePayload:
      required:
      - resp
      - status
      type: object
      properties:
        resp:
          $ref: '#/components/schemas/ObservationResponse'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    UpdatePlantRequestPayload:
      type: object
      properties:
        label:
          type: string
        speciesId:
          type: integer
          format: int64
        naturalRegen:
          type: boolean
        datePlanted:
          type: string
          format: date
    UpdatePlantResponsePayload:
      required:
      - plant
      - status
      type: object
      properties:
        plant:
          $ref: '#/components/schemas/PlantResponse'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    UpdateProjectRequestPayload:
      required:
      - name
      type: object
      properties:
        name:
          type: string
    UploadPhotoMetadataPayload:
      required:
      - capturedTime
      type: object
      properties:
        capturedTime:
          type: string
          format: date-time
        latitude:
          type: number
          description: Use location field instead.
          deprecated: true
        longitude:
          type: number
          description: Use location field instead.
          deprecated: true
        location:
          $ref: '#/components/schemas/Point'
        gpsAccuracy:
          type: integer
          description: GPS accuracy in meters.
          format: int32
    WithdrawalPayload:
      required:
      - date
      - purpose
      type: object
      properties:
        id:
          type: integer
          description: "Server-assigned unique ID of this withdrawal, its ID. Omit\
            \ when creating a new withdrawal."
          format: int64
        date:
          type: string
          format: date
        purpose:
          type: string
          enum:
          - Propagation
          - Outreach or Education
          - Research
          - Broadcast
          - Share with Another Site
          - Other
          - Germination Testing
        destination:
          type: string
        notes:
          type: string
        remainingQuantity:
          description: "Quantity of seeds remaining. For weight-based accessions,\
            \ this is user input and is required. For count-based accessions, it is\
            \ calculated by the server and ignored on input."
          allOf:
          - $ref: '#/components/schemas/SeedQuantityPayload'
        staffResponsible:
          type: string
        germinationTestId:
          type: integer
          description: "If this withdrawal is of type \"Germination Testing\", the\
            \ ID of the test it is associated with. This is always set by the server\
            \ and cannot be modified."
          format: int64
        weightDifference:
          description: "For weight-based accessions, the difference between the weight\
            \ remaining before this withdrawal and the weight remaining after it.\
            \ This is a server-calculated value and is ignored on input."
          allOf:
          - $ref: '#/components/schemas/SeedQuantityPayload'
        withdrawnQuantity:
          description: "Quantity of seeds withdrawn. For germination testing withdrawals,\
            \ this is always the same as the test's \"seedsSown\" value, if that value\
            \ is present. Otherwise, it is a user-supplied value. For count-based\
            \ accessions, the units must always be \"Seeds\". For weight-based accessions,\
            \ the units may either be a weight measurement or \"Seeds\"."
          allOf:
          - $ref: '#/components/schemas/SeedQuantityPayload'
        estimatedQuantity:
          description: "The best estimate of the number of seeds withdrawn. This is\
            \ the same as \"withdrawnQuantity\" if that is present, or else the same\
            \ as \"weightDifference\" if this is a weight-based accession. If this\
            \ is a count-based accession and \"withdrawnQuantity\" does not have a\
            \ value, this field will not be present. This is a server-calculated value\
            \ and is ignored on input."
          allOf:
          - $ref: '#/components/schemas/SeedQuantityPayload'
