openapi: 3.0.1
info:
  title: Terraware Seed Bank
  description: Local server API for seed banks
  license:
    name: MIT
  version: 0.1-SNAPSHOT
servers:
- url: http://localhost:32109
  description: Generated server url
tags:
- name: SeedBankApp
- name: DeviceManager
paths:
  /api/v1/device/all/config:
    get:
      tags:
      - DeviceManager
      operationId: listDeviceConfigs
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDeviceConfigsResponse'
  /api/v1/resources:
    post:
      tags:
      - DeviceManager
      summary: Create a new resource (timeseries) for device metrics.
      operationId: createResource
      parameters:
      - name: path
        in: query
        required: true
        schema:
          type: string
      - name: name
        in: query
        required: true
        schema:
          type: string
      - name: type
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: data_type
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: min_storage_interval
        in: query
        required: false
        schema:
          type: integer
          format: int32
      - name: decimal_places
        in: query
        required: false
        schema:
          type: integer
          format: int32
      - name: units
        in: query
        required: false
        schema:
          type: string
      - name: max_history
        in: query
        required: false
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: "The timeseries was successfully created, or it already existed\
            \ so no action was needed."
          content:
            text/plain:
              schema:
                type: string
        "404":
          description: No device with the given path was defined.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
  /api/v1/resources/{*path}:
    get:
      tags:
      - DeviceManager
      summary: Tests for the existence of a resource (timeseries).
      operationId: getResource
      parameters:
      - name: path
        in: path
        required: true
        schema:
          type: string
          description: "Path of resource, typically including organization, site,\
            \ site module, device, and timeseries name."
          example: terraformation/pac-flight/ohana/BMU-L/system_voltage
      responses:
        "200":
          description: The resource exists. The response body is just the string "Found".
          content:
            text/plain:
              schema:
                type: string
        "404":
          description: The requested resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
  /api/v1/seedbank/accession:
    post:
      tags:
      - SeedBankApp
      summary: Create a new accession.
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccessionRequestPayload'
        required: true
      responses:
        "200":
          description: "The accession was created successfully. Response includes\
            \ fields populated by the server, including the accession number."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAccessionResponsePayload'
  /api/v1/seedbank/accession/{accessionNumber}:
    get:
      tags:
      - SeedBankApp
      summary: Retrieve an existing accession.
      operationId: read
      parameters:
      - name: accessionNumber
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAccessionResponsePayload'
        "404":
          description: The requested resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
    put:
      tags:
      - SeedBankApp
      summary: Update an existing accession.
      operationId: update
      parameters:
      - name: accessionNumber
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAccessionRequestPayload'
        required: true
      responses:
        "200":
          description: The accession was updated successfully. Response includes fields
            populated or modified by the server as a result of the update.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateAccessionResponsePayload'
        "404":
          description: The specified accession doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
  /api/v1/seedbank/accession/{accessionNumber}/photo:
    get:
      tags:
      - SeedBankApp
      summary: List all the available photos for an accession.
      operationId: listPhotos
      parameters:
      - name: accessionNumber
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: The accession's photos are listed in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPhotosResponsePayload'
        "404":
          description: The accession does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
  /api/v1/seedbank/accession/{accessionNumber}/photo/{photoFilename}:
    get:
      tags:
      - SeedBankApp
      summary: Retrieve a specific photo from an accession.
      operationId: getPhoto
      parameters:
      - name: accessionNumber
        in: path
        required: true
        schema:
          type: string
      - name: photoFilename
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: The photo was successfully retrieved.
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
        "404":
          description: "The accession does not exist, or does not have a photo with\
            \ the requested filename."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
    post:
      tags:
      - SeedBankApp
      summary: Upload a new photo for an accession.
      operationId: uploadPhoto
      parameters:
      - name: accessionNumber
        in: path
        required: true
        schema:
          type: string
      - name: photoFilename
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                metadata:
                  $ref: '#/components/schemas/UploadPhotoMetadataPayload'
            encoding:
              file:
                contentType: image/jpeg
      responses:
        "200":
          description: The requested operation succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
        "404":
          description: The specified accession does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
        "409":
          description: The requested photo already exists on the accession.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
  /api/v1/seedbank/clock:
    get:
      tags:
      - SeedBankApp
      summary: Get the server's current date and time.
      description: "In test environments, the clock can be advanced artificially,\
        \ which will cause it to differ from the real-world date and time."
      operationId: getCurrentTime
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCurrentTimeResponsePayload'
  /api/v1/seedbank/clock/advance:
    post:
      tags:
      - SeedBankApp
      summary: Advance the server's clock.
      description: Advancing the clock causes any scheduled processes to run. Subsequent
        GET requests to read the current time will take the advancement into account.
        Only supported in test and development environments.
      operationId: advanceClock
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdvanceClockRequestPayload'
        required: true
      responses:
        "200":
          description: The clock has been advanced. The response includes the newly-adjusted
            time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCurrentTimeResponsePayload'
  /api/v1/seedbank/log/{tag}:
    post:
      tags:
      - SeedBankApp
      operationId: recordLogMessage
      parameters:
      - name: tag
        in: path
        required: true
        schema:
          type: string
          description: Source of the log message.
          example: seedbank-app
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: object
                description: "Values to log. This can be an arbitrary bucket of key/value\
                  \ pairs, but the 'level' field should be set to one of 'debug',\
                  \ 'info', 'warn', or 'error'. Default level is 'info'. If there\
                  \ is a human-readable message, it should go in the 'message' field."
              description: "Values to log. This can be an arbitrary bucket of key/value\
                \ pairs, but the 'level' field should be set to one of 'debug', 'info',\
                \ 'warn', or 'error'. Default level is 'info'. If there is a human-readable\
                \ message, it should go in the 'message' field."
        required: true
      responses:
        "200":
          description: OK
  /api/v1/seedbank/notification:
    get:
      tags:
      - SeedBankApp
      summary: Get a list of recent notifications
      operationId: listAll
      parameters:
      - name: since
        in: query
        description: Don't return notifications older than this; default is 1 month
          ago
        required: false
        schema:
          type: string
          format: date-time
      - name: limit
        in: query
        description: Return at most this many notifications; default is no limit
        required: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Notifications in reverse time order (newest first).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationListResponse'
  /api/v1/seedbank/notification/all/markRead:
    post:
      tags:
      - SeedBankApp
      summary: Mark all notifications as read.
      operationId: markAllRead
      responses:
        "200":
          description: All notifications have been marked as read.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
  /api/v1/seedbank/notification/all/markUnread:
    post:
      tags:
      - SeedBankApp
      summary: Mark all notifications as unread.
      description: For development and testing of notifications. Not available in
        production.
      operationId: markAllUnread
      responses:
        "200":
          description: All notifications have been marked as unread.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
  /api/v1/seedbank/notification/{id}/markRead:
    post:
      tags:
      - SeedBankApp
      summary: Mark a specific notification as read.
      operationId: markRead
      parameters:
      - name: id
        in: path
        description: ID of notification to mark as read
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Notification has been marked as read.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
        "404":
          description: The requested notification ID was not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
  /api/v1/seedbank/search:
    post:
      tags:
      - SeedBankApp
      summary: Searches for accessions based on filter criteria.
      operationId: search
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequestPayload'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponsePayload'
  /api/v1/seedbank/search/export:
    post:
      tags:
      - SeedBankApp
      summary: Exports the results of a search as a downloadable CSV file.
      operationId: export
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportRequestPayload'
        required: true
      responses:
        "200":
          description: Export succeeded.
          content:
            text/csv:
              schema:
                type: string
                format: binary
  /api/v1/seedbank/summary:
    get:
      tags:
      - SeedBankApp
      summary: Get summary statistics about the seed bank
      operationId: getSummary
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SummaryResponse'
  /api/v1/seedbank/timeseries:
    post:
      tags:
      - DeviceManager
      summary: Report a numeric timeseries value.
      operationId: reportNumericValue
      parameters:
      - name: device
        in: query
        required: true
        schema:
          type: string
          description: Name of device. Must match the device name as defined in the
            per-site configuration.
      - name: timeseries
        in: query
        required: true
        schema:
          type: string
          description: "Name of timeseries. If the timeseries does not already exist,\
            \ it will be created."
      - name: value
        in: query
        required: true
        schema:
          type: number
      - name: units
        in: query
        required: false
        schema:
          type: string
          description: The type of unit the value measures. Ignored if the timeseries
            already exists.
          example: MB
      - name: decimalPlaces
        in: query
        required: false
        schema:
          type: integer
          description: Number of significant decimal places. Ignored if the timeseries
            already exists. Values are always stored in their entirety but dashboards
            and reports can use this value to control how many decimal places to display.
          format: int32
      - name: siteModuleId
        in: query
        required: false
        schema:
          type: integer
          description: "Which site module the device is in, if it isn't in the seed\
            \ bank's default site module. Must match the site module ID the device\
            \ is associated with in the per-site configuration."
          format: int64
      responses:
        "200":
          description: Timeseries value recorded successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
        "404":
          description: The requested resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
  /api/v1/seedbank/values:
    post:
      tags:
      - SeedBankApp
      summary: List the values of a set of search fields for a set of accessions matching
        certain filter criteria.
      operationId: listFieldValues
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListFieldValuesRequestPayload'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFieldValuesResponsePayload'
  /api/v1/seedbank/values/all:
    post:
      tags:
      - SeedBankApp
      summary: List the possible values of a set of search fields.
      operationId: listAllFieldValues
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListAllFieldValuesRequestPayload'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAllFieldValuesResponsePayload'
  /api/v1/seedbank/values/species:
    get:
      tags:
      - SeedBankApp
      operationId: listSpecies
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSpeciesResponsePayload'
    post:
      tags:
      - SeedBankApp
      operationId: createSpecies
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSpeciesRequestPayload'
        required: true
      responses:
        "200":
          description: Species created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSpeciesResponsePayload'
        "409":
          description: A species with the requested name already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSpeciesResponsePayload'
  /api/v1/seedbank/values/species/{id}:
    post:
      tags:
      - SeedBankApp
      summary: Updates an existing species.
      description: "If the species is being renamed and the species name in the payload\
        \ already exists, the existing species replaces the one in the request (thus\
        \ merging the requested species into the one that already had the name) and\
        \ its ID is returned."
      operationId: updateSpecies
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSpeciesRequestPayload'
        required: true
      responses:
        "200":
          description: Species updated or merged with an existing species.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateSpeciesResponsePayload'
        "404":
          description: The requested resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
  /api/v1/seedbank/values/storageLocation:
    get:
      tags:
      - SeedBankApp
      operationId: getStorageLocations
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageLocationsResponsePayload'
  /api/v2/seedbank/accession:
    post:
      tags:
      - SeedBankApp
      summary: Create a new accession.
      operationId: createv2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccessionRequestPayload'
        required: true
      responses:
        "200":
          description: "The accession was created successfully. Response includes\
            \ fields populated by the server, including the accession number."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAccessionResponsePayload'
  /api/v2/seedbank/accession/{accessionNumber}:
    get:
      tags:
      - SeedBankApp
      summary: Retrieve an existing accession.
      operationId: readv2
      parameters:
      - name: accessionNumber
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAccessionResponsePayload'
        "404":
          description: The requested resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
    put:
      tags:
      - SeedBankApp
      summary: Update an existing accession.
      operationId: updatev2
      parameters:
      - name: accessionNumber
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAccessionRequestPayload'
        required: true
      responses:
        "200":
          description: The accession was updated successfully. Response includes fields
            populated or modified by the server as a result of the update.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateAccessionResponsePayload'
        "404":
          description: The specified accession doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
components:
  schemas:
    AccessionPayload:
      required:
      - accessionNumber
      - active
      - source
      - state
      type: object
      properties:
        accessionNumber:
          type: string
          description: Server-generated unique identifier for the accession.
        active:
          type: string
          description: Server-calculated active indicator. This is based on the accession's
            state.
          enum:
          - Inactive
          - Active
        bagNumbers:
          uniqueItems: true
          type: array
          items:
            type: string
        collectedDate:
          type: string
          format: date
        deviceInfo:
          $ref: '#/components/schemas/DeviceInfoPayload'
        cutTestSeedsCompromised:
          type: integer
          format: int32
        cutTestSeedsEmpty:
          type: integer
          format: int32
        cutTestSeedsFilled:
          type: integer
          format: int32
        dryingEndDate:
          type: string
          format: date
        dryingMoveDate:
          type: string
          format: date
        dryingStartDate:
          type: string
          format: date
        effectiveSeedCount:
          type: integer
          description: "Server-calculated effective seed count. This is the exact\
            \ seed count if available, otherwise the estimated seed count, or null\
            \ if neither seed count is available."
          format: int32
        endangered:
          type: string
          enum:
          - "No"
          - "Yes"
          - Unsure
        environmentalNotes:
          type: string
        estimatedSeedCount:
          type: integer
          format: int32
        family:
          type: string
        fieldNotes:
          type: string
        founderId:
          type: string
        geolocations:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Geolocation'
        germinationTests:
          type: array
          items:
            $ref: '#/components/schemas/GerminationTestPayload'
        germinationTestTypes:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
            - Lab
            - Nursery
        landowner:
          type: string
        latestGerminationTestDate:
          type: string
          format: date
        latestViabilityPercent:
          type: integer
          format: int32
        numberOfTrees:
          type: integer
          format: int32
        nurseryStartDate:
          type: string
          format: date
        photoFilenames:
          type: array
          items:
            type: string
        primaryCollector:
          type: string
        processingMethod:
          type: string
          enum:
          - Count
          - Weight
        processingNotes:
          type: string
        processingStaffResponsible:
          type: string
        processingStartDate:
          type: string
          format: date
        rare:
          type: string
          enum:
          - "No"
          - "Yes"
          - Unsure
        receivedDate:
          type: string
          format: date
        secondaryCollectors:
          uniqueItems: true
          type: array
          items:
            type: string
        seedsCounted:
          type: integer
          format: int32
        seedsRemaining:
          type: integer
          description: Number of seeds remaining for withdrawal and testing. Calculated
            by the server when the accession's seed count (actual or estimated) is
            known.
          format: int32
        siteLocation:
          type: string
        source:
          type: string
          description: Which application this accession originally came from. This
            is currently based on the presence of the deviceInfo field.
          enum:
          - Web
          - SeedCollectorApp
        sourcePlantOrigin:
          type: string
          enum:
          - Wild
          - Outplant
        species:
          type: string
        speciesId:
          type: integer
          description: Server-generated unique ID of the species.
          format: int64
        state:
          type: string
          description: Server-calculated accession state. Can change due to modifications
            to accession data or based on passage of time.
          enum:
          - Pending
          - Processing
          - Processed
          - Drying
          - Dried
          - In Storage
          - Withdrawn
          - Nursery
        storageCondition:
          type: string
          enum:
          - Refrigerator
          - Freezer
        storageLocation:
          type: string
        storagePackets:
          type: integer
          format: int32
        storageNotes:
          type: string
        storageStaffResponsible:
          type: string
        storageStartDate:
          type: string
          format: date
        subsetCount:
          type: integer
          format: int32
        subsetWeightGrams:
          type: number
        targetStorageCondition:
          type: string
          enum:
          - Refrigerator
          - Freezer
        totalViabilityPercent:
          type: integer
          format: int32
        totalWeightGrams:
          type: number
        withdrawals:
          type: array
          items:
            $ref: '#/components/schemas/WithdrawalPayload'
    AdvanceClockRequestPayload:
      required:
      - days
      type: object
      properties:
        days:
          minimum: 1
          type: integer
          format: int32
    AllFieldValuesPayload:
      required:
      - partial
      - values
      type: object
      properties:
        values:
          type: array
          description: "All the values this field could possibly have, whether or\
            \ not any accessions have them. For fields that allow the user to enter\
            \ arbitrary values, this is equivalent to querying the list of values\
            \ without any filter criteria, that is, it's a list of all the user-entered\
            \ values."
          items:
            type: string
        partial:
          type: boolean
          description: "If true, the list of values is too long to return in its entirety\
            \ and \"values\" is a partial list."
    CreateAccessionRequestPayload:
      type: object
      properties:
        bagNumbers:
          uniqueItems: true
          type: array
          writeOnly: true
          items:
            type: string
        collectedDate:
          type: string
          format: date
          writeOnly: true
        deviceInfo:
          $ref: '#/components/schemas/DeviceInfoPayload'
        endangered:
          type: string
          writeOnly: true
          enum:
          - "No"
          - "Yes"
          - Unsure
        environmentalNotes:
          type: string
          writeOnly: true
        family:
          type: string
          writeOnly: true
        fieldNotes:
          type: string
          writeOnly: true
        founderId:
          type: string
          writeOnly: true
        geolocations:
          uniqueItems: true
          type: array
          writeOnly: true
          items:
            $ref: '#/components/schemas/Geolocation'
        germinationTestTypes:
          uniqueItems: true
          type: array
          writeOnly: true
          items:
            type: string
            enum:
            - Lab
            - Nursery
        germinationTests:
          type: array
          writeOnly: true
          items:
            $ref: '#/components/schemas/GerminationTestPayload'
        landowner:
          type: string
          writeOnly: true
        numberOfTrees:
          type: integer
          format: int32
          writeOnly: true
        primaryCollector:
          type: string
          writeOnly: true
        rare:
          type: string
          writeOnly: true
          enum:
          - "No"
          - "Yes"
          - Unsure
        receivedDate:
          type: string
          format: date
          writeOnly: true
        secondaryCollectors:
          uniqueItems: true
          type: array
          writeOnly: true
          items:
            type: string
        siteLocation:
          type: string
          writeOnly: true
        sourcePlantOrigin:
          type: string
          writeOnly: true
          enum:
          - Wild
          - Outplant
        species:
          type: string
          writeOnly: true
    CreateAccessionResponsePayload:
      required:
      - accession
      - status
      type: object
      properties:
        accession:
          $ref: '#/components/schemas/AccessionPayload'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    CreateSpeciesRequestPayload:
      required:
      - name
      type: object
      properties:
        name:
          type: string
    CreateSpeciesResponsePayload:
      required:
      - details
      - status
      type: object
      properties:
        details:
          $ref: '#/components/schemas/SpeciesDetails'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    DeviceConfig:
      required:
      - make
      - model
      - name
      - serverPath
      - siteModule
      - type
      type: object
      properties:
        siteModule:
          type: string
          description: Name of site module where this device is located.
          example: garage
        name:
          type: string
          description: Name of this device. Should be unique within the site module.
          example: BMU-1
        type:
          type: string
          description: High-level type of the device. Device manager may use this
            in conjunction with the make and model to determine which metrics to report.
          example: inverter
        make:
          type: string
          description: Name of device manufacturer.
          example: InHand Networks
        model:
          type: string
          description: Model number or model name of the device.
          example: IR915L
        protocol:
          type: string
          description: Device manager protocol name.
          example: modbus
        address:
          type: string
          description: "Protocol-specific address of device, e.g., an IP address or\
            \ a Bluetooth device ID."
          example: 192.168.1.100
        port:
          type: integer
          description: Port number if relevant for the protocol.
          format: int32
          example: 50000
        settings:
          type: string
          description: Protocol- and device-specific custom settings. Format is defined
            by the device manager.
        pollingInterval:
          type: integer
          format: int32
        serverPath:
          type: string
          description: "Device's resource path on the server, minus organization and\
            \ site names. Currently, this is always just the site module and device\
            \ name."
          example: garage/BMU-1
    DeviceInfoPayload:
      type: object
      properties:
        appBuild:
          type: string
          description: "Build number of application that is submitting the accession,\
            \ e.g., from React Native getBuildId()"
        appName:
          type: string
          description: Name of application
          example: Seed Collector
        brand:
          type: string
          description: "Brand of device, e.g., from React Native getBrand()."
          example: Samsung
        model:
          type: string
          description: "Model of device hardware, e.g., from React Native getDeviceId()."
        name:
          type: string
          description: "Name the user has assigned to the device, e.g., from React\
            \ Native getDeviceName()."
          example: Carlos's iPhone
        osType:
          type: string
          description: "Type of operating system, e.g., from React Native getSystemName()."
          example: Android
        osVersion:
          type: string
          description: "Version of operating system, e.g., from React Native getSystemVersion()."
          example: 7.1.1
        uniqueId:
          type: string
          description: "Unique identifier of the hardware device, e.g., from React\
            \ Native getUniqueId()."
      description: Details about the device and the application that created the accession.
        All these values are optional and most of them are platform-dependent.
    ErrorDetails:
      required:
      - message
      type: object
      properties:
        message:
          type: string
    ExportRequestPayload:
      required:
      - fields
      type: object
      properties:
        fields:
          type: array
          items:
            $ref: '#/components/schemas/SearchField'
        sortOrder:
          type: array
          items:
            $ref: '#/components/schemas/SearchSortOrderElement'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/SearchFilter'
    FieldValuesPayload:
      required:
      - partial
      - values
      type: object
      properties:
        values:
          type: array
          description: "List of values in the matching accessions. If there are accessions\
            \ where the field has no value, this list will contain null (an actual\
            \ null value, not the string \"null\")."
          items:
            type: string
            nullable: true
        partial:
          type: boolean
          description: "If true, the list of values is too long to return in its entirety\
            \ and \"values\" is a partial list."
    Geolocation:
      required:
      - latitude
      - longitude
      type: object
      properties:
        latitude:
          type: number
        longitude:
          type: number
        accuracy:
          type: number
    GerminationPayload:
      required:
      - recordingDate
      - seedsGerminated
      type: object
      properties:
        recordingDate:
          type: string
          format: date
        seedsGerminated:
          type: integer
          format: int32
    GerminationTestPayload:
      required:
      - testType
      type: object
      properties:
        id:
          type: string
          description: Server-assigned unique ID of this germination test. Null when
            creating a new test.
        testType:
          type: string
          description: Which type of test is described. At most one of each test type
            is allowed.
          enum:
          - Lab
          - Nursery
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        seedType:
          type: string
          enum:
          - Fresh
          - Stored
        substrate:
          type: string
          enum:
          - Nursery Media
          - Agar Petri Dish
          - Paper Petri Dish
          - Other
        treatment:
          type: string
          enum:
          - Soak
          - Scarify
          - GA3
          - Stratification
          - Other
        notes:
          type: string
        staffResponsible:
          type: string
        seedsSown:
          type: integer
          format: int32
        totalPercentGerminated:
          type: integer
          format: int32
        totalSeedsGerminated:
          type: integer
          format: int32
        germinations:
          type: array
          items:
            $ref: '#/components/schemas/GerminationPayload'
    GetAccessionResponsePayload:
      required:
      - accession
      - status
      type: object
      properties:
        accession:
          $ref: '#/components/schemas/AccessionPayload'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    GetCurrentTimeResponsePayload:
      required:
      - currentTime
      - status
      type: object
      properties:
        currentTime:
          type: string
          format: date-time
        status:
          $ref: '#/components/schemas/SuccessOrError'
    ListAllFieldValuesRequestPayload:
      required:
      - fields
      type: object
      properties:
        fields:
          type: array
          items:
            $ref: '#/components/schemas/SearchField'
    ListAllFieldValuesResponsePayload:
      required:
      - results
      - status
      type: object
      properties:
        results:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AllFieldValuesPayload'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    ListDeviceConfigsResponse:
      required:
      - devices
      - status
      type: object
      properties:
        devices:
          type: array
          items:
            $ref: '#/components/schemas/DeviceConfig'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    ListFieldValuesRequestPayload:
      required:
      - fields
      type: object
      properties:
        fields:
          type: array
          items:
            $ref: '#/components/schemas/SearchField'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/SearchFilter'
    ListFieldValuesResponsePayload:
      required:
      - results
      - status
      type: object
      properties:
        results:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/FieldValuesPayload'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    ListPhotosResponseElement:
      required:
      - capturedTime
      - filename
      - size
      type: object
      properties:
        filename:
          type: string
        size:
          type: integer
          format: int32
        capturedTime:
          type: string
          format: date-time
        latitude:
          type: number
        longitude:
          type: number
        gpsAccuracy:
          type: integer
          description: GPS accuracy in meters.
          format: int32
    ListPhotosResponsePayload:
      required:
      - photos
      - status
      type: object
      properties:
        photos:
          type: array
          items:
            $ref: '#/components/schemas/ListPhotosResponseElement'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    ListSpeciesResponsePayload:
      required:
      - status
      - values
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/SpeciesDetails'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    NotificationListResponse:
      required:
      - notifications
      - status
      type: object
      properties:
        notifications:
          type: array
          items:
            $ref: '#/components/schemas/NotificationPayload'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    NotificationPayload:
      required:
      - id
      - read
      - text
      - timestamp
      - type
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for this notification. Clients should treat
            it as opaque.
          example: "12345"
        timestamp:
          type: string
          format: date-time
        type:
          type: string
          enum:
          - Alert
          - State
          - Date
        read:
          type: boolean
          description: "If true, this notification has been marked as read."
        text:
          type: string
          description: Plain-text body of notification.
          example: Accession XYZ is ready to be dried.
        accessionNumber:
          type: string
          description: "For accession notifications, which accession caused the notification."
        state:
          type: string
          description: "For state notifications, which state is being summarized."
          enum:
          - Pending
          - Processing
          - Processed
          - Drying
          - Dried
          - In Storage
          - Withdrawn
          - Nursery
    SearchField:
      type: string
      enum:
      - accessionNumber
      - active
      - bagNumber
      - collectedDate
      - collectionNotes
      - cutTestSeedsCompromised
      - cutTestSeedsEmpty
      - cutTestSeedsFilled
      - dryingEndDate
      - dryingMoveDate
      - dryingStartDate
      - effectiveSeedCount
      - endangered
      - endangered2
      - estimatedSeedsIncoming
      - family
      - geolocation
      - germinationEndDate
      - germinationPercentGerminated
      - germinationSeedType
      - germinationSeedsGerminated
      - germinationSeedsSown
      - germinationStartDate
      - germinationSubstrate
      - germinationTestNotes
      - germinationTestType
      - germinationTreatment
      - landowner
      - latestGerminationTestDate
      - latestViabilityPercent
      - nurseryStartDate
      - primaryCollector
      - processingMethod
      - processingNotes
      - processingStartDate
      - rare
      - rare2
      - receivedDate
      - seedsCounted
      - seedsRemaining
      - siteLocation
      - sourcePlantOrigin
      - species
      - state
      - storageCondition
      - storageLocation
      - storageNotes
      - storagePackets
      - storageStartDate
      - targetStorageCondition
      - totalViabilityPercent
      - treesCollectedFrom
      - withdrawalDate
      - withdrawalDestination
      - withdrawalGrams
      - withdrawalNotes
      - withdrawalPurpose
      - withdrawalSeeds
    SearchFilter:
      required:
      - field
      - type
      - values
      type: object
      properties:
        field:
          $ref: '#/components/schemas/SearchField'
        values:
          minLength: 1
          type: array
          description: "List of values to match. For exact and fuzzy searches, a list\
            \ of at least one value to search for; the list may include null to match\
            \ accessions where the field does not have a value. For range searches,\
            \ the list must contain exactly two values, the minimum and maximum."
          items:
            type: string
            nullable: true
        type:
          type: string
          enum:
          - Exact
          - Fuzzy
          - Range
    SearchRequestPayload:
      required:
      - count
      - fields
      type: object
      properties:
        fields:
          type: array
          items:
            $ref: '#/components/schemas/SearchField'
        sortOrder:
          type: array
          items:
            $ref: '#/components/schemas/SearchSortOrderElement'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/SearchFilter'
        cursor:
          type: string
        count:
          type: integer
          format: int32
          default: 10
    SearchResponsePayload:
      required:
      - results
      type: object
      properties:
        results:
          type: array
          items:
            type: object
            additionalProperties:
              type: string
        cursor:
          type: string
    SearchSortOrderElement:
      required:
      - field
      type: object
      properties:
        field:
          $ref: '#/components/schemas/SearchField'
        direction:
          type: string
          default: Ascending
          enum:
          - Ascending
          - Descending
    SimpleErrorResponsePayload:
      required:
      - error
      - status
      type: object
      properties:
        error:
          $ref: '#/components/schemas/ErrorDetails'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    SimpleSuccessResponsePayload:
      required:
      - status
      type: object
      properties:
        status:
          $ref: '#/components/schemas/SuccessOrError'
    SpeciesDetails:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    StorageLocationDetails:
      required:
      - storageCondition
      - storageLocation
      type: object
      properties:
        storageLocation:
          type: string
        storageCondition:
          type: string
          enum:
          - Refrigerator
          - Freezer
    StorageLocationsResponsePayload:
      required:
      - locations
      - status
      type: object
      properties:
        locations:
          type: array
          items:
            $ref: '#/components/schemas/StorageLocationDetails'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    SuccessOrError:
      type: string
      description: Indicates of success or failure of the requested operation.
      enum:
      - ok
      - error
    SummaryResponse:
      required:
      - activeAccessions
      - families
      - overdueDriedAccessions
      - overduePendingAccessions
      - overdueProcessedAccessions
      - recentlyWithdrawnAccessions
      - species
      type: object
      properties:
        activeAccessions:
          $ref: '#/components/schemas/SummaryStatistic'
        species:
          $ref: '#/components/schemas/SummaryStatistic'
        families:
          $ref: '#/components/schemas/SummaryStatistic'
        overduePendingAccessions:
          type: integer
          description: Number of accessions in Pending state overdue for processing
          format: int32
        overdueProcessedAccessions:
          type: integer
          description: Number of accessions in Processed state overdue for drying
          format: int32
        overdueDriedAccessions:
          type: integer
          description: Number of accessions in Dried state overdue for storage
          format: int32
        recentlyWithdrawnAccessions:
          type: integer
          description: Number of accessions withdrawn so far this week
          format: int32
      description: Summary of important statistics about the seed bank for the Summary
        page.
    SummaryStatistic:
      required:
      - current
      - lastWeek
      type: object
      properties:
        current:
          type: integer
          format: int32
        lastWeek:
          type: integer
          format: int32
      description: The current value and value as of last week for a summary statistic
    UpdateAccessionRequestPayload:
      type: object
      properties:
        bagNumbers:
          uniqueItems: true
          type: array
          writeOnly: true
          items:
            type: string
        collectedDate:
          type: string
          format: date
          writeOnly: true
        cutTestSeedsCompromised:
          type: integer
          format: int32
          writeOnly: true
        cutTestSeedsEmpty:
          type: integer
          format: int32
          writeOnly: true
        cutTestSeedsFilled:
          type: integer
          format: int32
          writeOnly: true
        dryingEndDate:
          type: string
          format: date
          writeOnly: true
        dryingMoveDate:
          type: string
          format: date
          writeOnly: true
        dryingStartDate:
          type: string
          format: date
          writeOnly: true
        endangered:
          type: string
          writeOnly: true
          enum:
          - "No"
          - "Yes"
          - Unsure
        environmentalNotes:
          type: string
          writeOnly: true
        family:
          type: string
          writeOnly: true
        fieldNotes:
          type: string
          writeOnly: true
        founderId:
          type: string
          writeOnly: true
        geolocations:
          uniqueItems: true
          type: array
          writeOnly: true
          items:
            $ref: '#/components/schemas/Geolocation'
        germinationTestTypes:
          uniqueItems: true
          type: array
          writeOnly: true
          items:
            type: string
            enum:
            - Lab
            - Nursery
        germinationTests:
          type: array
          writeOnly: true
          items:
            $ref: '#/components/schemas/GerminationTestPayload'
        landowner:
          type: string
          writeOnly: true
        numberOfTrees:
          type: integer
          format: int32
          writeOnly: true
        nurseryStartDate:
          type: string
          format: date
          writeOnly: true
        primaryCollector:
          type: string
          writeOnly: true
        processingMethod:
          type: string
          writeOnly: true
          enum:
          - Count
          - Weight
        processingNotes:
          type: string
          writeOnly: true
        processingStaffResponsible:
          type: string
          writeOnly: true
        processingStartDate:
          type: string
          format: date
          writeOnly: true
        rare:
          type: string
          writeOnly: true
          enum:
          - "No"
          - "Yes"
          - Unsure
        receivedDate:
          type: string
          format: date
          writeOnly: true
        secondaryCollectors:
          uniqueItems: true
          type: array
          writeOnly: true
          items:
            type: string
        seedsCounted:
          type: integer
          format: int32
          writeOnly: true
        siteLocation:
          type: string
          writeOnly: true
        sourcePlantOrigin:
          type: string
          writeOnly: true
          enum:
          - Wild
          - Outplant
        species:
          type: string
          writeOnly: true
        storageLocation:
          type: string
          writeOnly: true
        storageNotes:
          type: string
          writeOnly: true
        storagePackets:
          type: integer
          format: int32
          writeOnly: true
        storageStaffResponsible:
          type: string
          writeOnly: true
        storageStartDate:
          type: string
          format: date
          writeOnly: true
        subsetCount:
          type: integer
          format: int32
          writeOnly: true
        subsetWeightGrams:
          type: number
          writeOnly: true
        targetStorageCondition:
          type: string
          writeOnly: true
          enum:
          - Refrigerator
          - Freezer
        totalWeightGrams:
          type: number
          writeOnly: true
        withdrawals:
          type: array
          writeOnly: true
          items:
            $ref: '#/components/schemas/WithdrawalPayload'
    UpdateAccessionResponsePayload:
      required:
      - accession
      - status
      type: object
      properties:
        accession:
          $ref: '#/components/schemas/AccessionPayload'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    UpdateSpeciesResponsePayload:
      required:
      - status
      type: object
      properties:
        mergedWithSpeciesId:
          type: integer
          description: "If the requested species name already existed, the ID of the\
            \ existing species. Will not be present if the requested species name\
            \ did not already exist."
          format: int64
        status:
          $ref: '#/components/schemas/SuccessOrError'
    UploadPhotoMetadataPayload:
      required:
      - capturedTime
      type: object
      properties:
        capturedTime:
          type: string
          format: date-time
        latitude:
          type: number
        longitude:
          type: number
        gpsAccuracy:
          type: integer
          description: GPS accuracy in meters.
          format: int32
    WithdrawalPayload:
      required:
      - date
      - purpose
      type: object
      properties:
        id:
          type: integer
          description: "Server-assigned unique ID of this withdrawal, its ID. Omit\
            \ when creating a new withdrawal."
          format: int64
        date:
          type: string
          format: date
        purpose:
          type: string
          enum:
          - Propagation
          - Outreach or Education
          - Research
          - Broadcast
          - Share with Another Site
          - Other
        seedsWithdrawn:
          type: integer
          description: "Number of seeds withdrawn. If gramsWithdrawn is specified,\
            \ this is a server-calculated estimate based on seed weight and is ignored\
            \ (and may be omitted) when creating a new withdrawal."
          format: int32
        gramsWithdrawn:
          type: number
          description: "If the withdrawal was measured by weight, its weight in grams.\
            \ Null if the withdrawal has an exact seed count. If this is non-null,\
            \ seedsWithdrawn is a server-calculated estimate. Weight-based withdrawals\
            \ are only allowed for accessions whose seed counts were estimated by\
            \ weight."
        destination:
          type: string
        notes:
          type: string
        staffResponsible:
          type: string
  securitySchemes:
    ApiKey:
      type: http
      description: Key-based authentication for non-browser-based clients. Username
        is currently ignored; password should be the API key.
      scheme: basic
