package com.terraformation.backend.auth

import java.io.ByteArrayInputStream
import java.io.ObjectInputStream
import java.util.HexFormat
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.assertDoesNotThrow

/**
 * Verifies that the current version of the code can deserialize existing login session data. This
 * would typically only be expected to fail when we upgrade Spring. (But not all Spring upgrades
 * involve changes to the session format.)
 *
 * If this fails, it means existing login sessions will be invalid when the code is deployed.
 * Clients that are trying to use existing sessions will get HTTP 500 responses. That includes the
 * frontend test suite, which uses a canned session object.
 *
 * What to do if this fails:
 *
 * 1. Add a database migration to delete the existing data from `spring_session` and
 * `spring_session_attributes`. See the V93 migration for an example.
 * 2. Run `./gradlew generateFrontEndTestSession` to generate session data using the current code
 * base.
 * 3. Replace the value of [hexEncodedSecurityContext] with the output of that command.
 * 4. Edit `dump/dump.sql` in the terraware-web repo. In the `COPY public.spring_session_attributes`
 * statement, replace the existing hex string with the new one. (Keep the `\\x` prefix, though.)
 * 5. Merge that edit into terraware-web right away after you've merged the server-side change, so
 * the frontend test suite won't be broken for everyone.
 */
class SpringSessionCompatibilityTest {
  private val hexEncodedSecurityContext =
      "aced00057372003d6f72672e737072696e676672616d65776f726b2e73656375726974792e636f72652e636f6e746578742e5365637572697479436f6e74657874496d706c000000000000023a0200014c000e61757468656e7469636174696f6e7400324c6f72672f737072696e676672616d65776f726b2f73656375726974792f636f72652f41757468656e7469636174696f6e3b7870737200466f72672e6b6579636c6f616b2e61646170746572732e737072696e6773656375726974792e746f6b656e2e4b6579636c6f616b41757468656e7469636174696f6e546f6b656eda86957eca6a83df0200025a000b696e7465726163746976654c00097072696e636970616c7400194c6a6176612f73656375726974792f5072696e636970616c3b787200476f72672e737072696e676672616d65776f726b2e73656375726974792e61757468656e7469636174696f6e2e416273747261637441757468656e7469636174696f6e546f6b656ed3aa287e6e47640e0200035a000d61757468656e746963617465644c000b617574686f7269746965737400164c6a6176612f7574696c2f436f6c6c656374696f6e3b4c000764657461696c737400124c6a6176612f6c616e672f4f626a6563743b787001737200266a6176612e7574696c2e436f6c6c656374696f6e7324556e6d6f6469666961626c654c697374fc0f2531b5ec8e100200014c00046c6973747400104c6a6176612f7574696c2f4c6973743b7872002c6a6176612e7574696c2e436f6c6c656374696f6e7324556e6d6f6469666961626c65436f6c6c656374696f6e19420080cb5ef71e0200014c00016371007e00067870737200136a6176612e7574696c2e41727261794c6973747881d21d99c7619d03000149000473697a65787000000002770400000002737200396f72672e6b6579636c6f616b2e61646170746572732e737072696e6773656375726974792e6163636f756e742e4b6579636c6f616b526f6c65e5b7a8aba8a1b6330200014c0004726f6c657400124c6a6176612f6c616e672f537472696e673b787074000e6f66666c696e655f6163636573737371007e000f740011756d615f617574686f72697a6174696f6e7871007e000e737200426f72672e6b6579636c6f616b2e61646170746572732e737072696e6773656375726974792e6163636f756e742e53696d706c654b6579636c6f616b4163636f756e74ea2aacae4326d7000200034c00097072696e636970616c71007e00044c0005726f6c657374000f4c6a6176612f7574696c2f5365743b4c000f7365637572697479436f6e7465787474003a4c6f72672f6b6579636c6f616b2f61646170746572732f5265667265736861626c654b6579636c6f616b5365637572697479436f6e746578743b78707372001e6f72672e6b6579636c6f616b2e4b6579636c6f616b5072696e636970616c87bb732ef1ba8cde0200024c0007636f6e746578747400264c6f72672f6b6579636c6f616b2f4b6579636c6f616b5365637572697479436f6e746578743b4c00046e616d6571007e00107870737200386f72672e6b6579636c6f616b2e61646170746572732e5265667265736861626c654b6579636c6f616b5365637572697479436f6e7465787466f37797d76b64c00200014c000c72656672657368546f6b656e71007e0010787200246f72672e6b6579636c6f616b2e4b6579636c6f616b5365637572697479436f6e74657874f4f6350ff310d0110300024c000d6964546f6b656e537472696e6771007e00104c000b746f6b656e537472696e6771007e001078707074000d2e65794a70595851694f6a4239787074002430643034353235632d373933332d346365632d393634372d3762366163323634323833387372001b6b6f746c696e2e636f6c6c656374696f6e732e456d7074795365742f46b01576d7e2f4020000787071007e001e0171007e001b"

  @Test
  fun `can deserialize security context used by frontend test suite`() {
    val binary = HexFormat.of().parseHex(hexEncodedSecurityContext)

    assertDoesNotThrow("Serialized session format has changed! See class docs for instructions.") {
      ObjectInputStream(ByteArrayInputStream(binary)).readObject()!!
    }
  }
}
