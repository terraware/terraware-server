CREATE TABLE accelerator.report_frequencies (
    id INTEGER PRIMARY KEY,
    name TEXT NOT NULL UNIQUE
);

CREATE TABLE accelerator.report_statuses (
    id INTEGER PRIMARY KEY,
    name TEXT NOT NULL UNIQUE
);

-- Inserted to be referenced by reports constraints checks. Also repeated in R__TypeCodes.sql
INSERT INTO accelerator.report_statuses (id, name)
VALUES (1, 'Not Submitted'),
       (2, 'Submitted'),
       (3, 'Approved'),
       (4, 'Needs Update'),
       (5, 'Not Needed')
ON CONFLICT (id) DO UPDATE SET name = excluded.name;

CREATE TABLE accelerator.project_report_configs (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    project_id BIGINT NOT NULL REFERENCES projects ON DELETE CASCADE,
    report_frequency_id INTEGER NOT NULL REFERENCES accelerator.report_frequencies,
    reporting_start_date DATE NOT NULL,
    reporting_end_date DATE NOT NULL CHECK (reporting_end_date > reporting_start_date),

    -- Used as foreign key for reports, and for indexing project_id in reports.
    UNIQUE (id, project_id)
);


CREATE TABLE accelerator.reports (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    config_id BIGINT NOT NULL REFERENCES accelerator.project_report_configs,
    project_id BIGINT NOT NULL REFERENCES projects ON DELETE CASCADE,
    status_id INTEGER REFERENCES accelerator.report_statuses,
    start_date DATE NOT NULL,
    end_date DATE NOT NULL CHECK (end_date > start_date),
    internal_comment TEXT,
    feedback TEXT,
    created_by BIGINT NOT NULL REFERENCES users,
    created_time TIMESTAMP WITH TIME ZONE NOT NULL,
    modified_by BIGINT NOT NULL REFERENCES users,
    modified_time TIMESTAMP WITH TIME ZONE NOT NULL,
    submitted_by BIGINT REFERENCES users,
    submitted_time TIMESTAMP WITH TIME ZONE,

    FOREIGN KEY (config_id, project_id) REFERENCES accelerator.project_report_configs(id, project_id),

    -- Checks that submission status matches with submitted_by and submitted_time nullness.
    CONSTRAINT submitted_status CHECK ((
        -- 'Not Submitted'
        status_id = 1 AND
        submitted_by IS NULL AND
        submitted_time IS NULL
        ) OR (
        -- 'Submitted', 'Approved', 'Needs Update'
        (status_id = 2 OR status_id = 3 OR status_id = 4) AND
        submitted_by IS NOT NULL AND
        submitted_time IS NOT NULL
        ) OR (
        -- A 'Not Needed' status has no requirements
        status_id = 5
    ))
);
