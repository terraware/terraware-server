-- Track whether a monitoring plot is system-generated or ad-hoc. Ad-hoc plots won't be reused as
-- assigned plots in later observations.
ALTER TABLE tracking.monitoring_plots
    ADD COLUMN is_ad_hoc BOOLEAN;
UPDATE tracking.monitoring_plots
    SET is_ad_hoc = FALSE;
ALTER TABLE tracking.monitoring_plots
    ALTER COLUMN is_ad_hoc SET NOT NULL;

-- Monitoring plots will be able to fall outside the site boundaries; they will still be associated
-- with the site, but not with any subzones. Stop requiring that plots be in subzones, and add an
-- association between plots and sites.
--
-- For plots that ARE in subzones, both the subzone and site IDs will be populated.
--
-- If a planting site is edited such that a plot is no longer in its original subzone, the subzone
-- ID will be updated, but the site ID will stay the same. The previous subzone association, if any,
-- will still be tracked in planting_subzone_histories.
ALTER TABLE tracking.monitoring_plots
    ALTER COLUMN planting_subzone_id DROP NOT NULL;
ALTER TABLE tracking.monitoring_plots
    ADD COLUMN planting_site_id BIGINT
        REFERENCES tracking.planting_sites ON DELETE CASCADE;
UPDATE tracking.monitoring_plots mp
    SET planting_site_id = (
        SELECT planting_site_id
        FROM tracking.planting_subzones ps
        WHERE ps.id = mp.planting_subzone_id
    );
ALTER TABLE tracking.monitoring_plots
    ALTER COLUMN planting_site_id SET NOT NULL;

-- Previously, we only kept edit history for sites, zones, and subzones because it wasn't allowed to
-- change a subzone's boundaries such that an existing plot would move. That will no longer be the
-- case, so start keeping history for monitoring plots too, minus the plot boundaries which don't
-- change with map edits.
CREATE TABLE tracking.monitoring_plot_histories (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    monitoring_plot_id BIGINT NOT NULL REFERENCES tracking.monitoring_plots ON DELETE CASCADE,
    planting_subzone_id BIGINT REFERENCES tracking.planting_subzones ON DELETE SET NULL,
    planting_site_id BIGINT NOT NULL REFERENCES tracking.planting_sites ON DELETE CASCADE,
    planting_subzone_history_id BIGINT REFERENCES tracking.planting_subzone_histories ON DELETE CASCADE,
    planting_site_history_id BIGINT NOT NULL REFERENCES tracking.planting_site_histories ON DELETE CASCADE,
    name TEXT NOT NULL,
    full_name TEXT NOT NULL
);

-- Populate the plot histories with the current data for each plot.
INSERT INTO tracking.monitoring_plot_histories (
    monitoring_plot_id,
    planting_subzone_id,
    planting_site_id,
    planting_subzone_history_id,
    planting_site_history_id,
    name,
    full_name)
SELECT mp.id,
       mp.planting_subzone_id,
       mp.planting_site_id,
       MAX(pszh.id),
       MAX(pzh.planting_site_history_id),
       mp.name,
       mp.full_name
FROM tracking.monitoring_plots mp
JOIN tracking.planting_subzone_histories pszh ON mp.planting_subzone_id = pszh.planting_subzone_id
JOIN tracking.planting_zone_histories pzh ON pszh.planting_zone_history_id = pzh.id
GROUP BY mp.id, mp.planting_subzone_id, mp.planting_site_id, mp.name, mp.full_name;

-- Record which version of a plot was observed so we can link it to its correct subzone at the
-- time of the observation. Start off with the plot histories we just inserted above.
ALTER TABLE tracking.observation_plots
    ADD COLUMN monitoring_plot_history_id BIGINT
        REFERENCES tracking.monitoring_plot_histories ON DELETE CASCADE;
UPDATE tracking.observation_plots op
    SET monitoring_plot_history_id = (
        SELECT id
        FROM tracking.monitoring_plot_histories mph
        WHERE mph.monitoring_plot_id = op.monitoring_plot_id
    );
ALTER TABLE tracking.observation_plots
    ALTER COLUMN monitoring_plot_history_id SET NOT NULL;

-- Index all the newly-added foreign key columns.
CREATE INDEX ON tracking.monitoring_plots (planting_site_id);
CREATE INDEX ON tracking.monitoring_plot_histories (monitoring_plot_id);
CREATE INDEX ON tracking.monitoring_plot_histories (planting_subzone_id);
CREATE INDEX ON tracking.monitoring_plot_histories (planting_site_id);
CREATE INDEX ON tracking.monitoring_plot_histories (planting_subzone_history_id);
CREATE INDEX ON tracking.monitoring_plot_histories (planting_site_history_id);
CREATE INDEX ON tracking.observation_plots (monitoring_plot_history_id);


-- -------------------------------------
-- SPECULATIVE!
-- -------------------------------------


-- Allocate numeric plot names at the site level rather than the subzone level since plots can
-- switch between subzones and might not be in subzones at all.

-- First, rename the existing plots to conform to the new scheme. Sites with just one subzone should
-- already be numbered correctly.
WITH new_names AS (
    SELECT mp.id AS monitoring_plot_id,
           CAST(ROW_NUMBER() OVER (PARTITION BY mp.planting_site_id ORDER BY mp.id) AS TEXT) AS plot_name,
           psz.full_name AS subzone_full_name
    FROM tracking.monitoring_plots mp
    JOIN tracking.planting_subzones psz ON mp.planting_subzone_id = psz.id
)
UPDATE tracking.monitoring_plots mp
SET name = new_names.plot_name,
    full_name = new_names.subzone_full_name || '-' || new_names.plot_name
FROM new_names
WHERE mp.id = new_names.monitoring_plot_id
AND mp.name <> new_names.plot_name;

-- Record the renames in the new history table.
--
-- TODO: Treat this as a planting site edit so the renames show up as an event in the site's
--       edit history. Need to insert new site, zone, and subzone histories and link the new
--       plot histories to them.
INSERT INTO tracking.monitoring_plot_histories (
    monitoring_plot_id,
    planting_subzone_id,
    planting_site_id,
    planting_subzone_history_id,
    planting_site_history_id,
    name,
    full_name)
SELECT mph.monitoring_plot_id,
       mph.planting_subzone_id,
       mph.planting_site_id,
       mph.planting_subzone_history_id,
       mph.planting_site_history_id,
       mp.name,
       mp.full_name
FROM tracking.monitoring_plot_histories mph
JOIN tracking.monitoring_plots mp ON mph.monitoring_plot_id = mp.id
WHERE mph.name <> mp.name;

ALTER TABLE tracking.monitoring_plots DROP CONSTRAINT monitoring_plots_planting_subzone_id_name_key;

-- TODO: Discuss whether we want to enforce site-level name uniqueness, in the context of ad-hoc
--       plot names being generated offline in the mobile app and being user-editable.
ALTER TABLE tracking.monitoring_plots ADD CONSTRAINT unique_name_per_site UNIQUE (planting_site_id, name);

-- TODO: Discuss whether we want to get rid of the "full name" concept, which doesn't mesh well with
--       plots being able to move between subzones or live outside the site boundary.
