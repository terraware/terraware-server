CREATE TABLE growth_forms (
    id INTEGER NOT NULL PRIMARY KEY,
    name TEXT NOT NULL
);

CREATE TABLE seed_storage_behaviors (
    id INTEGER NOT NULL PRIMARY KEY,
    name TEXT NOT NULL
);

ALTER TABLE species RENAME TO old_species;

CREATE TABLE species (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    organization_id BIGINT NOT NULL REFERENCES organizations,
    scientific_name TEXT NOT NULL,
    common_name TEXT,
    family_name TEXT,
    endangered BOOLEAN,
    rare BOOLEAN,
    growth_form_id INTEGER REFERENCES growth_forms,
    seed_storage_behavior_id INTEGER REFERENCES seed_storage_behaviors,
    created_by BIGINT NOT NULL REFERENCES users,
    created_time TIMESTAMP WITH TIME ZONE NOT NULL,
    modified_by BIGINT NOT NULL REFERENCES users,
    modified_time TIMESTAMP WITH TIME ZONE NOT NULL,
    deleted_by BIGINT REFERENCES users,
    deleted_time TIMESTAMP WITH TIME ZONE,
    -- Temporarily include the corresponding ID from the old species table so we can update FKs.
    old_species_id BIGINT REFERENCES species,
    UNIQUE (organization_id, scientific_name)
);

CREATE UNIQUE INDEX ON species (organization_id, old_species_id);

INSERT INTO species (organization_id, scientific_name, common_name,
                     created_by, created_time, modified_by, modified_time,
                     old_species_id)
WITH ranked_names AS (
    -- The relevant columns of the species_names table grouped by species, org, and is_scientific
    -- and sorted by creation time within each group, so we can pick the first of each kind of name
    -- (scientific and common) for each of an organization's species.
    SELECT *,
           ROW_NUMBER() OVER (
               PARTITION BY species_id, organization_id, is_scientific
               ORDER BY created_time) AS pos
    FROM species_names),
     -- The earliest name of each type for each species in each org.
     earliest_names AS (SELECT * FROM ranked_names WHERE pos = 1),
     scientific_names AS (SELECT * FROM earliest_names WHERE is_scientific),
     common_names AS (SELECT * FROM earliest_names WHERE NOT is_scientific),
     unified_names AS (
         -- A row for each of an organization's species with a column for scientific name and a
         -- column for common name. If there's no scientific name for a species, the common name
         -- is used for both.
         SELECT cn.*,
                cn.name                    AS common_name,
                COALESCE(sn.name, cn.name) AS scientific_name
         FROM common_names cn
                  LEFT JOIN scientific_names sn USING (species_id, organization_id))
SELECT organization_id,
       scientific_name,
       common_name,
       created_by,
       created_time,
       created_by,
       created_time,
       species_id
FROM unified_names;

ALTER TABLE accessions RENAME COLUMN species_id TO old_species_id;
ALTER TABLE accessions ADD COLUMN species_id BIGINT REFERENCES species;
UPDATE accessions
SET species_id = (SELECT id
                  FROM species
                  WHERE species.old_species_id = accessions.old_species_id
                    AND species.organization_id = (SELECT p.organization_id
                                                   FROM projects p
                                                       JOIN sites s ON p.id = s.project_id
                                                       JOIN facilities f ON s.id = f.site_id
                                                   WHERE f.id = accessions.facility_id))
WHERE species_id IS NULL;
ALTER TABLE accessions DROP COLUMN old_species_id;

ALTER TABLE species DROP COLUMN old_species_id;

DROP TABLE species_options;
DROP TABLE species_names;
DROP TABLE old_species;
DROP TABLE plant_forms;
DROP TABLE conservation_statuses;
