ALTER TABLE files ADD COLUMN file_date DATE;
ALTER TABLE files ADD COLUMN width INTEGER;
ALTER TABLE files ADD COLUMN height INTEGER;

CREATE SCHEMA IF NOT EXISTS docprod;

CREATE TABLE docprod.document_templates (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name TEXT NOT NULL,

    UNIQUE (name)
);

CREATE TABLE docprod.variable_types (
    id INTEGER PRIMARY KEY,
    name TEXT NOT NULL UNIQUE
);

CREATE TABLE docprod.variables (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    variable_type_id INTEGER NOT NULL REFERENCES docprod.variable_types,
    replaces_variable_id BIGINT REFERENCES docprod.variables ON DELETE SET NULL,
    is_list BOOLEAN NOT NULL DEFAULT FALSE,
    stable_id TEXT NOT NULL,
    name TEXT NOT NULL,
    description TEXT,

    CONSTRAINT cannot_have_multiple_replacements
        UNIQUE (replaces_variable_id),

    -- Compound unique key so child tables can constrain themselves to variables of the correct type.
    UNIQUE (id, variable_type_id)
);

CREATE TABLE docprod.variable_manifests (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    document_template_id BIGINT NOT NULL REFERENCES docprod.document_templates,
    created_by BIGINT NOT NULL DEFAULT -1 REFERENCES users ON DELETE SET DEFAULT,
    created_time TIMESTAMP WITH TIME ZONE NOT NULL
);

CREATE TABLE docprod.variable_manifest_entries (
    variable_manifest_id BIGINT NOT NULL REFERENCES docprod.variable_manifests,
    variable_id BIGINT NOT NULL REFERENCES docprod.variables,
    position INTEGER NOT NULL,

    PRIMARY KEY (variable_manifest_id, variable_id),
    UNIQUE (variable_manifest_id, position)
);

CREATE TABLE docprod.variable_numbers (
    variable_id BIGINT PRIMARY KEY REFERENCES docprod.variables ON DELETE CASCADE,
    variable_type_id INTEGER NOT NULL REFERENCES docprod.variable_types,
    min_value NUMERIC,
    max_value NUMERIC,
    decimal_places INTEGER NOT NULL DEFAULT 0,

    CHECK (variable_type_id = 1),

    FOREIGN KEY (variable_id, variable_type_id) REFERENCES docprod.variables (id, variable_type_id)
);

CREATE TABLE docprod.variable_text_types (
    id INTEGER PRIMARY KEY,
    name TEXT NOT NULL UNIQUE
);

CREATE TABLE docprod.variable_texts (
    variable_id BIGINT PRIMARY KEY,
    variable_type_id INTEGER NOT NULL REFERENCES docprod.variable_types,
    variable_text_type_id INTEGER NOT NULL REFERENCES docprod.variable_text_types,

    CHECK (variable_type_id = 2),

    FOREIGN KEY (variable_id, variable_type_id) REFERENCES docprod.variables (id, variable_type_id) ON DELETE CASCADE
);

CREATE TABLE docprod.variable_sections (
    variable_id BIGINT PRIMARY KEY,
    variable_type_id INTEGER NOT NULL REFERENCES docprod.variable_types,
    parent_variable_id BIGINT,
    parent_variable_type_id INTEGER REFERENCES docprod.variable_types,
    render_heading BOOLEAN NOT NULL DEFAULT TRUE,

    CHECK (variable_type_id = 8),
    CHECK (parent_variable_type_id IS NULL OR parent_variable_type_id = 8),

    FOREIGN KEY (variable_id, variable_type_id) REFERENCES docprod.variables (id, variable_type_id) ON DELETE CASCADE,
    FOREIGN KEY (parent_variable_id, parent_variable_type_id) REFERENCES docprod.variables (id, variable_type_id) ON DELETE CASCADE
);

CREATE TABLE docprod.variable_section_recommendations (
    section_variable_id BIGINT NOT NULL REFERENCES docprod.variables ON DELETE CASCADE,
    section_variable_type_id INTEGER NOT NULL REFERENCES docprod.variable_types,
    recommended_variable_id BIGINT NOT NULL REFERENCES docprod.variables ON DELETE CASCADE,
    variable_manifest_id BIGINT NOT NULL REFERENCES docprod.variable_manifests ON DELETE CASCADE,

    PRIMARY KEY (section_variable_id, variable_manifest_id, recommended_variable_id),
    UNIQUE (recommended_variable_id, variable_manifest_id, section_variable_id),

    CHECK (section_variable_type_id = 8)
);

CREATE TABLE docprod.variable_selects (
    variable_id BIGINT PRIMARY KEY,
    variable_type_id INTEGER NOT NULL REFERENCES docprod.variable_types,
    is_multiple BOOLEAN NOT NULL,

    CHECK (variable_type_id = 5),

    UNIQUE (variable_id, variable_type_id),

    FOREIGN KEY (variable_id, variable_type_id) REFERENCES docprod.variables (id, variable_type_id) ON DELETE CASCADE
);

CREATE TABLE docprod.variable_select_options (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    variable_id BIGINT NOT NULL REFERENCES docprod.variables ON DELETE CASCADE,
    variable_type_id INTEGER NOT NULL REFERENCES docprod.variable_types,
    position INTEGER NOT NULL,
    name TEXT NOT NULL,
    description TEXT,
    rendered_text TEXT,

    UNIQUE (id, variable_id),

    FOREIGN KEY (variable_id, variable_type_id) REFERENCES docprod.variable_selects (variable_id, variable_type_id) ON DELETE CASCADE
);

CREATE TABLE docprod.variable_table_styles (
    id INTEGER PRIMARY KEY,
    name TEXT NOT NULL UNIQUE
);

CREATE TABLE docprod.variable_tables (
    variable_id BIGINT PRIMARY KEY,
    variable_type_id INTEGER NOT NULL REFERENCES docprod.variable_types,
    table_style_id INTEGER NOT NULL REFERENCES docprod.variable_table_styles,

    CHECK (variable_type_id = 6),

    UNIQUE (variable_id, variable_type_id),

    FOREIGN KEY (variable_id, variable_type_id) REFERENCES docprod.variables (id, variable_type_id) ON DELETE CASCADE
);

CREATE TABLE docprod.variable_table_columns (
    variable_id BIGINT PRIMARY KEY REFERENCES docprod.variables,
    table_variable_id BIGINT NOT NULL REFERENCES docprod.variables,
    table_variable_type_id INTEGER NOT NULL REFERENCES docprod.variable_types,
    position INTEGER NOT NULL,
    is_header BOOLEAN NOT NULL,

    CHECK (table_variable_type_id = 6),

    UNIQUE (table_variable_id, position),

    FOREIGN KEY (table_variable_id, table_variable_type_id)
        REFERENCES docprod.variable_tables (variable_id, variable_type_id)
        ON DELETE CASCADE
);

CREATE TABLE docprod.document_statuses (
    id INTEGER PRIMARY KEY,
    name TEXT NOT NULL UNIQUE
);

CREATE TABLE docprod.documents (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    document_template_id BIGINT NOT NULL REFERENCES docprod.document_templates,
    variable_manifest_id BIGINT NOT NULL REFERENCES docprod.variable_manifests,
    project_id BIGINT NOT NULL REFERENCES projects,
    name TEXT NOT NULL,
    status_id INTEGER NOT NULL REFERENCES docprod.document_statuses,
    owned_by BIGINT NOT NULL DEFAULT -1 REFERENCES users ON DELETE SET DEFAULT,
    created_by BIGINT NOT NULL DEFAULT -1 REFERENCES users ON DELETE SET DEFAULT,
    created_time TIMESTAMP WITH TIME ZONE NOT NULL,
    modified_by BIGINT NOT NULL DEFAULT -1 REFERENCES users ON DELETE SET DEFAULT,
    modified_time TIMESTAMP WITH TIME ZONE NOT NULL,

    UNIQUE (name)
);

CREATE INDEX ON docprod.documents (project_id);

CREATE TABLE docprod.document_saved_versions (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    document_id BIGINT NOT NULL REFERENCES docprod.documents ON DELETE CASCADE,
    variable_manifest_id BIGINT NOT NULL REFERENCES docprod.variable_manifests,
    max_variable_value_id BIGINT NOT NULL,
    created_by BIGINT NOT NULL DEFAULT -1 REFERENCES users ON DELETE SET DEFAULT,
    created_time TIMESTAMP WITH TIME ZONE NOT NULL,
    name TEXT,
    is_submitted BOOLEAN NOT NULL DEFAULT FALSE,
    is_accepted BOOLEAN NOT NULL DEFAULT FALSE
);

CREATE TABLE docprod.variable_values (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    project_id BIGINT NOT NULL REFERENCES projects,
    variable_id BIGINT NOT NULL REFERENCES docprod.variables,
    variable_type_id INTEGER NOT NULL REFERENCES docprod.variable_types,
    list_position INTEGER NOT NULL DEFAULT 0,
    created_by BIGINT NOT NULL DEFAULT -1 REFERENCES users ON DELETE SET DEFAULT,
    created_time TIMESTAMP WITH TIME ZONE NOT NULL,
    is_deleted BOOLEAN NOT NULL DEFAULT FALSE,
    number_value NUMERIC,
    text_value TEXT,
    date_value DATE,
    citation TEXT,

    CHECK (number_value IS NULL OR variable_type_id = 1),
    CHECK (text_value IS NULL OR variable_type_id = 2),

    -- Unique keys to allow child tables to enforce that values are for the right variables.
    UNIQUE (variable_id, id),
    UNIQUE (variable_id, variable_type_id, id),

    FOREIGN KEY (variable_id, variable_type_id) REFERENCES docprod.variables (id, variable_type_id)
);

CREATE INDEX ON docprod.variable_values (project_id);

CREATE TABLE docprod.variable_image_values (
    variable_value_id BIGINT PRIMARY KEY REFERENCES docprod.variable_values ON DELETE CASCADE,
    variable_id BIGINT NOT NULL REFERENCES docprod.variables,
    variable_type_id INTEGER NOT NULL REFERENCES docprod.variable_types,
    file_id BIGINT NOT NULL REFERENCES files,
    caption TEXT,

    CHECK (variable_type_id = 4),

    FOREIGN KEY (variable_value_id, variable_id, variable_type_id) REFERENCES docprod.variable_values (id, variable_id, variable_type_id)
);

CREATE INDEX ON docprod.variable_image_values (file_id);

CREATE TABLE docprod.variable_link_values (
    variable_value_id BIGINT PRIMARY KEY REFERENCES docprod.variable_values ON DELETE CASCADE,
    variable_id BIGINT NOT NULL REFERENCES docprod.variables,
    variable_type_id INTEGER NOT NULL REFERENCES docprod.variable_types,
    url TEXT NOT NULL,
    title TEXT,

    CHECK (variable_type_id = 7),

    FOREIGN KEY (variable_value_id, variable_id, variable_type_id) REFERENCES docprod.variable_values (id, variable_id, variable_type_id)
);

CREATE TABLE docprod.variable_injection_display_styles (
    id INTEGER PRIMARY KEY,
    name TEXT NOT NULL UNIQUE
);

CREATE TABLE docprod.variable_usage_types (
    id INTEGER PRIMARY KEY,
    name TEXT NOT NULL UNIQUE
);

-- Also in R__TypeCodes.sql, but duplicated here to clarify what the constraints mean
INSERT INTO docprod.variable_usage_types (id, name)
VALUES (1, 'Injection'),
       (2, 'Reference');

CREATE TABLE docprod.variable_section_values (
    variable_value_id BIGINT PRIMARY KEY REFERENCES docprod.variable_values ON DELETE CASCADE,
    variable_id BIGINT NOT NULL REFERENCES docprod.variables,
    variable_type_id INTEGER NOT NULL REFERENCES docprod.variable_types,
    usage_type_id INTEGER REFERENCES docprod.variable_usage_types,
    text_value TEXT,
    used_variable_id BIGINT REFERENCES docprod.variables,
    used_variable_type_id INTEGER REFERENCES docprod.variable_types,
    display_style_id INTEGER REFERENCES docprod.variable_injection_display_styles,

    CONSTRAINT cannot_reference_other_sections
        CHECK (used_variable_type_id IS NULL OR used_variable_type_id <> 8),
    CONSTRAINT cannot_have_both_text_and_reference
        CHECK (text_value IS NULL OR used_variable_id IS NULL),
    CONSTRAINT must_have_text_or_reference
        CHECK (text_value IS NOT NULL OR used_variable_id IS NOT NULL),
    CONSTRAINT usages_must_have_types
        CHECK ((used_variable_id IS NULL) = (usage_type_id IS NULL)),
    CONSTRAINT injection_has_display_style
        CHECK ((usage_type_id = 1) = (display_style_id IS NOT NULL)),
    -- 4 = image, 6 = table, 8 = section
    CONSTRAINT reference_only_for_figures_and_sections
        CHECK (usage_type_id <> 2 OR used_variable_type_id IN (4, 6, 8)),
    CONSTRAINT cannot_inject_sections
        CHECK (NOT (usage_type_id = 1 AND used_variable_type_id = 8)),

    FOREIGN KEY (used_variable_id, used_variable_type_id) REFERENCES docprod.variables (id, variable_type_id),
    FOREIGN KEY (variable_value_id, variable_id, variable_type_id) REFERENCES docprod.variable_values (id, variable_id, variable_type_id)
);

CREATE INDEX ON docprod.variable_section_values (used_variable_id);

CREATE TABLE docprod.variable_select_option_values (
    variable_value_id BIGINT REFERENCES docprod.variable_values ON DELETE CASCADE,
    variable_id BIGINT NOT NULL REFERENCES docprod.variable_selects,
    variable_type_id INTEGER NOT NULL REFERENCES docprod.variable_types,
    option_id BIGINT NOT NULL REFERENCES docprod.variable_select_options,

    PRIMARY KEY (variable_value_id, option_id),

    CHECK (variable_type_id = 5),

    FOREIGN KEY (option_id, variable_id) REFERENCES docprod.variable_select_options (id, variable_id),
    FOREIGN KEY (variable_value_id, variable_id, variable_type_id) REFERENCES docprod.variable_values (id, variable_id, variable_type_id)
);

CREATE TABLE docprod.variable_value_table_rows (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    variable_value_id BIGINT NOT NULL REFERENCES docprod.variable_values ON DELETE CASCADE,
    table_row_value_id BIGINT NOT NULL REFERENCES docprod.variable_values ON DELETE CASCADE,

    UNIQUE (variable_value_id, table_row_value_id)
);

CREATE INDEX ON docprod.variable_value_table_rows (table_row_value_id);

CREATE FUNCTION docprod.reject_delete() RETURNS TRIGGER AS $$
BEGIN
    RAISE 'This table does not allow deletes.';
END;
$$ LANGUAGE plpgsql;

CREATE FUNCTION docprod.reject_update() RETURNS TRIGGER AS $$
BEGIN
    RAISE 'This table does not allow updates.';
END;
$$ LANGUAGE plpgsql;

CREATE FUNCTION docprod.reject_delete_value() RETURNS TRIGGER AS $$
BEGIN
    IF EXISTS (SELECT 1 FROM documents WHERE id = OLD.document_id) THEN
        RAISE 'This table does not allow deletes.';
    ELSE
        -- The entire document is being deleted.
        RETURN OLD;
    END IF;
END;
$$ LANGUAGE plpgsql;

CREATE FUNCTION docprod.reject_update_value() RETURNS TRIGGER AS $$
BEGIN
    IF (OLD.created_by != -1 AND NEW.created_by = -1
        AND NOT EXISTS (SELECT 1 FROM users WHERE id = OLD.created_by))
        OR (OLD.verified_by != -1 AND NEW.verified_by = -1
            AND NOT EXISTS (SELECT 1 FROM users WHERE id = OLD.verified_by))
    THEN
        RAISE 'This table does not allow updates.';
    ELSE
        -- This is an update triggered by a user being deleted.
        RETURN NEW;
    END IF;
END;
$$ LANGUAGE plpgsql;

CREATE FUNCTION docprod.reject_delete_value_child() RETURNS TRIGGER AS $$
BEGIN
    IF EXISTS (SELECT 1 FROM variable_values WHERE id = OLD.variable_value_id) THEN
        RAISE 'This table does not allow deletes.';
    ELSE
        RETURN OLD;
    END IF;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER variable_values_no_update
    BEFORE UPDATE ON docprod.variable_values
    FOR EACH ROW EXECUTE FUNCTION docprod.reject_update_value();

CREATE TRIGGER variable_values_no_delete
    BEFORE DELETE ON docprod.variable_values
    FOR EACH ROW EXECUTE FUNCTION docprod.reject_delete_value();

CREATE TRIGGER variable_image_values_no_update
    BEFORE UPDATE ON docprod.variable_image_values
    FOR EACH ROW EXECUTE FUNCTION docprod.reject_update();

CREATE TRIGGER variable_image_values_no_delete
    BEFORE DELETE ON docprod.variable_image_values
    FOR EACH ROW EXECUTE FUNCTION docprod.reject_delete_value_child();

CREATE TRIGGER variable_section_values_no_update
    BEFORE UPDATE ON docprod.variable_section_values
    FOR EACH ROW EXECUTE FUNCTION docprod.reject_update();

CREATE TRIGGER variable_section_values_no_delete
    BEFORE DELETE ON docprod.variable_section_values
    FOR EACH ROW EXECUTE FUNCTION docprod.reject_delete_value_child();

CREATE TRIGGER variable_select_option_values_no_update
    BEFORE UPDATE ON docprod.variable_select_option_values
    FOR EACH ROW EXECUTE FUNCTION docprod.reject_update();

CREATE TRIGGER variable_select_option_values_no_delete
    BEFORE DELETE ON docprod.variable_select_option_values
    FOR EACH ROW EXECUTE FUNCTION docprod.reject_delete_value_child();

CREATE TRIGGER variables_no_update
    BEFORE UPDATE ON docprod.variables
    FOR EACH ROW EXECUTE FUNCTION docprod.reject_update();

CREATE TRIGGER variables_no_delete
    BEFORE DELETE ON docprod.variables
    FOR EACH ROW EXECUTE FUNCTION docprod.reject_delete();
