CREATE TABLE tracking.observable_conditions (
    id INTEGER PRIMARY KEY,
    name TEXT NOT NULL UNIQUE
);

CREATE TABLE tracking.observation_photo_positions (
    id INTEGER PRIMARY KEY,
    name TEXT NOT NULL UNIQUE
);

CREATE TABLE tracking.recorded_plant_statuses (
    id INTEGER PRIMARY KEY,
    name TEXT NOT NULL UNIQUE
);

CREATE TABLE tracking.recorded_species_certainties (
    id INTEGER PRIMARY KEY,
    name TEXT NOT NULL UNIQUE
);

CREATE TABLE tracking.observations (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    planting_site_id BIGINT NOT NULL REFERENCES tracking.planting_sites ON DELETE CASCADE,
    created_time TIMESTAMP WITH TIME ZONE NOT NULL,
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    completed_time TIMESTAMP WITH TIME ZONE
);

CREATE INDEX ON tracking.observations (planting_site_id);

CREATE TABLE tracking.observation_plots (
    observation_id BIGINT NOT NULL REFERENCES tracking.observations ON DELETE CASCADE,
    monitoring_plot_id BIGINT NOT NULL REFERENCES tracking.monitoring_plots ON DELETE CASCADE,
    claimed_by BIGINT REFERENCES users,
    claimed_time TIMESTAMP WITH TIME ZONE,
    completed_by BIGINT REFERENCES users,
    completed_time TIMESTAMP WITH TIME ZONE,
    created_by BIGINT NOT NULL REFERENCES users,
    created_time TIMESTAMP WITH TIME ZONE NOT NULL,
    is_permanent BOOLEAN NOT NULL,
    modified_by BIGINT NOT NULL REFERENCES users,
    modified_time TIMESTAMP WITH TIME ZONE,
    observed_time TIMESTAMP WITH TIME ZONE,
    notes TEXT,

    PRIMARY KEY (observation_id, monitoring_plot_id),
    CONSTRAINT cannot_unclaim_completed_plot
        CHECK (completed_by IS NULL OR (completed_by IS NOT NULL AND claimed_by IS NOT NULL))
);

CREATE INDEX ON tracking.observation_plots (monitoring_plot_id);

CREATE TABLE tracking.observation_plot_conditions (
    observation_id BIGINT NOT NULL REFERENCES tracking.observations ON DELETE CASCADE,
    monitoring_plot_id BIGINT NOT NULL REFERENCES tracking.monitoring_plots ON DELETE CASCADE,
    condition_id INTEGER NOT NULL REFERENCES tracking.observable_conditions,

    PRIMARY KEY (observation_id, monitoring_plot_id, condition_id)
);

CREATE INDEX ON tracking.observation_plot_conditions (monitoring_plot_id);

CREATE TABLE tracking.observation_photos (
    file_id BIGINT PRIMARY KEY REFERENCES files ON DELETE CASCADE,
    observation_id BIGINT NOT NULL REFERENCES tracking.observations,
    monitoring_plot_id BIGINT NOT NULL REFERENCES tracking.monitoring_plots,
    position_id INTEGER NOT NULL REFERENCES tracking.observation_photo_positions,
    gps_coordinates GEOMETRY(Point),

    FOREIGN KEY (observation_id, monitoring_plot_id)
        REFERENCES tracking.observation_plots (observation_id, monitoring_plot_id)
);

CREATE INDEX ON tracking.observation_photos (monitoring_plot_id);
CREATE INDEX ON tracking.observation_photos (file_id);

-- This is also in R__TypeCodes.sql, but is repeated here as documentation for the check constraint
-- on recorded_plants.
INSERT INTO tracking.recorded_species_certainties (id, name)
VALUES (1, 'Known'),
       (2, 'Other'),
       (3, 'CantTell')
ON CONFLICT (id) DO UPDATE SET name = excluded.name;

CREATE TABLE tracking.recorded_plants (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    observation_id BIGINT NOT NULL REFERENCES tracking.observations ON DELETE CASCADE,
    monitoring_plot_id BIGINT NOT NULL REFERENCES tracking.monitoring_plots ON DELETE CASCADE,
    certainty_id INTEGER NOT NULL REFERENCES tracking.recorded_species_certainties,
    gps_coordinates GEOMETRY(Point) NOT NULL,
    species_id BIGINT REFERENCES species,
    species_name TEXT,
    status_id INTEGER NOT NULL REFERENCES tracking.recorded_plant_statuses,

    FOREIGN KEY (observation_id, monitoring_plot_id)
        REFERENCES tracking.observation_plots (observation_id, monitoring_plot_id)
              ON DELETE CASCADE,
    CONSTRAINT species_info_matches_certainty
        CHECK (
            (certainty_id = 1 AND species_id IS NOT NULL AND species_name IS NULL)
            OR (certainty_id = 2 AND species_id IS NULL)
            OR (certainty_id = 3 AND species_id IS NULL AND species_name IS NULL)
        )
);

CREATE INDEX ON tracking.recorded_plants (monitoring_plot_id);
CREATE INDEX ON tracking.recorded_plants (observation_id, monitoring_plot_id);
CREATE INDEX ON tracking.recorded_plants (species_id);
