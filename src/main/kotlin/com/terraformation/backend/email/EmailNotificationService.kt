package com.terraformation.backend.email

import com.terraformation.backend.config.TerrawareServerConfig
import com.terraformation.backend.customer.db.FacilityStore
import com.terraformation.backend.customer.db.OrganizationStore
import com.terraformation.backend.customer.db.UserStore
import com.terraformation.backend.customer.event.FacilityAlertRequestedEvent
import com.terraformation.backend.customer.event.FacilityIdleEvent
import com.terraformation.backend.customer.event.UserAddedToOrganizationEvent
import com.terraformation.backend.customer.model.requirePermissions
import com.terraformation.backend.db.FacilityNotFoundException
import com.terraformation.backend.db.OrganizationNotFoundException
import com.terraformation.backend.db.UserNotFoundException
import com.terraformation.backend.i18n.Messages
import com.terraformation.backend.log.perClassLogger
import javax.annotation.ManagedBean
import org.springframework.context.event.EventListener

@ManagedBean
class EmailNotificationService(
    private val config: TerrawareServerConfig,
    private val emailService: EmailService,
    private val facilityStore: FacilityStore,
    private val messages: Messages,
    private val organizationStore: OrganizationStore,
    private val userStore: UserStore,
    private val webAppUrls: WebAppUrls,
) {
  private val log = perClassLogger()

  /**
   * Sends a client-supplied alert about a facility. These alerts are typically generated by the
   * device manager.
   */
  @EventListener
  fun on(event: FacilityAlertRequestedEvent) {
    val requestedByUser =
        userStore.fetchById(event.requestedBy)
            ?: throw IllegalArgumentException("Alert requested by nonexistent user")
    requirePermissions(requestedByUser) { sendAlert(event.facilityId) }

    log.info(
        "Alert for facility ${event.facilityId} requested by user ${requestedByUser.userId} " +
            "(${requestedByUser.email})")
    log.info("Alert subject: ${event.subject}")
    log.info("Alert body: ${event.body}")

    val facility =
        facilityStore.fetchById(event.facilityId)
            ?: throw FacilityNotFoundException(event.facilityId)

    val model =
        mapOf(
            "body" to event.body,
            "facility" to facility,
            "requestedBy" to requestedByUser,
            "subject" to event.subject,
        )

    emailService.sendFacilityNotification(event.facilityId, "facilityAlert", model)
  }

  @EventListener
  fun on(event: FacilityIdleEvent) {
    val facility =
        facilityStore.fetchById(event.facilityId)
            ?: throw FacilityNotFoundException(event.facilityId)

    val model =
        mapOf(
            "facility" to facility,
            "lastTimeseriesTime" to messages.dateAndTime(facility.lastTimeseriesTime))

    emailService.sendFacilityNotification(facility.id, "facilityIdle", model)
  }

  @EventListener
  fun on(event: UserAddedToOrganizationEvent) {
    val admin = userStore.fetchById(event.addedBy) ?: throw UserNotFoundException(event.addedBy)
    val user = userStore.fetchById(event.userId) ?: throw UserNotFoundException(event.userId)
    val organization =
        organizationStore.fetchById(event.organizationId)
            ?: throw OrganizationNotFoundException(event.organizationId)

    val webAppUrl = "${config.webAppUrl}".trimEnd('/')
    val organizationHomeUrl = webAppUrls.organizationHome(event.organizationId).toString()

    val model =
        mapOf(
            "admin" to admin,
            "organization" to organization,
            "organizationHomeUrl" to organizationHomeUrl,
            "webAppUrl" to webAppUrl,
        )

    emailService.sendUserNotification(user, "userAddedToOrganization", model, requireOptIn = false)
  }
}
