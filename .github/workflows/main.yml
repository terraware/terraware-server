name: terraware-server

on:
  push:
    branches:
      - main
      - wip-*
    tags:
      - v[0-9].[0-9]+.[0-9]+
  pull_request:

jobs:
  build:
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        java-version: ["15"]

    steps:
    - uses: actions/checkout@v2

    - name: Set environment
      run: ./.github/scripts/set-environment.sh

    - name: Set up Java ${{ matrix.java-version }}
      uses: actions/setup-java@v1
      with:
        java-version: ${{ matrix.java-version }}

    - name: Cache dependencies
      id: cache-gradle
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle
          ~/.m2
        key: 2-${{ matrix.java-version }}-${{ hashFiles('*.gradle.kts', 'gradle.properties') }}

    # The build/test process is broken out into individual steps here so it's easier to watch
    # the progress of the build in the GitHub UI and so it's clearer what failed if the build
    # has problems; locally, "./gradlew check" will do all this in a single command.

    - name: Download dependencies
      run: |
        docker pull postgres:12
        ./gradlew downloadDependencies

    - name: Generate jOOQ classes
      run: ./gradlew generateJooqClasses

    - name: Check code style
      run: ./gradlew spotlessCheck

    - name: Compile main
      run: ./gradlew classes

    - name: Generate OpenAPI docs to test that server can start up
      run: ./gradlew generateOpenApiDocs

    - name: Verify that OpenAPI docs are up to date in repo
      # This will exit with code 1 if the file is modified.
      run: git diff --exit-code openapi.yaml

    - name: Compile tests
      run: ./gradlew testClasses

    - name: Run tests
      run: ./gradlew test

    - name: Extract Docker image layers
      if: ${{ matrix.java-version == '15' }}
      run: make -C docker prepare

    - name: Set up QEMU
      if: ${{ matrix.java-version == '15' }}
      uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      if: ${{ matrix.java-version == '15' }}
      uses: docker/setup-buildx-action@v1

    - name: Log into Docker Hub
      if: ${{ matrix.java-version == '15' && env.IS_CD == true }}
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Cache Docker build layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: 1-buildx-${{ matrix.java-version }}

    - name: Build Docker image and push if on main branch or tag
      if: ${{ matrix.java-version == '15' }}
      uses: docker/build-push-action@v2
      with:
        context: build/docker
        tags: |
          terraware/terraware-server:${{ env.TIER }}
          terraware/terraware-server:${{ env.COMMIT_SHA }}
        platforms: linux/amd64,linux/arm64
        push: env.IS_CD == true
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

    - name: Move Docker build cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    - name: Configure AWS Credentials
      if: ${{ env.IS_CD == true }}
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets[env.AWS_ACCESS_KEY_ID_SECRET_NAME] }}
        aws-secret-access-key: ${{ secrets[env.AWS_SECRET_ACCESS_KEY_SECRET_NAME] }}
        aws-region: ${{ secrets[env.AWS_REGION_SECRET_NAME] }}

    - name: Deploy
      if: ${[ env.IS_CD == true }}
      env:
        SSH_HOST: ${{ secrets[env.SSH_HOST_SECRET_NAME] }}
        SSH_KEY: ${{ secrets[env.SSH_KEY_SECRET_NAME] }}
        SSH_USER: ${{ secrets[env.SSH_USER_SECRET_NAME] }}
      run: ./.github/scripts/deploy.sh
