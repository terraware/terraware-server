openapi: 3.0.1
info:
  title: Terraware Server
  description: Back end for Terraware applications
  license:
    name: MIT
  version: 0.1-8b88939-SNAPSHOT
servers:
- url: http://localhost:32109
  description: Generated server url
security:
- cookie: []
- openId:
  - email
  - offline_access
  - openid
  - profile
paths:
  /api/v1/automations:
    get:
      tags:
      - DeviceManager
      summary: Gets a list of automations for a device or facility.
      operationId: listAutomations_2
      parameters:
      - name: deviceId
        in: query
        required: false
        schema:
          type: integer
          format: int64
      - name: facilityId
        in: query
        required: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAutomationsResponsePayload'
    post:
      tags:
      - DeviceManager
      operationId: createAutomation_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAutomationRequestPayload'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAutomationResponsePayload'
  /api/v1/automations/{automationId}:
    get:
      tags:
      - DeviceManager
      operationId: getAutomation_2
      parameters:
      - name: automationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAutomationResponsePayload'
    put:
      tags:
      - DeviceManager
      operationId: updateAutomation_2
      parameters:
      - name: automationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAutomationRequestPayload'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
    delete:
      tags:
      - DeviceManager
      operationId: deleteAutomation_2
      parameters:
      - name: automationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
  /api/v1/automations/{automationId}/trigger:
    post:
      tags:
      - DeviceManager
      summary: Reports that an automation has been triggered.
      operationId: postAutomationTrigger
      parameters:
      - name: automationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AutomationTriggerRequestPayload'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
  /api/v1/devices:
    post:
      tags:
      - DeviceManager
      operationId: createDevice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDeviceRequestPayload'
        required: true
      responses:
        "200":
          description: The requested operation succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
  /api/v1/devices/managers:
    get:
      tags:
      - DeviceManager
      operationId: getDeviceManagers
      parameters:
      - name: sensorKitId
        in: query
        required: false
        schema:
          type: string
      - name: facilityId
        in: query
        required: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDeviceManagersResponsePayload'
  /api/v1/devices/managers/{deviceManagerId}:
    get:
      tags:
      - DeviceManager
      operationId: getDeviceManager
      parameters:
      - name: deviceManagerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDeviceManagerResponsePayload'
  /api/v1/devices/managers/{deviceManagerId}/connect:
    post:
      tags:
      - DeviceManager
      operationId: connectDeviceManager
      parameters:
      - name: deviceManagerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectDeviceManagerRequestPayload'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
  /api/v1/devices/templates:
    get:
      tags:
      - DeviceManager
      operationId: listDeviceTemplates
      parameters:
      - name: category
        in: query
        required: false
        schema:
          type: string
          enum:
          - PV
          - Seed Bank Default
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDeviceTemplatesResponsePayload'
  /api/v1/devices/{id}:
    get:
      tags:
      - DeviceManager
      summary: Gets the configuration of a single device.
      operationId: getDevice
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Device configuration retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDeviceResponsePayload'
        "404":
          description: The requested resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
    put:
      tags:
      - DeviceManager
      summary: Updates the configuration of an existing device.
      operationId: updateDevice
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDeviceRequestPayload'
        required: true
      responses:
        "200":
          description: Device configuration updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
        "404":
          description: The requested resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
  /api/v1/devices/{id}/unresponsive:
    post:
      tags:
      - DeviceManager
      summary: Marks a device as unresponsive.
      description: Notifies the appropriate users so they can troubleshoot the problem.
      operationId: deviceUnresponsive
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceUnresponsiveRequestPayload'
        required: true
      responses:
        "200":
          description: The requested operation succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
        "404":
          description: The requested resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
  /api/v1/facilities:
    get:
      tags:
      - Customer
      summary: Lists all accessible facilities.
      operationId: listAllFacilities_1
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFacilitiesResponse'
    post:
      tags:
      - Customer
      summary: Creates a new facility.
      operationId: createFacility_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFacilityRequestPayload'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateFacilityResponsePayload'
  /api/v1/facilities/{facilityId}:
    get:
      tags:
      - Customer
      summary: Gets information about a single facility.
      operationId: getFacility
      parameters:
      - name: facilityId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFacilityResponse'
    put:
      tags:
      - Customer
      summary: Updates information about a facility.
      operationId: updateFacility
      parameters:
      - name: facilityId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFacilityRequestPayload'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
  /api/v1/facilities/{facilityId}/alert/send:
    post:
      tags:
      - Customer
      summary: Sends an alert to the facility's configured alert recipients.
      operationId: sendFacilityAlert
      parameters:
      - name: facilityId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendFacilityAlertRequestPayload'
        required: true
      responses:
        "200":
          description: The requested operation succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
        "202":
          description: "The request was received, but the user is still configuring\
            \ or placing sensors, so no notification has been generated."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
  /api/v1/facilities/{facilityId}/automations:
    get:
      tags:
      - Customer
      summary: Lists a facility's automations.
      operationId: listAutomations_1
      parameters:
      - name: facilityId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAutomationsResponsePayload'
        "404":
          description: The facility does not exist or is not accessible.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
    post:
      tags:
      - Customer
      summary: Creates a new automation at a facility.
      operationId: createAutomation_1
      parameters:
      - name: facilityId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyAutomationRequestPayload'
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAutomationResponsePayload'
        "404":
          description: The facility does not exist or is not accessible.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
  /api/v1/facilities/{facilityId}/automations/{automationId}:
    get:
      tags:
      - Customer
      summary: Gets information about a single automation.
      operationId: getAutomation_1
      parameters:
      - name: facilityId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: automationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAutomationResponsePayload'
        "404":
          description: The requested resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
    put:
      tags:
      - Customer
      summary: Updates an existing automation.
      operationId: updateAutomation_1
      parameters:
      - name: facilityId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: automationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyAutomationRequestPayload'
        required: true
      responses:
        "200":
          description: The requested operation succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
        "404":
          description: The requested resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
    delete:
      tags:
      - Customer
      summary: Deletes an automation from a facility.
      operationId: deleteAutomation_1
      parameters:
      - name: facilityId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: automationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: The requested operation succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
        "404":
          description: The requested resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
  /api/v1/facilities/{facilityId}/configured:
    post:
      tags:
      - Customer
      summary: Marks a facility as fully configured.
      description: "After connecting a device manager and finishing any necessary\
        \ configuration of the facility's devices, send this request to enable processing\
        \ of timeseries values and alerts from the device manager. Only valid if the\
        \ facility's connection state is `Connected`."
      operationId: postConfigured_1
      parameters:
      - name: facilityId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: The requested operation succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
        "409":
          description: The facility's device manager was not in the process of being
            configured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
  /api/v1/facilities/{facilityId}/devices:
    get:
      tags:
      - DeviceManager
      summary: Lists the configurations of all the devices at a facility.
      operationId: listFacilityDevices
      parameters:
      - name: facilityId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Successfully listed the facility's devices.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDeviceConfigsResponse'
        "404":
          description: The facility does not exist or is not accessible by the current
            user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
  /api/v1/facility:
    get:
      tags:
      - Customer
      summary: Lists all accessible facilities.
      operationId: listAllFacilities
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFacilitiesResponse'
    post:
      tags:
      - Customer
      summary: Creates a new facility.
      operationId: createFacility
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFacilityRequestPayload'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateFacilityResponsePayload'
  /api/v1/facility/{facilityId}:
    get:
      tags:
      - Customer
      summary: Gets information about a single facility.
      operationId: getFacility_1
      parameters:
      - name: facilityId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFacilityResponse'
    put:
      tags:
      - Customer
      summary: Updates information about a facility.
      operationId: updateFacility_1
      parameters:
      - name: facilityId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFacilityRequestPayload'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
  /api/v1/facility/{facilityId}/alert/send:
    post:
      tags:
      - Customer
      summary: Sends an alert to the facility's configured alert recipients.
      operationId: sendFacilityAlert_1
      parameters:
      - name: facilityId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendFacilityAlertRequestPayload'
        required: true
      responses:
        "200":
          description: The requested operation succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
        "202":
          description: "The request was received, but the user is still configuring\
            \ or placing sensors, so no notification has been generated."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
  /api/v1/facility/{facilityId}/automations:
    get:
      tags:
      - Customer
      summary: Lists a facility's automations.
      operationId: listAutomations
      parameters:
      - name: facilityId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAutomationsResponsePayload'
        "404":
          description: The facility does not exist or is not accessible.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
    post:
      tags:
      - Customer
      summary: Creates a new automation at a facility.
      operationId: createAutomation
      parameters:
      - name: facilityId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyAutomationRequestPayload'
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAutomationResponsePayload'
        "404":
          description: The facility does not exist or is not accessible.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
  /api/v1/facility/{facilityId}/automations/{automationId}:
    get:
      tags:
      - Customer
      summary: Gets information about a single automation.
      operationId: getAutomation
      parameters:
      - name: facilityId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: automationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAutomationResponsePayload'
        "404":
          description: The requested resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
    put:
      tags:
      - Customer
      summary: Updates an existing automation.
      operationId: updateAutomation
      parameters:
      - name: facilityId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: automationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyAutomationRequestPayload'
        required: true
      responses:
        "200":
          description: The requested operation succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
        "404":
          description: The requested resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
    delete:
      tags:
      - Customer
      summary: Deletes an automation from a facility.
      operationId: deleteAutomation
      parameters:
      - name: facilityId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: automationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: The requested operation succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
        "404":
          description: The requested resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
  /api/v1/facility/{facilityId}/configured:
    post:
      tags:
      - Customer
      summary: Marks a facility as fully configured.
      description: "After connecting a device manager and finishing any necessary\
        \ configuration of the facility's devices, send this request to enable processing\
        \ of timeseries values and alerts from the device manager. Only valid if the\
        \ facility's connection state is `Connected`."
      operationId: postConfigured
      parameters:
      - name: facilityId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: The requested operation succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
        "409":
          description: The facility's device manager was not in the process of being
            configured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
  /api/v1/facility/{facilityId}/devices:
    get:
      tags:
      - DeviceManager
      summary: Lists the configurations of all the devices at a facility.
      operationId: listFacilityDevices_1
      parameters:
      - name: facilityId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Successfully listed the facility's devices.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDeviceConfigsResponse'
        "404":
          description: The facility does not exist or is not accessible by the current
            user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
  /api/v1/login:
    get:
      tags:
      - Customer
      summary: Redirects to a login page.
      description: "For interactive web applications, this can be used to redirect\
        \ the user to a login page to allow the application to make other API requests.\
        \ The login process will set a cookie that will authenticate to the API, and\
        \ will then redirect back to the application. One approach is to use this\
        \ in error response handlers: if an API request returns HTTP 401 Unauthorized,\
        \ set location.href to this endpoint and set \"redirect\" to the URL of the\
        \ page the user was on so they'll return there after logging in."
      operationId: login
      parameters:
      - name: redirect
        in: query
        description: URL to redirect to after login. The list of valid redirect URLs
          is restricted; this must be the URL of a Terraware web application.
        required: true
        schema:
          type: string
          description: URL to redirect to after login. The list of valid redirect
            URLs is restricted; this must be the URL of a Terraware web application.
      responses:
        "302":
          description: "Redirects to a login page. After login, the user will be redirected\
            \ back to the URL specified in the \"redirect\" parameter."
  /api/v1/notifications:
    get:
      tags:
      - Customer
      summary: Retrieve all notifications for current user scoped to an organization.
      operationId: readAll
      parameters:
      - name: organizationId
        in: query
        description: "If set, return notifications relevant to that organization."
        required: false
        schema:
          type: string
          description: "If set, return notifications relevant to that organization."
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNotificationsResponsePayload'
    put:
      tags:
      - Customer
      summary: Update notifications as read or unread
      operationId: markAllRead
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateNotificationsRequestPayload'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
  /api/v1/notifications/count:
    get:
      tags:
      - Customer
      summary: Retrieve notifications count by organization for current user.
      operationId: count
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNotificationsCountResponsePayload'
  /api/v1/notifications/{id}:
    get:
      tags:
      - Customer
      summary: Retrieve a notification by its id.
      operationId: read
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNotificationResponsePayload'
        "404":
          description: The requested resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
    put:
      tags:
      - Customer
      summary: Update a single notification as read or unread
      operationId: markRead
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateNotificationRequestPayload'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
        "404":
          description: The requested resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
  /api/v1/nursery/batches:
    post:
      tags:
      - Nursery
      operationId: createBatch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBatchRequestPayload'
        required: true
      responses:
        "200":
          description: "The batch was created successfully. Response includes fields\
            \ populated by the server, including the batch ID."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchResponsePayload'
  /api/v1/nursery/batches/uploads:
    post:
      tags:
      - Nursery
      summary: Uploads a list of seedling batches to add to the nursery.
      description: The uploaded file must be in CSV format. A template with the correct
        headers may be downloaded from the `/api/v1/nursery/batches/uploads/template`
        endpoint.
      operationId: uploadSeedlingBatchesList
      parameters:
      - name: facilityId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - file
              type: object
              properties:
                file:
                  type: string
                  format: binary
            encoding:
              file:
                contentType: text/csv
      responses:
        "200":
          description: "The file has been successfully received. It will be processed\
            \ asynchronously; use the ID returned in the response payload to poll\
            \ for its status using the `/api/v1/nursery/batches/uploads/{uploadId}`\
            \ GET endpoint."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadFileResponsePayload'
  /api/v1/nursery/batches/uploads/template:
    get:
      tags:
      - Nursery
      summary: Gets a template file that contains the required header row for seedling
        batch uploads.
      operationId: getSeedlingBatchesUploadTemplate
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
                format: byte
  /api/v1/nursery/batches/uploads/{uploadId}:
    get:
      tags:
      - Nursery
      summary: Gets the status of a seedling batches list uploaded previously.
      description: Clients may poll this endpoint to monitor the progress of the file.
      operationId: getSeedlingBatchesListUploadStatus
      parameters:
      - name: uploadId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUploadStatusResponsePayload'
  /api/v1/nursery/batches/{id}:
    get:
      tags:
      - Nursery
      operationId: getBatch
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchResponsePayload'
        "404":
          description: The requested resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
    put:
      tags:
      - Nursery
      summary: Updates non-quantity-related details about a batch.
      operationId: updateBatch
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBatchRequestPayload'
        required: true
      responses:
        "200":
          description: The batch was updated successfully. Response includes fields
            populated or modified by the server as a result of the update.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchResponsePayload'
        "404":
          description: The requested resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
        "412":
          description: The requested resource has a newer version and was not updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
    delete:
      tags:
      - Nursery
      operationId: deleteBatch
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: The requested operation succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
  /api/v1/nursery/batches/{id}/quantities:
    put:
      tags:
      - Nursery
      operationId: updateBatchQuantities
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBatchQuantitiesRequestPayload'
        required: true
      responses:
        "404":
          description: The requested resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
        "412":
          description: The requested resource has a newer version and was not updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
  /api/v1/nursery/species/{speciesId}/summary:
    get:
      tags:
      - Nursery
      operationId: getSpeciesSummary
      parameters:
      - name: speciesId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSpeciesSummaryResponsePayload'
  /api/v1/nursery/withdrawals:
    post:
      tags:
      - Nursery
      operationId: createBatchWithdrawal
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNurseryWithdrawalRequestPayload'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateNurseryWithdrawalResponsePayload'
  /api/v1/organizations:
    get:
      tags:
      - Customer
      summary: Lists all organizations.
      description: Lists all organizations the user can access.
      operationId: listOrganizations
      parameters:
      - name: depth
        in: query
        description: Return this level of information about the organization's contents.
        required: false
        schema:
          type: string
          description: Return this level of information about the organization's contents.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOrganizationsResponsePayload'
    post:
      tags:
      - Customer
      summary: Creates a new organization.
      operationId: createOrganization
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrganizationRequestPayload'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrganizationResponsePayload'
  /api/v1/organizations/{organizationId}:
    get:
      tags:
      - Customer
      summary: Gets information about an organization.
      operationId: getOrganization
      parameters:
      - name: organizationId
        in: path
        description: ID of organization to get. User must be a member of the organization.
        required: true
        schema:
          type: string
          description: ID of organization to get. User must be a member of the organization.
      - name: depth
        in: query
        description: Return this level of information about the organization's contents.
        required: false
        schema:
          type: string
          description: Return this level of information about the organization's contents.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrganizationResponsePayload'
    put:
      tags:
      - Customer
      summary: Updates an existing organization.
      operationId: updateOrganization
      parameters:
      - name: organizationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrganizationRequestPayload'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
    delete:
      tags:
      - Customer
      summary: Deletes an existing organization.
      description: Organizations can only be deleted if they have no members other
        than the current user.
      operationId: deleteOrganization
      parameters:
      - name: organizationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "409":
          description: The organization has other members and cannot be deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
  /api/v1/organizations/{organizationId}/roles:
    get:
      tags:
      - Customer
      summary: Lists the roles in an organization.
      operationId: listOrganizationRoles
      parameters:
      - name: organizationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOrganizationRolesResponsePayload'
  /api/v1/organizations/{organizationId}/users:
    get:
      tags:
      - Customer
      summary: Lists the users in an organization.
      operationId: listOrganizationUsers
      parameters:
      - name: organizationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOrganizationUsersResponsePayload'
    post:
      tags:
      - Customer
      summary: Adds a user to an organization.
      operationId: addOrganizationUser
      parameters:
      - name: organizationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddOrganizationUserRequestPayload'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrganizationUserResponsePayload'
  /api/v1/organizations/{organizationId}/users/{userId}:
    get:
      tags:
      - Customer
      summary: Gets information about a user's membership in an organization.
      operationId: getOrganizationUser
      parameters:
      - name: organizationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrganizationUserResponsePayload'
    put:
      tags:
      - Customer
      summary: Updates the user's organization information.
      description: Only includes organization-level information that can be modified
        by organization administrators.
      operationId: updateOrganizationUser
      parameters:
      - name: organizationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrganizationUserRequestPayload'
        required: true
      responses:
        "200":
          description: The requested operation succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
        "404":
          description: The user is not a member of the organization.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
        "409":
          description: An organization must have at least one owner; cannot change
            the role of an organization's only owner.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
    delete:
      tags:
      - Customer
      summary: Removes a user from an organization.
      description: Does not remove any data created by the user.
      operationId: deleteOrganizationUser
      parameters:
      - name: organizationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: The requested operation succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
        "404":
          description: The user is not a member of the organization.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
        "409":
          description: The user is the organization's only owner and an organization
            must have at least one owner.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
  /api/v1/search:
    post:
      tags:
      - Search
      operationId: search_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequestPayload'
            examples:
              example1:
                description: Search for all accessions of species "Species Name" whose
                  remaining seeds weigh between 100 and 200 milligrams or that have
                  between 30 and 40 seeds remaining.
                value:
                  prefix: facilities.accessions
                  fields:
                  - accessionNumber
                  - remainingQuantity
                  - remainingUnits
                  search:
                    operation: and
                    children:
                    - operation: field
                      field: species
                      values:
                      - Species Name
                    - operation: or
                      children:
                      - operation: field
                        field: remainingGrams
                        type: Range
                        values:
                        - 100 Milligrams
                        - 200 Milligrams
                      - operation: and
                        children:
                        - operation: field
                          field: remainingUnits
                          values:
                          - Seeds
                        - operation: field
                          field: remainingQuantity
                          type: Range
                          values:
                          - "30"
                          - "40"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponsePayload'
            text/csv:
              schema:
                type: string
                format: binary
  /api/v1/seedbank/accessions/{id}:
    delete:
      tags:
      - SeedBankApp
      operationId: delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: The requested operation succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
        "404":
          description: The requested resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
  /api/v1/seedbank/accessions/{id}/checkIn:
    post:
      tags:
      - SeedBankApp
      summary: Marks an accession as checked in.
      operationId: checkIn
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateAccessionResponsePayloadV2'
        "404":
          description: The requested resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
  /api/v1/seedbank/accessions/{id}/history:
    get:
      tags:
      - SeedBankApp
      summary: Gets the history of changes to an accession.
      operationId: getAccessionHistory
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAccessionHistoryResponsePayload'
        "404":
          description: The requested resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
  /api/v1/seedbank/accessions/{id}/photos:
    get:
      tags:
      - SeedBankApp
      summary: List all the available photos for an accession.
      operationId: listPhotos
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: The accession's photos are listed in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPhotosResponsePayload'
        "404":
          description: The accession does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
  /api/v1/seedbank/accessions/{id}/photos/{photoFilename}:
    get:
      tags:
      - SeedBankApp
      summary: Retrieve a specific photo from an accession.
      description: "Optional maxWidth and maxHeight parameters may be included to\
        \ control the dimensions of the image; the server will scale the original\
        \ down as needed. If neither parameter is specified, the original full-size\
        \ image will be returned. The aspect ratio of the original image is maintained,\
        \ so the returned image may be smaller than the requested width and height.\
        \ If only maxWidth or only maxHeight is supplied, the other dimension will\
        \ be computed based on the original image's aspect ratio."
      operationId: getPhoto
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: photoFilename
        in: path
        required: true
        schema:
          type: string
      - name: maxWidth
        in: query
        description: "Maximum desired width in pixels. If neither this nor maxHeight\
          \ is specified, the full-sized original image will be returned. If this\
          \ is specified, an image no wider than this will be returned. The image\
          \ may be narrower than this value if needed to preserve the aspect ratio\
          \ of the original."
        required: false
        schema:
          type: string
          description: "Maximum desired width in pixels. If neither this nor maxHeight\
            \ is specified, the full-sized original image will be returned. If this\
            \ is specified, an image no wider than this will be returned. The image\
            \ may be narrower than this value if needed to preserve the aspect ratio\
            \ of the original."
      - name: maxHeight
        in: query
        description: "Maximum desired height in pixels. If neither this nor maxWidth\
          \ is specified, the full-sized original image will be returned. If this\
          \ is specified, an image no taller than this will be returned. The image\
          \ may be shorter than this value if needed to preserve the aspect ratio\
          \ of the original."
        required: false
        schema:
          type: string
          description: "Maximum desired height in pixels. If neither this nor maxWidth\
            \ is specified, the full-sized original image will be returned. If this\
            \ is specified, an image no taller than this will be returned. The image\
            \ may be shorter than this value if needed to preserve the aspect ratio\
            \ of the original."
      responses:
        "200":
          description: The photo was successfully retrieved.
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
        "404":
          description: "The accession does not exist, or does not have a photo with\
            \ the requested filename."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
    post:
      tags:
      - SeedBankApp
      summary: Upload a new photo for an accession.
      operationId: uploadPhoto
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: photoFilename
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - file
              type: object
              properties:
                file:
                  type: string
                  format: binary
            encoding:
              file:
                contentType: image/jpeg
      responses:
        "200":
          description: The requested operation succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
        "404":
          description: The specified accession does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
        "409":
          description: The requested photo already exists on the accession.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
  /api/v1/seedbank/clock:
    get:
      tags:
      - SeedBankApp
      summary: Get the server's current date and time.
      description: "In test environments, the clock can be advanced artificially,\
        \ which will cause it to differ from the real-world date and time."
      operationId: getCurrentTime
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCurrentTimeResponsePayload'
  /api/v1/seedbank/log/{tag}:
    post:
      tags:
      - SeedBankApp
      operationId: recordLogMessage
      parameters:
      - name: tag
        in: path
        description: Source of the log message.
        required: true
        schema:
          type: string
          description: Source of the log message.
          example: seedbank-app
        example: seedbank-app
      requestBody:
        content:
          application/json:
            schema:
              type: string
              description: "Values to log. This can be an arbitrary bucket of key/value\
                \ pairs, but the 'level' field should be set to one of 'debug', 'info',\
                \ 'warn', or 'error'. Default level is 'info'. If there is a human-readable\
                \ message, it should go in the 'message' field."
        required: true
      responses:
        "200":
          description: OK
  /api/v1/seedbank/summary:
    get:
      tags:
      - SeedBankApp
      summary: Get summary statistics about a specific seed bank or all seed banks
        within an organization.
      operationId: getSeedBankSummary
      parameters:
      - name: organizationId
        in: query
        description: "If set, return summary on all seedbanks for that organization."
        required: false
        schema:
          type: string
          description: "If set, return summary on all seedbanks for that organization."
      - name: facilityId
        in: query
        description: "If set, return summary on that specific seedbank."
        required: false
        schema:
          type: string
          description: "If set, return summary on that specific seedbank."
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SummaryResponsePayload'
    post:
      tags:
      - SeedBankApp
      summary: Get summary statistics about the accessions that match a specified
        set of search criteria.
      operationId: summarizeAccessionSearch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SummarizeAccessionSearchRequestPayload'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SummarizeAccessionSearchResponsePayload'
  /api/v1/seedbank/values:
    post:
      tags:
      - SeedBankApp
      summary: List the values of a set of search fields for a set of accessions matching
        certain filter criteria.
      operationId: listFieldValues
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListFieldValuesRequestPayload'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFieldValuesResponsePayload'
  /api/v1/seedbank/values/all:
    post:
      tags:
      - SeedBankApp
      summary: List the possible values of a set of search fields.
      operationId: listAllFieldValues
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListAllFieldValuesRequestPayload'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAllFieldValuesResponsePayload'
  /api/v1/seedbank/values/storageLocation/{facilityId}:
    get:
      tags:
      - SeedBankApp
      operationId: getStorageLocations
      parameters:
      - name: facilityId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageLocationsResponsePayload'
  /api/v1/species:
    get:
      tags:
      - SeedBankApp
      summary: Lists all the species available in an organization.
      operationId: listSpecies
      parameters:
      - name: organizationId
        in: query
        description: Organization whose species should be listed.
        required: true
        schema:
          type: string
          description: Organization whose species should be listed.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSpeciesResponsePayload'
    post:
      tags:
      - SeedBankApp
      summary: Creates a new species.
      operationId: createSpecies
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpeciesRequestPayload'
        required: true
      responses:
        "200":
          description: Species created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSpeciesResponsePayload'
        "409":
          description: A species with the requested name already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSpeciesResponsePayload'
  /api/v1/species/lookup/details:
    get:
      tags:
      - Customer
      summary: Gets more information about a species with a particular scientific
        name.
      operationId: getSpeciesDetails
      parameters:
      - name: scientificName
        in: query
        description: Exact scientific name to look up. This name is case-sensitive.
        required: true
        schema:
          type: string
          description: Exact scientific name to look up. This name is case-sensitive.
      - name: language
        in: query
        description: "If specified, only return common names in this language or whose\
          \ language is unknown. Names with unknown languages are always included.\
          \ This is a two-letter ISO 639-1 language code."
        required: false
        schema:
          type: string
          description: "If specified, only return common names in this language or\
            \ whose language is unknown. Names with unknown languages are always included.\
            \ This is a two-letter ISO 639-1 language code."
          example: en
        example: en
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpeciesLookupDetailsResponsePayload'
        "404":
          description: The scientific name was not found in the server's taxonomic
            database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
  /api/v1/species/lookup/names:
    get:
      tags:
      - Customer
      description: Gets a list of known scientific names whose words begin with particular
        letters.
      operationId: listSpeciesNames
      parameters:
      - name: search
        in: query
        description: "Space-delimited list of word prefixes to search for. Non-alphabetic\
          \ characters are ignored, and matches are case-insensitive. The order of\
          \ prefixes is significant; \"ag sc\" will match \"Aglaonema schottianum\"\
          \ but won't match \"Scabiosa agrestis\"."
        required: true
        schema:
          maxLength: 100
          minLength: 2
          type: string
          description: "Space-delimited list of word prefixes to search for. Non-alphabetic\
            \ characters are ignored, and matches are case-insensitive. The order\
            \ of prefixes is significant; \"ag sc\" will match \"Aglaonema schottianum\"\
            \ but won't match \"Scabiosa agrestis\"."
          example: ag sc
        example: ag sc
      - name: maxResults
        in: query
        description: Maximum number of results to return.
        required: false
        schema:
          maximum: 50
          minimum: 1
          type: string
          description: Maximum number of results to return.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpeciesLookupNamesResponsePayload'
  /api/v1/species/problems/{problemId}:
    get:
      tags:
      - SeedBankApp
      description: Returns details about a problem with a species.
      operationId: getSpeciesProblem
      parameters:
      - name: problemId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Problem retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSpeciesProblemResponsePayload'
        "404":
          description: The requested resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
    post:
      tags:
      - SeedBankApp
      summary: Applies suggested changes to fix a problem with a species.
      description: Only valid for problems that include suggested changes.
      operationId: acceptProblemSuggestion
      parameters:
      - name: problemId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Suggestion applied. Response contains the updated species information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSpeciesResponsePayload'
        "404":
          description: The requested resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
        "409":
          description: There is no suggested change for this problem.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
    delete:
      tags:
      - SeedBankApp
      summary: Deletes information about a problem with a species without applying
        any suggested changes.
      operationId: deleteProblem
      parameters:
      - name: problemId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: The requested operation succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
        "404":
          description: The requested resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
  /api/v1/species/uploads:
    post:
      tags:
      - Customer
      summary: Uploads a list of species to add to the organization.
      description: The uploaded file must be in CSV format. A template with the correct
        headers may be downloaded from the `/api/v1/species/uploads/template` endpoint.
      operationId: uploadSpeciesList
      parameters:
      - name: organizationId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - file
              type: object
              properties:
                file:
                  type: string
                  format: binary
            encoding:
              file:
                contentType: text/csv
      responses:
        "200":
          description: "The file has been successfully received. It will be processed\
            \ asynchronously; use the ID returned in the response payload to poll\
            \ for its status using the `/api/v1/species/uploads/{uploadId}` GET endpoint."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadFileResponsePayload'
  /api/v1/species/uploads/template:
    get:
      tags:
      - Customer
      summary: Gets a template file that contains the required header row for species
        list uploads.
      operationId: getSpeciesListUploadTemplate
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
                format: byte
  /api/v1/species/uploads/{uploadId}:
    get:
      tags:
      - Customer
      summary: Gets the status of a species list uploaded previously.
      description: Clients may poll this endpoint to monitor the progress of the file.
      operationId: getSpeciesListUploadStatus
      parameters:
      - name: uploadId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUploadStatusResponsePayload'
    delete:
      tags:
      - Customer
      summary: Deletes a species list upload that is awaiting user action.
      description: This may only be called if the status of the upload is "Awaiting
        User Action".
      operationId: deleteSpeciesListUpload
      parameters:
      - name: uploadId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: The requested operation succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
        "409":
          description: The upload was not awaiting user action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
  /api/v1/species/uploads/{uploadId}/resolve:
    post:
      tags:
      - Customer
      summary: Resolves the problems with a species list that is awaiting user action.
      description: This may only be called if the status of the upload is "Awaiting
        User Action".
      operationId: resolveSpeciesListUpload
      parameters:
      - name: uploadId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResolveUploadRequestPayload'
        required: true
      responses:
        "200":
          description: The requested operation succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
        "409":
          description: The upload was not awaiting user action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
  /api/v1/species/{speciesId}:
    get:
      tags:
      - SeedBankApp
      summary: Gets information about a single species.
      operationId: getSpecies
      parameters:
      - name: speciesId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: organizationId
        in: query
        description: Organization whose information about the species should be returned.
        required: true
        schema:
          type: string
          description: Organization whose information about the species should be
            returned.
      responses:
        "200":
          description: Species retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSpeciesResponsePayload'
        "404":
          description: The requested resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
    put:
      tags:
      - SeedBankApp
      summary: Updates an existing species.
      operationId: updateSpecies
      parameters:
      - name: speciesId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpeciesRequestPayload'
        required: true
      responses:
        "200":
          description: Species updated or merged with an existing species.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
        "404":
          description: The requested resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
    delete:
      tags:
      - SeedBankApp
      summary: Deletes an existing species.
      description: "The species will no longer appear in the organization's list of\
        \ species, but existing data (plants, seeds, etc.) that refer to the species\
        \ will still refer to it."
      operationId: deleteSpecies
      parameters:
      - name: speciesId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: organizationId
        in: query
        description: Organization from which the species should be deleted.
        required: true
        schema:
          type: string
          description: Organization from which the species should be deleted.
      responses:
        "200":
          description: Species deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
        "404":
          description: The requested resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
        "409":
          description: Cannot delete the species because it is currently in use.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
  /api/v1/timeseries:
    get:
      tags:
      - DeviceManager
      summary: Lists the timeseries for one or more devices.
      operationId: listTimeseries
      parameters:
      - name: deviceId
        in: query
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTimeseriesResponsePayload'
  /api/v1/timeseries/create:
    post:
      tags:
      - DeviceManager
      summary: Defines a list of timeseries for one or more devices.
      description: "If there are existing timeseries with the same names, the old\
        \ definitions will be overwritten."
      operationId: createMultipleTimeseries
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTimeseriesRequestPayload'
        required: true
      responses:
        "200":
          description: The requested operation succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
  /api/v1/timeseries/history:
    post:
      tags:
      - DeviceManager
      summary: Returns historical values of timeseries.
      operationId: getTimeseriesHistory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetTimeseriesHistoryRequestPayload'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTimeseriesHistoryResponsePayload'
  /api/v1/timeseries/values:
    post:
      tags:
      - DeviceManager
      summary: Records new values for one or more timeseries.
      operationId: recordTimeseriesValues
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecordTimeseriesValuesRequestPayload'
        required: true
      responses:
        "200":
          description: "Successfully processed the request. Note that this status\
            \ will be returned even if the server was unable to record some of the\
            \ values. In that case, the failed values will be returned in the response\
            \ payload."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecordTimeseriesValuesResponsePayload'
        "202":
          description: "The request was valid, but the user is still configuring or\
            \ placing sensors, so the timeseries values have not been recorded."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecordTimeseriesValuesResponsePayload'
        "413":
          description: The request had more than 1000 values.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
  /api/v1/users/me:
    get:
      tags:
      - Customer
      summary: Gets information about the current user.
      operationId: getMyself
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserResponsePayload'
    put:
      tags:
      - Customer
      summary: Updates information about the current user.
      operationId: updateMyself
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequestPayload'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
    delete:
      tags:
      - Customer
      summary: Deletes the current user's account.
      description: WARNING! This operation is not reversible.
      operationId: deleteMyself
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
  /api/v1/users/me/preferences:
    get:
      tags:
      - Customer
      summary: Gets the current user's preferences.
      operationId: getUserPreferences
      parameters:
      - name: organizationId
        in: query
        description: "If present, get the user's per-organization preferences for\
          \ this organization. If not present, get the user's global preferences."
        required: false
        schema:
          type: string
          description: "If present, get the user's per-organization preferences for\
            \ this organization. If not present, get the user's global preferences."
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserPreferencesResponsePayload'
    put:
      tags:
      - Customer
      summary: Updates the current user's preferences.
      operationId: updateUserPreferences
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserPreferencesRequestPayload'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
  /api/v1/versions:
    get:
      tags:
      - Customer
      operationId: getVersions
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionsResponsePayload'
  /api/v2/seedbank/accessions:
    post:
      tags:
      - SeedBankApp
      summary: Creates a new accession.
      operationId: createAccession
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccessionRequestPayloadV2'
        required: true
      responses:
        "200":
          description: "The accession was created successfully. Response includes\
            \ fields populated by the server, including the accession number and ID."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAccessionResponsePayloadV2'
  /api/v2/seedbank/accessions/uploads:
    post:
      tags:
      - SeedBankApp
      summary: Uploads a list of accessions to add to the facility.
      description: The uploaded file must be in CSV format. A template with the correct
        headers may be downloaded from the `/api/v2/seedbank/accessions/uploads/template`
        endpoint.
      operationId: uploadAccessionsList
      parameters:
      - name: facilityId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - file
              type: object
              properties:
                file:
                  type: string
                  format: binary
            encoding:
              file:
                contentType: text/csv
      responses:
        "200":
          description: "The file has been successfully received. It will be processed\
            \ asynchronously; use the ID returned in the response payload to poll\
            \ for its status using the `/api/v2/seedbank/accessions/uploads/{uploadId}`\
            \ GET endpoint."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadFileResponsePayload'
  /api/v2/seedbank/accessions/uploads/template:
    get:
      tags:
      - SeedBankApp
      summary: Gets a template file that contains the required header row for accessions
        list uploads.
      operationId: getAccessionsListUploadTemplate
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
                format: byte
  /api/v2/seedbank/accessions/uploads/{uploadId}:
    get:
      tags:
      - SeedBankApp
      summary: Gets the status of an accessions list uploaded previously.
      description: Clients may poll this endpoint to monitor the progress of the file.
      operationId: getAccessionsListUploadStatus
      parameters:
      - name: uploadId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUploadStatusResponsePayload'
    delete:
      tags:
      - SeedBankApp
      summary: Deletes an accessions list upload that is awaiting user action.
      description: This may only be called if the status of the upload is "Awaiting
        User Action".
      operationId: deleteAccessionsListUpload
      parameters:
      - name: uploadId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: The requested operation succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
        "409":
          description: The upload was not awaiting user action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
  /api/v2/seedbank/accessions/uploads/{uploadId}/resolve:
    post:
      tags:
      - SeedBankApp
      summary: Resolves the problems with an accessions list that is awaiting user
        action.
      description: This may only be called if the status of the upload is "Awaiting
        User Action".
      operationId: resolveAccessionsListUpload
      parameters:
      - name: uploadId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResolveUploadRequestPayload'
        required: true
      responses:
        "200":
          description: The requested operation succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponsePayload'
        "409":
          description: The upload was not awaiting user action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
  /api/v2/seedbank/accessions/{accessionId}/transfers/nursery:
    post:
      tags:
      - SeedBankApp
      summary: Transfers seeds to a nursery.
      operationId: createNurseryTransferWithdrawal
      parameters:
      - name: accessionId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNurseryTransferRequestPayload'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateNurseryTransferResponsePayload'
  /api/v2/seedbank/accessions/{accessionId}/viabilityTests:
    get:
      tags:
      - viability-tests-controller
      summary: List all of the accession's viability tests.
      operationId: listViabilityTests
      parameters:
      - name: accessionId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListViabilityTestsResponsePayload'
    post:
      tags:
      - viability-tests-controller
      summary: Create a new viability test on an existing accession.
      description: May cause the accession's remaining quantity to change.
      operationId: createViabilityTest
      parameters:
      - name: accessionId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateViabilityTestRequestPayload'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateAccessionResponsePayloadV2'
  /api/v2/seedbank/accessions/{accessionId}/viabilityTests/{viabilityTestId}:
    get:
      tags:
      - viability-tests-controller
      summary: Get a single viability test.
      operationId: getViabilityTest
      parameters:
      - name: accessionId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: viabilityTestId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetViabilityTestResponsePayload'
    put:
      tags:
      - viability-tests-controller
      summary: Update the details of an existing viability test.
      description: May cause the accession's remaining quantity to change.
      operationId: updateViabilityTest
      parameters:
      - name: accessionId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: viabilityTestId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateViabilityTestRequestPayload'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateAccessionResponsePayloadV2'
    delete:
      tags:
      - viability-tests-controller
      summary: Delete an existing viability test.
      description: May cause the accession's remaining quantity to change.
      operationId: deleteViabilityTest
      parameters:
      - name: accessionId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: viabilityTestId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateAccessionResponsePayloadV2'
  /api/v2/seedbank/accessions/{accessionId}/withdrawals:
    get:
      tags:
      - withdrawals-controller
      summary: List all the withdrawals from an accession.
      operationId: listWithdrawals
      parameters:
      - name: accessionId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetWithdrawalsResponsePayload'
    post:
      tags:
      - withdrawals-controller
      summary: Create a new withdrawal on an existing accession.
      description: May cause the accession's remaining quantity to change.
      operationId: createWithdrawal
      parameters:
      - name: accessionId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWithdrawalRequestPayload'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateAccessionResponsePayloadV2'
  /api/v2/seedbank/accessions/{accessionId}/withdrawals/{withdrawalId}:
    get:
      tags:
      - withdrawals-controller
      summary: Get a single withdrawal.
      operationId: getWithdrawal
      parameters:
      - name: accessionId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: withdrawalId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetWithdrawalResponsePayload'
    put:
      tags:
      - withdrawals-controller
      summary: Update the details of an existing withdrawal.
      description: May cause the accession's remaining quantity to change.
      operationId: updateWithdrawal
      parameters:
      - name: accessionId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: withdrawalId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWithdrawalRequestPayload'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateAccessionResponsePayloadV2'
    delete:
      tags:
      - withdrawals-controller
      summary: Delete an existing withdrawal.
      description: May cause the accession's remaining quantity to change.
      operationId: deleteWithdrawal
      parameters:
      - name: accessionId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: withdrawalId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateAccessionResponsePayloadV2'
  /api/v2/seedbank/accessions/{id}:
    get:
      tags:
      - SeedBankApp
      summary: Retrieve an existing accession.
      operationId: getAccession
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAccessionResponsePayloadV2'
        "404":
          description: The requested resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
    put:
      tags:
      - SeedBankApp
      summary: Update an existing accession.
      operationId: updateAccession
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: simulate
        in: query
        description: "If true, do not actually save the accession; just return the\
          \ result that would have been returned if it had been saved."
        required: false
        schema:
          type: string
          description: "If true, do not actually save the accession; just return the\
            \ result that would have been returned if it had been saved."
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAccessionRequestPayloadV2'
        required: true
      responses:
        "200":
          description: The accession was updated successfully. Response includes fields
            populated or modified by the server as a result of the update.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateAccessionResponsePayloadV2'
        "404":
          description: The specified accession doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponsePayload'
components:
  schemas:
    AccessionHistoryEntryPayload:
      required:
      - date
      - description
      - type
      type: object
      properties:
        date:
          type: string
          format: date
        description:
          type: string
          description: Human-readable description of the event. Does not include date
            or userName.
          example: updated the status to Drying
        fullName:
          type: string
          description: "Full name of the person responsible for the event, if known."
        type:
          type: string
          enum:
          - Created
          - QuantityUpdated
          - StateChanged
          - ViabilityTesting
          - Withdrawal
    AccessionPayloadV2:
      required:
      - accessionNumber
      - active
      - facilityId
      - id
      - state
      type: object
      properties:
        accessionNumber:
          type: string
          description: "Server-generated human-readable identifier for the accession.\
            \ This is unique within a single seed bank, but different seed banks may\
            \ have accessions with the same number."
        active:
          type: string
          description: Server-calculated active indicator. This is based on the accession's
            state.
          enum:
          - Inactive
          - Active
        bagNumbers:
          uniqueItems: true
          type: array
          items:
            type: string
        collectedDate:
          type: string
          format: date
        collectionSiteCity:
          type: string
        collectionSiteCoordinates:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Geolocation'
        collectionSiteCountryCode:
          type: string
        collectionSiteCountrySubdivision:
          type: string
        collectionSiteLandowner:
          type: string
        collectionSiteName:
          type: string
        collectionSiteNotes:
          type: string
        collectionSource:
          type: string
          enum:
          - Wild
          - Reintroduced
          - Cultivated
          - Other
        collectors:
          type: array
          description: Names of the people who collected the seeds.
          items:
            type: string
        dryingEndDate:
          type: string
          format: date
        estimatedCount:
          type: integer
          description: Estimated number of seeds remaining. Absent if there isn't
            enough information to calculate an estimate.
          format: int32
        estimatedWeight:
          description: Estimated weight of seeds remaining. Absent if there isn't
            enough information to calculate an estimate.
          allOf:
          - $ref: '#/components/schemas/SeedQuantityPayload'
        facilityId:
          type: integer
          format: int64
        id:
          type: integer
          description: "Server-generated unique identifier for the accession. This\
            \ is unique across all seed banks, but is not suitable for display to\
            \ end users."
          format: int64
        latestObservedQuantity:
          description: Most recent user observation of seeds remaining in the accession.
            This is not directly editable; it is updated by the server whenever the
            "remainingQuantity" field is edited.
          allOf:
          - $ref: '#/components/schemas/SeedQuantityPayload'
        latestObservedTime:
          type: string
          description: Time of most recent user observation of seeds remaining in
            the accession. This is updated by the server whenever the "remainingQuantity"
            field is edited.
          format: date-time
        notes:
          type: string
        photoFilenames:
          type: array
          items:
            type: string
        plantId:
          type: string
        plantsCollectedFrom:
          type: integer
          description: Estimated number of plants the seeds were collected from.
          format: int32
        receivedDate:
          type: string
          format: date
        remainingQuantity:
          description: Number or weight of seeds remaining for withdrawal and testing.
            May be calculated by the server after withdrawals.
          allOf:
          - $ref: '#/components/schemas/SeedQuantityPayload'
        source:
          type: string
          description: Which source of data this accession originally came from.
          enum:
          - Web
          - Seed Collector App
          - File Import
        speciesScientificName:
          type: string
          description: Scientific name of the species.
        speciesCommonName:
          type: string
          description: "Common name of the species, if defined."
        speciesId:
          type: integer
          description: Server-generated unique ID of the species.
          format: int64
        state:
          type: string
          enum:
          - Awaiting Check-In
          - Pending
          - Awaiting Processing
          - Processing
          - Processed
          - Drying
          - Dried
          - In Storage
          - Withdrawn
          - Used Up
          - Nursery
        storageLocation:
          type: string
        subsetCount:
          type: integer
          format: int32
        subsetWeight:
          description: "Weight of subset of seeds. Units must be a weight measurement,\
            \ not \"Seeds\"."
          allOf:
          - $ref: '#/components/schemas/SeedQuantityPayload'
        viabilityPercent:
          type: integer
          format: int32
        viabilityTests:
          type: array
          items:
            $ref: '#/components/schemas/GetViabilityTestPayload'
        withdrawals:
          type: array
          items:
            $ref: '#/components/schemas/GetWithdrawalPayload'
    AddOrganizationUserRequestPayload:
      required:
      - email
      - role
      type: object
      properties:
        email:
          type: string
        role:
          type: string
          enum:
          - Contributor
          - Manager
          - Admin
          - Owner
    AllFieldValuesPayload:
      required:
      - partial
      - values
      type: object
      properties:
        values:
          type: array
          description: "All the values this field could possibly have, whether or\
            \ not any accessions have them. For fields that allow the user to enter\
            \ arbitrary values, this is equivalent to querying the list of values\
            \ without any filter criteria, that is, it's a list of all the user-entered\
            \ values."
          items:
            type: string
        partial:
          type: boolean
          description: "If true, the list of values is too long to return in its entirety\
            \ and \"values\" is a partial list."
    AndNodePayload:
      required:
      - children
      type: object
      description: "Search criterion that matches results that meet all of a set of\
        \ other search criteria. That is, if the list of children is x, y, and z,\
        \ this will require x AND y AND z."
      allOf:
      - $ref: '#/components/schemas/SearchNodePayload'
      - type: object
        properties:
          children:
            minItems: 1
            type: array
            items:
              $ref: '#/components/schemas/SearchNodePayload'
    AutomationPayload:
      required:
      - facilityId
      - id
      - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        facilityId:
          type: integer
          format: int64
        name:
          type: string
          description: Short human-readable name of this automation.
        description:
          type: string
          description: Human-readable description of this automation.
        configuration:
          type: object
          description: Client-defined configuration data for this automation.
    AutomationTriggerRequestPayload:
      type: object
      properties:
        timeseriesValue:
          type: number
          description: "For automations that are triggered by changes to timeseries\
            \ values, the value that triggered the automation."
          format: double
        message:
          type: string
          description: Default message to publish if the automation type isn't yet
            supported by the server.
    BatchPayload:
      required:
      - addedDate
      - batchNumber
      - facilityId
      - germinatingQuantity
      - id
      - latestObservedTime
      - notReadyQuantity
      - readyQuantity
      - speciesId
      - version
      type: object
      properties:
        accessionId:
          type: integer
          description: "If this batch was created via a seed withdrawal, the ID of\
            \ the seed accession it came from."
          format: int64
        addedDate:
          type: string
          format: date
        batchNumber:
          type: string
        facilityId:
          type: integer
          format: int64
        germinatingQuantity:
          type: integer
          format: int32
        id:
          type: integer
          format: int64
        latestObservedTime:
          type: string
          format: date-time
        notes:
          type: string
        notReadyQuantity:
          type: integer
          format: int32
        readyByDate:
          type: string
          format: date
        readyQuantity:
          type: integer
          format: int32
        speciesId:
          type: integer
          format: int64
        version:
          type: integer
          description: Increases every time a batch is updated. Must be passed as
            a parameter for certain kinds of write operations to detect when a batch
            has changed since the client last retrieved it.
          format: int32
    BatchResponsePayload:
      required:
      - batch
      - status
      type: object
      properties:
        batch:
          $ref: '#/components/schemas/BatchPayload'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    BatchWithdrawalPayload:
      required:
      - batchId
      - notReadyQuantityWithdrawn
      - readyQuantityWithdrawn
      type: object
      properties:
        batchId:
          type: integer
          format: int64
        germinatingQuantityWithdrawn:
          minimum: 0
          type: integer
          format: int32
          default: 0
        notReadyQuantityWithdrawn:
          minimum: 0
          type: integer
          format: int32
        readyQuantityWithdrawn:
          minimum: 0
          type: integer
          format: int32
    ConnectDeviceManagerRequestPayload:
      required:
      - facilityId
      type: object
      properties:
        facilityId:
          type: integer
          format: int64
    CreateAccessionRequestPayloadV2:
      type: object
      properties:
        bagNumbers:
          uniqueItems: true
          type: array
          writeOnly: true
          items:
            type: string
        collectedDate:
          type: string
          format: date
          writeOnly: true
        collectionSiteCity:
          type: string
          writeOnly: true
        collectionSiteCoordinates:
          uniqueItems: true
          type: array
          writeOnly: true
          items:
            $ref: '#/components/schemas/Geolocation'
        collectionSiteCountryCode:
          type: string
          writeOnly: true
        collectionSiteCountrySubdivision:
          type: string
          writeOnly: true
        collectionSiteLandowner:
          type: string
          writeOnly: true
        collectionSiteName:
          type: string
          writeOnly: true
        collectionSiteNotes:
          type: string
          writeOnly: true
        collectionSource:
          type: string
          writeOnly: true
          enum:
          - Wild
          - Reintroduced
          - Cultivated
          - Other
        collectors:
          type: array
          writeOnly: true
          items:
            type: string
        facilityId:
          type: integer
          format: int64
          writeOnly: true
        notes:
          type: string
          writeOnly: true
        plantId:
          type: string
          writeOnly: true
        plantsCollectedFrom:
          type: integer
          description: Estimated number of plants the seeds were collected from.
          format: int32
          writeOnly: true
        receivedDate:
          type: string
          format: date
          writeOnly: true
        source:
          type: string
          writeOnly: true
          enum:
          - Web
          - Seed Collector App
          - File Import
        speciesId:
          type: integer
          format: int64
          writeOnly: true
        state:
          type: string
          writeOnly: true
          enum:
          - Awaiting Check-In
          - Pending
          - Awaiting Processing
          - Processing
          - Processed
          - Drying
          - Dried
          - In Storage
          - Withdrawn
          - Used Up
          - Nursery
        storageLocation:
          type: string
          writeOnly: true
    CreateAccessionResponsePayloadV2:
      required:
      - accession
      - status
      type: object
      properties:
        accession:
          $ref: '#/components/schemas/AccessionPayloadV2'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    CreateAutomationRequestPayload:
      required:
      - facilityId
      - name
      - type
      type: object
      properties:
        facilityId:
          type: integer
          format: int64
        type:
          type: string
        name:
          type: string
        description:
          type: string
        deviceId:
          type: integer
          format: int64
        timeseriesName:
          type: string
        verbosity:
          type: integer
          format: int32
        lowerThreshold:
          type: number
          format: double
        upperThreshold:
          type: number
          format: double
        settings:
          type: object
          additionalProperties:
            type: object
    CreateAutomationResponsePayload:
      required:
      - id
      - status
      type: object
      properties:
        id:
          type: integer
          format: int64
        status:
          $ref: '#/components/schemas/SuccessOrError'
    CreateBatchRequestPayload:
      required:
      - addedDate
      - facilityId
      - germinatingQuantity
      - notReadyQuantity
      - readyQuantity
      - speciesId
      type: object
      properties:
        addedDate:
          type: string
          format: date
        facilityId:
          type: integer
          format: int64
        notes:
          type: string
        readyByDate:
          type: string
          format: date
        speciesId:
          type: integer
          format: int64
        germinatingQuantity:
          minimum: 0
          type: integer
          format: int32
        notReadyQuantity:
          minimum: 0
          type: integer
          format: int32
        readyQuantity:
          minimum: 0
          type: integer
          format: int32
    CreateDeviceRequestPayload:
      required:
      - facilityId
      - make
      - model
      - name
      - type
      type: object
      properties:
        facilityId:
          type: integer
          description: Identifier of facility where this device is located.
          format: int64
        name:
          type: string
          description: Name of this device.
          example: BMU-1
        type:
          type: string
          description: High-level type of the device. Device manager may use this
            in conjunction with the make and model to determine which metrics to report.
          example: inverter
        make:
          type: string
          description: Name of device manufacturer.
          example: InHand Networks
        model:
          type: string
          description: Model number or model name of the device.
          example: IR915L
        protocol:
          type: string
          description: Device manager protocol name.
          example: modbus
        address:
          type: string
          description: "Protocol-specific address of device, e.g., an IP address or\
            \ a Bluetooth device ID."
          example: 192.168.1.100
        port:
          type: integer
          description: Port number if relevant for the protocol.
          format: int32
          example: 50000
        settings:
          type: object
          description: Protocol- and device-specific custom settings. This is an arbitrary
            JSON object; the exact settings depend on the device type.
        verbosity:
          type: integer
          description: Level of diagnostic information to log.
          format: int32
        parentId:
          type: integer
          description: "ID of parent device such as a hub or gateway, if any. The\
            \ parent device must exist."
          format: int64
    CreateFacilityRequestPayload:
      required:
      - name
      - organizationId
      - type
      type: object
      properties:
        description:
          type: string
        organizationId:
          type: integer
          description: Which organization this facility belongs to.
          format: int64
        name:
          type: string
        type:
          type: string
          enum:
          - Seed Bank
          - Desalination
          - Reverse Osmosis
          - Nursery
    CreateFacilityResponsePayload:
      required:
      - id
      - status
      type: object
      properties:
        id:
          type: integer
          format: int64
        status:
          $ref: '#/components/schemas/SuccessOrError'
    CreateNurseryTransferRequestPayload:
      required:
      - date
      - destinationFacilityId
      - germinatingQuantity
      - notReadyQuantity
      - readyQuantity
      type: object
      properties:
        date:
          type: string
          format: date
        destinationFacilityId:
          type: integer
          format: int64
        germinatingQuantity:
          minimum: 0
          type: integer
          format: int32
        notes:
          type: string
        notReadyQuantity:
          minimum: 0
          type: integer
          format: int32
        readyByDate:
          type: string
          format: date
        readyQuantity:
          minimum: 0
          type: integer
          format: int32
        withdrawnByUserId:
          type: integer
          description: "ID of the user who withdrew the seeds. Default is the current\
            \ user's ID. If non-null, the current user must have permission to read\
            \ the referenced user's membership details in the organization."
          format: int64
    CreateNurseryTransferResponsePayload:
      required:
      - accession
      - batch
      - status
      type: object
      properties:
        accession:
          description: Updated accession that includes a withdrawal for the nursery
            transfer.
          allOf:
          - $ref: '#/components/schemas/AccessionPayloadV2'
        batch:
          description: Details of newly-created seedling batch.
          allOf:
          - $ref: '#/components/schemas/BatchPayload'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    CreateNurseryWithdrawalRequestPayload:
      required:
      - batchWithdrawals
      - facilityId
      - purpose
      - withdrawnDate
      type: object
      properties:
        batchWithdrawals:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/BatchWithdrawalPayload'
        destinationFacilityId:
          type: integer
          description: "If purpose is \"Nursery Transfer\", the ID of the facility\
            \ to transfer to. Must be in the same organization as the originating\
            \ facility. Not allowed for purposes other than \"Nursery Transfer\"."
          format: int64
        facilityId:
          type: integer
          format: int64
        notes:
          type: string
        purpose:
          type: string
          enum:
          - Nursery Transfer
          - Dead
          - Out Plant
          - Other
        readyByDate:
          type: string
          description: "If purpose is \"Nursery Transfer\", the estimated ready-by\
            \ date to use for the batches that are created at the other nursery."
          format: date
        withdrawnDate:
          type: string
          format: date
    CreateNurseryWithdrawalResponsePayload:
      required:
      - batches
      - status
      - withdrawal
      type: object
      properties:
        batches:
          type: array
          items:
            $ref: '#/components/schemas/BatchPayload'
        withdrawal:
          $ref: '#/components/schemas/NurseryWithdrawalPayload'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    CreateOrganizationRequestPayload:
      required:
      - name
      type: object
      properties:
        countryCode:
          maxLength: 2
          minLength: 2
          type: string
          description: ISO 3166 alpha-2 code of organization's country.
          example: AU
        countrySubdivisionCode:
          maxLength: 6
          minLength: 4
          type: string
          description: "ISO 3166-2 code of organization's country subdivision (state,\
            \ province, region, etc.) This is the full ISO 3166-2 code including the\
            \ country prefix. If this is set, countryCode must also be set."
          example: US-HI
        description:
          type: string
        name:
          type: string
    CreateOrganizationUserResponsePayload:
      required:
      - id
      - status
      type: object
      properties:
        id:
          type: integer
          description: The ID of the newly-added user.
          format: int64
        status:
          $ref: '#/components/schemas/SuccessOrError'
    CreateSpeciesResponsePayload:
      required:
      - id
      - status
      type: object
      properties:
        id:
          type: integer
          format: int64
        status:
          $ref: '#/components/schemas/SuccessOrError'
    CreateTimeseriesEntry:
      required:
      - deviceId
      - timeseriesName
      - type
      type: object
      properties:
        deviceId:
          type: integer
          description: ID of device that produces this timeseries.
          format: int64
        timeseriesName:
          type: string
          description: "Name of this timeseries. Duplicate timeseries names for the\
            \ same device aren't allowed, but different devices can have timeseries\
            \ with the same name."
        type:
          type: string
          enum:
          - Numeric
          - Text
        decimalPlaces:
          type: integer
          description: "Number of significant fractional digits (after the decimal\
            \ point), if this is a timeseries with non-integer numeric values."
          format: int32
        units:
          type: string
          description: Units of measure for values in this timeseries.
          example: volts
    CreateTimeseriesRequestPayload:
      required:
      - timeseries
      type: object
      properties:
        timeseries:
          type: array
          items:
            $ref: '#/components/schemas/CreateTimeseriesEntry'
    CreateViabilityTestRequestPayload:
      required:
      - seedsTested
      - testType
      type: object
      properties:
        endDate:
          type: string
          format: date
        notes:
          type: string
        seedsCompromised:
          type: integer
          format: int32
        seedsEmpty:
          type: integer
          format: int32
        seedsFilled:
          type: integer
          format: int32
        seedsTested:
          minimum: 1
          type: integer
          format: int32
        seedType:
          type: string
          enum:
          - Fresh
          - Stored
        startDate:
          type: string
          format: date
        substrate:
          type: string
          enum:
          - Nursery Media
          - Agar
          - Paper
          - Other
          - Sand
          - Media Mix
          - Soil
          - Moss
          - Perlite/Vermiculite
        testResults:
          type: array
          items:
            $ref: '#/components/schemas/ViabilityTestResultPayload'
        testType:
          type: string
          enum:
          - Lab
          - Nursery
          - Cut
        treatment:
          type: string
          enum:
          - Soak
          - Scarify
          - Chemical
          - Stratification
          - Other
          - Light
        withdrawnByUserId:
          type: integer
          description: "ID of user who withdrew seeds to perform the test. Defaults\
            \ to the current user. If non-null, the current user must have permission\
            \ to see the referenced user's membership details in the organization."
          format: int64
    CreateWithdrawalRequestPayload:
      type: object
      properties:
        date:
          type: string
          format: date
          writeOnly: true
        purpose:
          type: string
          writeOnly: true
          enum:
          - Propagation
          - Outreach or Education
          - Research
          - Broadcast
          - Share with Another Site
          - Other
          - Viability Testing
          - Out-planting
          - Nursery
        notes:
          type: string
          writeOnly: true
        withdrawnByUserId:
          type: integer
          description: "ID of the user who withdrew the seeds. Default is the current\
            \ user's ID. If non-null, the current user must have permission to read\
            \ the referenced user's membership details in the organization."
          format: int64
          writeOnly: true
        withdrawnQuantity:
          description: "Quantity of seeds withdrawn. If this quantity is in weight\
            \ and the remaining quantity of the accession is in seeds or vice versa,\
            \ the accession must have a subset weight and count."
          allOf:
          - $ref: '#/components/schemas/SeedQuantityPayload'
    DeviceConfig:
      required:
      - facilityId
      - id
      - make
      - model
      - name
      - type
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier of this device.
          format: int64
        facilityId:
          type: integer
          description: Identifier of facility where this device is located.
          format: int64
        name:
          type: string
          description: Name of this device.
          example: BMU-1
        type:
          type: string
          description: High-level type of the device. Device manager may use this
            in conjunction with the make and model to determine which metrics to report.
          example: inverter
        make:
          type: string
          description: Name of device manufacturer.
          example: InHand Networks
        model:
          type: string
          description: Model number or model name of the device.
          example: IR915L
        protocol:
          type: string
          description: Device manager protocol name.
          example: modbus
        address:
          type: string
          description: "Protocol-specific address of device, e.g., an IP address or\
            \ a Bluetooth device ID."
          example: 192.168.1.100
        port:
          type: integer
          description: Port number if relevant for the protocol.
          format: int32
          example: 50000
        settings:
          type: object
          description: Protocol- and device-specific custom settings. This is an arbitrary
            JSON object; the exact settings depend on the device type.
        verbosity:
          type: integer
          description: Level of diagnostic information to log.
          format: int32
        parentId:
          type: integer
          description: "ID of parent device such as a hub or gateway, if any."
          format: int64
    DeviceManagerPayload:
      required:
      - available
      - id
      - isOnline
      - sensorKitId
      type: object
      properties:
        id:
          type: integer
          format: int64
        sensorKitId:
          type: string
        available:
          type: boolean
          description: "If true, this device manager is available to connect to a\
            \ facility."
        facilityId:
          type: integer
          description: "The facility this device manager is connected to, or null\
            \ if it is not connected."
          format: int64
        isOnline:
          type: boolean
          description: "If true, this device manager is currently online."
        onlineChangedTime:
          type: string
          description: "When the device manager's isOnline value changed most recently.\
            \ In other words, if isOnline is true, the device manager has been online\
            \ since this time; if isOnline is false, the device manager has been offline\
            \ since this time. This may be null if the device manager has not come\
            \ online for the first time yet."
          format: date-time
        updateProgress:
          maximum: 100
          minimum: 0
          type: integer
          description: "If an update is being downloaded or installed, its progress\
            \ as a percentage. Not present if no update is in progress."
          format: int32
    DeviceTemplatePayload:
      required:
      - category
      - id
      - make
      - model
      - name
      - type
      type: object
      properties:
        id:
          type: integer
          format: int64
        category:
          type: string
          enum:
          - PV
          - Seed Bank Default
        name:
          type: string
        type:
          type: string
        make:
          type: string
        model:
          type: string
        protocol:
          type: string
        address:
          type: string
        port:
          type: integer
          format: int32
        settings:
          type: object
          additionalProperties:
            type: object
        verbosity:
          type: integer
          format: int32
    DeviceUnresponsiveRequestPayload:
      type: object
      properties:
        lastRespondedTime:
          type: string
          description: When the device most recently responded. Null or absent if
            the device has never responded.
          format: date-time
        expectedIntervalSecs:
          type: integer
          description: The expected amount of time between updates from the device.
            Null or absent if there is no fixed update interval.
          format: int32
    ErrorDetails:
      required:
      - message
      type: object
      properties:
        message:
          type: string
    FacilityPayload:
      required:
      - connectionState
      - createdTime
      - id
      - name
      - organizationId
      - type
      type: object
      properties:
        connectionState:
          type: string
          enum:
          - Not Connected
          - Connected
          - Configured
        createdTime:
          type: string
          format: date-time
        description:
          type: string
        id:
          type: integer
          format: int64
        name:
          type: string
        organizationId:
          type: integer
          format: int64
        type:
          type: string
          enum:
          - Seed Bank
          - Desalination
          - Reverse Osmosis
          - Nursery
    FieldNodePayload:
      required:
      - field
      - type
      - values
      type: object
      allOf:
      - $ref: '#/components/schemas/SearchNodePayload'
      - type: object
        properties:
          field:
            type: string
          values:
            minItems: 1
            type: array
            description: "List of values to match. For exact and fuzzy searches, a\
              \ list of at least one value to search for; the list may include null\
              \ to match accessions where the field does not have a value. For range\
              \ searches, the list must contain exactly two values, the minimum and\
              \ maximum; one of the values may be null to search for all values above\
              \ a minimum or below a maximum."
            items:
              type: string
              nullable: true
          type:
            type: string
            enum:
            - Exact
            - Fuzzy
            - Range
    FieldValuesPayload:
      required:
      - partial
      - values
      type: object
      properties:
        values:
          type: array
          description: "List of values in the matching accessions. If there are accessions\
            \ where the field has no value, this list will contain null (an actual\
            \ null value, not the string \"null\")."
          items:
            type: string
            nullable: true
        partial:
          type: boolean
          description: "If true, the list of values is too long to return in its entirety\
            \ and \"values\" is a partial list."
    Geolocation:
      required:
      - latitude
      - longitude
      type: object
      properties:
        latitude:
          type: number
        longitude:
          type: number
        accuracy:
          type: number
    GetAccessionHistoryResponsePayload:
      required:
      - history
      - status
      type: object
      properties:
        history:
          type: array
          description: History of changes in descending time order (newest first.)
          items:
            $ref: '#/components/schemas/AccessionHistoryEntryPayload'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    GetAccessionResponsePayloadV2:
      required:
      - accession
      - status
      type: object
      properties:
        accession:
          $ref: '#/components/schemas/AccessionPayloadV2'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    GetAutomationResponsePayload:
      required:
      - automation
      - status
      type: object
      properties:
        automation:
          $ref: '#/components/schemas/AutomationPayload'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    GetCurrentTimeResponsePayload:
      required:
      - currentTime
      - status
      type: object
      properties:
        currentTime:
          type: string
          format: date-time
        status:
          $ref: '#/components/schemas/SuccessOrError'
    GetDeviceManagerResponsePayload:
      required:
      - manager
      - status
      type: object
      properties:
        manager:
          $ref: '#/components/schemas/DeviceManagerPayload'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    GetDeviceManagersResponsePayload:
      required:
      - managers
      - status
      type: object
      properties:
        managers:
          type: array
          description: "List of device managers that match the conditions in the request.\
            \ Empty if there were no matches, e.g., the requested short code didn't\
            \ exist."
          items:
            $ref: '#/components/schemas/DeviceManagerPayload'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    GetDeviceResponsePayload:
      required:
      - device
      - status
      type: object
      properties:
        device:
          $ref: '#/components/schemas/DeviceConfig'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    GetFacilityResponse:
      required:
      - facility
      - status
      type: object
      properties:
        facility:
          $ref: '#/components/schemas/FacilityPayload'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    GetNotificationResponsePayload:
      required:
      - notification
      - status
      type: object
      properties:
        notification:
          $ref: '#/components/schemas/NotificationPayload'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    GetNotificationsCountResponsePayload:
      required:
      - notifications
      - status
      type: object
      properties:
        notifications:
          type: array
          items:
            $ref: '#/components/schemas/NotificationCountPayload'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    GetNotificationsResponsePayload:
      required:
      - notifications
      - status
      type: object
      properties:
        notifications:
          type: array
          items:
            $ref: '#/components/schemas/NotificationPayload'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    GetOrganizationResponsePayload:
      required:
      - organization
      - status
      type: object
      properties:
        organization:
          $ref: '#/components/schemas/OrganizationPayload'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    GetOrganizationUserResponsePayload:
      required:
      - status
      - user
      type: object
      properties:
        user:
          $ref: '#/components/schemas/OrganizationUserPayload'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    GetSpeciesProblemResponsePayload:
      required:
      - problem
      - status
      type: object
      properties:
        problem:
          $ref: '#/components/schemas/SpeciesProblemElement'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    GetSpeciesResponsePayload:
      required:
      - species
      - status
      type: object
      properties:
        species:
          $ref: '#/components/schemas/SpeciesResponseElement'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    GetSpeciesSummaryResponsePayload:
      required:
      - status
      - summary
      type: object
      properties:
        summary:
          $ref: '#/components/schemas/SpeciesSummaryPayload'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    GetTimeseriesHistoryRequestPayload:
      required:
      - count
      - timeseries
      type: object
      properties:
        startTime:
          type: string
          description: "Start of time range to query. If this is non-null, endTime\
            \ must also be specified, and seconds must be null or absent."
          format: date-time
        endTime:
          type: string
          description: "End of time range to query. If this is non-null, startTime\
            \ must also be specified, and seconds must be null or absent."
          format: date-time
        seconds:
          type: integer
          description: "Number of seconds in the past to start the time range. If\
            \ this is non-null, startTime and endTime must be null or absent."
          format: int64
        count:
          maximum: 50
          minimum: 1
          type: integer
          description: "Number of values to return. The time range is divided into\
            \ this many equal intervals, and a value is returned from each interval\
            \ if available."
          format: int32
        timeseries:
          maxItems: 100
          minItems: 0
          type: array
          description: Timeseries to query. May be from different devices.
          items:
            $ref: '#/components/schemas/TimeseriesIdPayload'
    GetTimeseriesHistoryResponsePayload:
      required:
      - values
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/TimeseriesValuesPayload'
    GetUploadStatusDetailsPayload:
      required:
      - finished
      - id
      - status
      type: object
      properties:
        id:
          type: integer
          format: int64
        status:
          type: string
          enum:
          - Receiving
          - Validating
          - Processing
          - Completed
          - Processing Failed
          - Invalid
          - Receiving Failed
          - Awaiting Validation
          - Awaiting User Action
          - Awaiting Processing
        errors:
          type: array
          items:
            $ref: '#/components/schemas/UploadProblemPayload'
        warnings:
          type: array
          items:
            $ref: '#/components/schemas/UploadProblemPayload'
        finished:
          type: boolean
          description: "True if the server is finished processing the file, either\
            \ successfully or not."
    GetUploadStatusResponsePayload:
      required:
      - details
      - status
      type: object
      properties:
        details:
          $ref: '#/components/schemas/GetUploadStatusDetailsPayload'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    GetUserPreferencesResponsePayload:
      required:
      - status
      type: object
      properties:
        preferences:
          type: object
        status:
          $ref: '#/components/schemas/SuccessOrError'
    GetUserResponsePayload:
      required:
      - status
      - user
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserProfilePayload'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    GetViabilityTestPayload:
      required:
      - accessionId
      - id
      - seedsTested
      - testType
      type: object
      properties:
        accessionId:
          type: integer
          format: int64
        endDate:
          type: string
          format: date
        id:
          type: integer
          format: int64
        notes:
          type: string
        seedsCompromised:
          type: integer
          format: int32
        seedsEmpty:
          type: integer
          format: int32
        seedsFilled:
          type: integer
          format: int32
        seedsTested:
          type: integer
          format: int32
        seedType:
          type: string
          enum:
          - Fresh
          - Stored
        startDate:
          type: string
          format: date
        substrate:
          type: string
          enum:
          - Nursery Media
          - Agar
          - Paper
          - Other
          - Sand
          - Media Mix
          - Soil
          - Moss
          - Perlite/Vermiculite
        testResults:
          type: array
          items:
            $ref: '#/components/schemas/ViabilityTestResultPayload'
        testType:
          type: string
          enum:
          - Lab
          - Nursery
          - Cut
        totalSeedsGerminated:
          type: integer
          format: int32
        treatment:
          type: string
          enum:
          - Soak
          - Scarify
          - Chemical
          - Stratification
          - Other
          - Light
        viabilityPercent:
          type: integer
          description: "Server-calculated viability percent for this test. For lab\
            \ and nursery tests, this is based on the total seeds germinated across\
            \ all test results. For cut tests, it is based on the number of seeds\
            \ filled."
          format: int32
        withdrawnByName:
          type: string
          description: Full name of user who withdrew seeds to perform the test.
        withdrawnByUserId:
          type: integer
          description: ID of user who withdrew seeds to perform the test.
          format: int64
    GetViabilityTestResponsePayload:
      required:
      - status
      - viabilityTest
      type: object
      properties:
        viabilityTest:
          $ref: '#/components/schemas/GetViabilityTestPayload'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    GetWithdrawalPayload:
      required:
      - date
      type: object
      properties:
        date:
          type: string
          format: date
        estimatedCount:
          type: integer
          description: Number of seeds withdrawn. Calculated by server. This is an
            estimate if "withdrawnQuantity" is a weight quantity and the accession
            has subset weight and count data. Absent if "withdrawnQuantity" is a weight
            quantity and the accession has no subset weight and count.
          format: int32
        estimatedWeight:
          description: Weight of seeds withdrawn. Calculated by server. This is an
            estimate if "withdrawnQuantity" is a seed count and the accession has
            subset weight and count data. Absent if "withdrawnQuantity" is a seed
            count and the accession has no subset weight and count.
          allOf:
          - $ref: '#/components/schemas/SeedQuantityPayload'
        id:
          type: integer
          description: Server-assigned unique ID of this withdrawal.
          format: int64
        purpose:
          type: string
          enum:
          - Propagation
          - Outreach or Education
          - Research
          - Broadcast
          - Share with Another Site
          - Other
          - Viability Testing
          - Out-planting
          - Nursery
        notes:
          type: string
        viabilityTestId:
          type: integer
          description: "If this withdrawal is of purpose \"Viability Testing\", the\
            \ ID of the test it is associated with."
          format: int64
        withdrawnByName:
          type: string
          description: "Full name of the person who withdrew the seeds. V1 COMPATIBILITY:\
            \ This is the \"staffResponsible\" v1 field, which may not be the name\
            \ of an organization user."
        withdrawnByUserId:
          type: integer
          description: "ID of the user who withdrew the seeds. Only present if the\
            \ current user has permission to list the users in the organization. V1\
            \ COMPATIBILITY: Also absent if the withdrawal was written with the v1\
            \ API and we haven't yet written the code to figure out which user ID\
            \ to assign."
          format: int64
        withdrawnQuantity:
          description: "Quantity of seeds withdrawn. For viability testing withdrawals,\
            \ this is always the same as the test's \"seedsTested\" value."
          allOf:
          - $ref: '#/components/schemas/SeedQuantityPayload'
    GetWithdrawalResponsePayload:
      required:
      - status
      - withdrawal
      type: object
      properties:
        withdrawal:
          $ref: '#/components/schemas/GetWithdrawalPayload'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    GetWithdrawalsResponsePayload:
      required:
      - status
      - withdrawals
      type: object
      properties:
        withdrawals:
          type: array
          items:
            $ref: '#/components/schemas/GetWithdrawalPayload'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    ListAllFieldValuesRequestPayload:
      required:
      - fields
      type: object
      properties:
        facilityId:
          type: integer
          format: int64
        fields:
          type: array
          items:
            type: string
        organizationId:
          type: integer
          format: int64
    ListAllFieldValuesResponsePayload:
      required:
      - results
      - status
      type: object
      properties:
        results:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AllFieldValuesPayload'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    ListAutomationsResponsePayload:
      required:
      - automations
      - status
      type: object
      properties:
        automations:
          type: array
          items:
            $ref: '#/components/schemas/AutomationPayload'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    ListDeviceConfigsResponse:
      required:
      - devices
      - status
      type: object
      properties:
        devices:
          type: array
          items:
            $ref: '#/components/schemas/DeviceConfig'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    ListDeviceTemplatesResponsePayload:
      required:
      - status
      - templates
      type: object
      properties:
        templates:
          type: array
          items:
            $ref: '#/components/schemas/DeviceTemplatePayload'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    ListFacilitiesResponse:
      required:
      - facilities
      - status
      type: object
      properties:
        facilities:
          type: array
          items:
            $ref: '#/components/schemas/FacilityPayload'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    ListFieldValuesRequestPayload:
      required:
      - fields
      type: object
      properties:
        facilityId:
          type: integer
          format: int64
        fields:
          type: array
          items:
            type: string
        organizationId:
          type: integer
          format: int64
        search:
          oneOf:
          - $ref: '#/components/schemas/AndNodePayload'
          - $ref: '#/components/schemas/FieldNodePayload'
          - $ref: '#/components/schemas/NotNodePayload'
          - $ref: '#/components/schemas/OrNodePayload'
    ListFieldValuesResponsePayload:
      required:
      - results
      - status
      type: object
      properties:
        results:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/FieldValuesPayload'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    ListOrganizationRolesResponsePayload:
      required:
      - roles
      - status
      type: object
      properties:
        roles:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationRolePayload'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    ListOrganizationUsersResponsePayload:
      required:
      - status
      - users
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationUserPayload'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    ListOrganizationsResponsePayload:
      required:
      - organizations
      - status
      type: object
      properties:
        organizations:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationPayload'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    ListPhotosResponseElement:
      required:
      - filename
      - size
      type: object
      properties:
        filename:
          type: string
        size:
          type: integer
          format: int64
    ListPhotosResponsePayload:
      required:
      - photos
      - status
      type: object
      properties:
        photos:
          type: array
          items:
            $ref: '#/components/schemas/ListPhotosResponseElement'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    ListSpeciesResponsePayload:
      required:
      - species
      - status
      type: object
      properties:
        species:
          type: array
          items:
            $ref: '#/components/schemas/SpeciesResponseElement'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    ListTimeseriesResponsePayload:
      required:
      - status
      - timeseries
      type: object
      properties:
        timeseries:
          type: array
          items:
            $ref: '#/components/schemas/TimeseriesPayload'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    ListViabilityTestsResponsePayload:
      required:
      - status
      - viabilityTests
      type: object
      properties:
        viabilityTests:
          type: array
          items:
            $ref: '#/components/schemas/GetViabilityTestPayload'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    ModifyAutomationRequestPayload:
      required:
      - name
      - type
      - verbosity
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        configuration:
          type: object
        type:
          type: string
        timeseriesName:
          type: string
        deviceId:
          type: integer
          format: int64
        lowerThreshold:
          type: number
          format: double
        upperThreshold:
          type: number
          format: double
        verbosity:
          type: integer
          format: int32
        settings:
          type: object
          additionalProperties:
            type: object
    NotNodePayload:
      required:
      - child
      type: object
      description: Search criterion that matches results that do not match a set of
        search criteria.
      allOf:
      - $ref: '#/components/schemas/SearchNodePayload'
      - type: object
        properties:
          child:
            $ref: '#/components/schemas/SearchNodePayload'
    NotificationCountPayload:
      required:
      - unread
      type: object
      properties:
        organizationId:
          type: integer
          format: int64
        unread:
          type: integer
          format: int32
    NotificationPayload:
      required:
      - body
      - createdTime
      - id
      - isRead
      - localUrl
      - notificationCriticality
      - title
      type: object
      properties:
        id:
          type: integer
          format: int64
        notificationCriticality:
          type: string
          enum:
          - Info
          - Warning
          - Error
          - Success
        organizationId:
          type: integer
          format: int64
        title:
          type: string
        body:
          type: string
        localUrl:
          type: string
          format: uri
        createdTime:
          type: string
          format: date-time
        isRead:
          type: boolean
    NurseryWithdrawalPayload:
      required:
      - batchWithdrawals
      - facilityId
      - id
      - purpose
      - withdrawnDate
      type: object
      properties:
        batchWithdrawals:
          type: array
          items:
            $ref: '#/components/schemas/BatchWithdrawalPayload'
        destinationFacilityId:
          type: integer
          description: "If purpose is \"Nursery Transfer\", the ID of the facility\
            \ to which the seedlings were transferred."
          format: int64
        facilityId:
          type: integer
          format: int64
        id:
          type: integer
          format: int64
        notes:
          type: string
        purpose:
          type: string
          enum:
          - Nursery Transfer
          - Dead
          - Out Plant
          - Other
        withdrawnDate:
          type: string
          format: date
    OrNodePayload:
      type: object
      description: "Search criterion that matches results that meet any of a set of\
        \ other search criteria. That is, if the list of children is x, y, and z,\
        \ this will require x OR y OR z."
      allOf:
      - $ref: '#/components/schemas/SearchNodePayload'
    OrganizationPayload:
      required:
      - createdTime
      - id
      - name
      - role
      - totalUsers
      type: object
      properties:
        countryCode:
          maxLength: 2
          minLength: 2
          type: string
          description: ISO 3166 alpha-2 code of organization's country.
          example: AU
        countrySubdivisionCode:
          maxLength: 6
          minLength: 4
          type: string
          description: "ISO 3166-2 code of organization's country subdivision (state,\
            \ province, region, etc.) This is the full ISO 3166-2 code including the\
            \ country prefix. If this is set, countryCode will also be set."
          example: US-HI
        createdTime:
          type: string
          format: date-time
        description:
          type: string
        facilities:
          type: array
          description: This organization's facilities. Only included if depth is "Facility".
          items:
            $ref: '#/components/schemas/FacilityPayload'
        id:
          type: integer
          format: int64
        name:
          type: string
        role:
          type: string
          description: The current user's role in the organization.
          enum:
          - Contributor
          - Manager
          - Admin
          - Owner
        totalUsers:
          type: integer
          description: "The total number of users in the organization, including the\
            \ current user."
          format: int32
    OrganizationRolePayload:
      required:
      - role
      - totalUsers
      type: object
      properties:
        role:
          type: string
          enum:
          - Contributor
          - Manager
          - Admin
          - Owner
        totalUsers:
          type: integer
          description: Total number of users in the organization with this role.
          format: int32
    OrganizationUserPayload:
      required:
      - addedTime
      - email
      - id
      - role
      type: object
      properties:
        addedTime:
          type: string
          description: Date and time the user was added to the organization.
          format: date-time
        email:
          type: string
        id:
          type: integer
          format: int64
        firstName:
          type: string
          description: The user's first name. Not present if the user has been added
            to the organization but has not signed up for an account yet.
        lastName:
          type: string
          description: The user's last name. Not present if the user has been added
            to the organization but has not signed up for an account yet.
        role:
          type: string
          enum:
          - Contributor
          - Manager
          - Admin
          - Owner
    RecordTimeseriesValuesRequestPayload:
      required:
      - timeseries
      type: object
      properties:
        timeseries:
          maxItems: 1000
          minItems: 0
          type: array
          items:
            $ref: '#/components/schemas/TimeseriesValuesPayload'
    RecordTimeseriesValuesResponsePayload:
      required:
      - status
      type: object
      properties:
        failures:
          type: array
          description: List of values that the server failed to record. Will not be
            included if all the values were recorded successfully.
          items:
            $ref: '#/components/schemas/TimeseriesValuesErrorPayload'
        status:
          $ref: '#/components/schemas/SuccessOrError'
        error:
          $ref: '#/components/schemas/ErrorDetails'
      description: Results of a request to record timeseries values.
    ResolveUploadRequestPayload:
      required:
      - overwriteExisting
      type: object
      properties:
        overwriteExisting:
          type: boolean
          description: "If true, the data for entries that already exist will be overwritten\
            \ with the values in the uploaded file. If false, only entries that don't\
            \ already exist will be imported."
    SearchNodePayload:
      required:
      - operation
      type: object
      properties:
        operation:
          type: string
      description: A search criterion. The search will return results that match this
        criterion. The criterion can be composed of other search criteria to form
        arbitrary Boolean search expressions. TYPESCRIPT-OVERRIDE-TYPE-WITH-ANY
      discriminator:
        propertyName: operation
        mapping:
          and: '#/components/schemas/AndNodePayload'
          field: '#/components/schemas/FieldNodePayload'
          not: '#/components/schemas/NotNodePayload'
          or: '#/components/schemas/NotNodePayload'
      oneOf:
      - $ref: '#/components/schemas/AndNodePayload'
      - $ref: '#/components/schemas/FieldNodePayload'
      - $ref: '#/components/schemas/NotNodePayload'
      - $ref: '#/components/schemas/OrNodePayload'
    SearchRequestPayload:
      required:
      - count
      - fields
      type: object
      properties:
        prefix:
          type: string
          description: "Prefix for field names. This determines how field names are\
            \ interpreted, and also how results are structured. Each element in the\
            \ \"results\" array in the response will be an instance of whatever entity\
            \ the prefix points to. Always evaluated starting from the \"organizations\"\
            \ level. If not present, the search will return a list of organizations."
          example: facilities.accessions
        fields:
          type: array
          description: List of fields to return. Field names should be relative to
            the prefix. They may navigate the data hierarchy using '.' or '_' as delimiters.
          example:
          - processingStartDate
          - viabilityTests.seedsTested
          - facility_name
          items:
            type: string
        sortOrder:
          type: array
          description: How to sort the search results. This controls both the order
            of the top-level results and the order of any lists of child objects.
          items:
            $ref: '#/components/schemas/SearchSortOrderElement'
        search:
          oneOf:
          - $ref: '#/components/schemas/AndNodePayload'
          - $ref: '#/components/schemas/FieldNodePayload'
          - $ref: '#/components/schemas/NotNodePayload'
          - $ref: '#/components/schemas/OrNodePayload'
        count:
          type: integer
          description: Maximum number of top-level search results to return. The system
            may impose a limit on this value. A separate system-imposed limit may
            also be applied to lists of child objects inside the top-level results.
            Use a value of 0 to return the maximum number of allowed results.
          format: int32
          default: 25
        cursor:
          type: string
          description: "Starting point for search results. If present, a previous\
            \ search will be continued from where it left off. This should be the\
            \ value of the cursor that was returned in the response to a previous\
            \ search."
    SearchResponsePayload:
      required:
      - results
      type: object
      properties:
        results:
          type: array
          items:
            type: object
        cursor:
          type: string
    SearchSortOrderElement:
      required:
      - field
      type: object
      properties:
        field:
          type: string
        direction:
          type: string
          default: Ascending
          enum:
          - Ascending
          - Descending
    SeedCountSummaryPayload:
      required:
      - subtotalBySeedCount
      - subtotalByWeightEstimate
      - total
      - unknownQuantityAccessions
      type: object
      properties:
        total:
          type: integer
          description: Total number of seeds remaining. The sum of subtotalBySeedCount
            and subtotalByWeightEstimate.
          format: int64
        subtotalBySeedCount:
          type: integer
          description: Total number of seeds remaining in accessions whose quantities
            are measured in seeds.
          format: int64
        subtotalByWeightEstimate:
          type: integer
          description: Estimated total number of seeds remaining in accessions whose
            quantities are measured by weight. This estimate is based on the subset
            weight and count. Accessions measured by weight that don't have subset
            weights and counts are not included in this estimate.
          format: int64
        unknownQuantityAccessions:
          type: integer
          description: Number of accessions that are measured by weight and don't
            have subset weight and count data. The system cannot estimate how many
            seeds they have.
          format: int32
    SeedQuantityPayload:
      required:
      - quantity
      - units
      type: object
      properties:
        quantity:
          type: number
          description: "Number of units of seeds. If \"units\" is \"Seeds\", this\
            \ is the number of seeds and must be an integer. Otherwise it is a measurement\
            \ in the weight units specified in the \"units\" field, and may have a\
            \ fractional part."
        units:
          type: string
          enum:
          - Seeds
          - Grams
          - Milligrams
          - Kilograms
          - Ounces
          - Pounds
        grams:
          type: number
          description: "If this quantity is a weight measurement, the weight in grams.\
            \ This is not set if the \"units\" field is \"Seeds\". This is always\
            \ calculated on the server side and is ignored on input."
          readOnly: true
      description: "Represents a quantity of seeds, measured either in individual\
        \ seeds or by weight."
    SendFacilityAlertRequestPayload:
      required:
      - body
      - subject
      type: object
      properties:
        subject:
          type: string
        body:
          type: string
          description: Alert body in plain text. HTML alerts are not supported yet.
    SimpleErrorResponsePayload:
      required:
      - error
      - status
      type: object
      properties:
        error:
          $ref: '#/components/schemas/ErrorDetails'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    SimpleSuccessResponsePayload:
      required:
      - status
      type: object
      properties:
        status:
          $ref: '#/components/schemas/SuccessOrError'
    SpeciesLookupCommonNamePayload:
      required:
      - name
      type: object
      properties:
        name:
          type: string
        language:
          type: string
          description: ISO 639-1 two-letter language code indicating the name's language.
            Some common names in the server's taxonomic database are not tagged with
            languages; this value will not be present for those names.
    SpeciesLookupDetailsResponsePayload:
      required:
      - familyName
      - scientificName
      type: object
      properties:
        scientificName:
          type: string
        commonNames:
          type: array
          description: "List of known common names for the species, if any."
          items:
            $ref: '#/components/schemas/SpeciesLookupCommonNamePayload'
        familyName:
          type: string
        endangered:
          type: boolean
          description: "True if the species is known to be endangered, false if the\
            \ species is known to not be endangered. This value will not be present\
            \ if the server's taxonomic database doesn't indicate whether or not the\
            \ species is endangered."
        problemType:
          type: string
          description: "If this is not the accepted name for the species, the type\
            \ of problem the name has. Currently, this will always be \"Name Is Synonym\"\
            ."
          enum:
          - Name Misspelled
          - Name Not Found
          - Name Is Synonym
        suggestedScientificName:
          type: string
          description: "If this is not the accepted name for the species, the name\
            \ to suggest as an alternative."
    SpeciesLookupNamesResponsePayload:
      required:
      - names
      - partial
      - status
      type: object
      properties:
        names:
          type: array
          items:
            type: string
        partial:
          type: boolean
          description: True if there were more matching names than could be included
            in the response.
        status:
          $ref: '#/components/schemas/SuccessOrError'
    SpeciesProblemElement:
      required:
      - field
      - id
      - type
      type: object
      properties:
        id:
          type: integer
          format: int64
        field:
          type: string
          enum:
          - Scientific Name
        type:
          type: string
          enum:
          - Name Misspelled
          - Name Not Found
          - Name Is Synonym
        suggestedValue:
          type: string
          description: Value for the field in question that would correct the problem.
            Absent if the system is unable to calculate a corrected value.
    SpeciesRequestPayload:
      required:
      - organizationId
      - scientificName
      type: object
      properties:
        commonName:
          type: string
        endangered:
          type: boolean
        familyName:
          type: string
        growthForm:
          type: string
          enum:
          - Tree
          - Shrub
          - Forb
          - Graminoid
          - Fern
        organizationId:
          type: integer
          description: Which organization's species list to update.
          format: int64
        rare:
          type: boolean
        scientificName:
          type: string
        seedStorageBehavior:
          type: string
          enum:
          - Orthodox
          - Recalcitrant
          - Intermediate
          - Unknown
    SpeciesResponseElement:
      required:
      - id
      - scientificName
      type: object
      properties:
        commonName:
          type: string
        endangered:
          type: boolean
        familyName:
          type: string
        growthForm:
          type: string
          enum:
          - Tree
          - Shrub
          - Forb
          - Graminoid
          - Fern
        id:
          type: integer
          format: int64
        problems:
          type: array
          items:
            $ref: '#/components/schemas/SpeciesProblemElement'
        rare:
          type: boolean
        scientificName:
          type: string
        seedStorageBehavior:
          type: string
          enum:
          - Orthodox
          - Recalcitrant
          - Intermediate
          - Unknown
    SpeciesSummaryNurseryPayload:
      required:
      - facilityId
      - name
      type: object
      properties:
        facilityId:
          type: integer
          format: int64
        name:
          type: string
    SpeciesSummaryPayload:
      required:
      - germinatingQuantity
      - lossRate
      - notReadyQuantity
      - nurseries
      - readyQuantity
      - speciesId
      - totalDead
      - totalQuantity
      - totalWithdrawn
      type: object
      properties:
        germinatingQuantity:
          type: integer
          format: int64
        lossRate:
          maximum: 100
          minimum: 0
          type: integer
          description: Percentage of current and past inventory that was withdrawn
            due to death.
          format: int32
        notReadyQuantity:
          type: integer
          format: int64
        nurseries:
          type: array
          items:
            $ref: '#/components/schemas/SpeciesSummaryNurseryPayload'
        readyQuantity:
          type: integer
          format: int64
        speciesId:
          type: integer
          format: int64
        totalDead:
          type: integer
          description: Total number of germinated plants that have been withdrawn
            due to death.
          format: int64
        totalQuantity:
          type: integer
          description: Total number of germinated plants currently in inventory.
          format: int64
        totalWithdrawn:
          type: integer
          description: Total number of germinated plants that have been withdrawn
            in the past.
          format: int64
    StorageLocationDetails:
      required:
      - storageCondition
      - storageLocation
      type: object
      properties:
        storageLocation:
          type: string
        storageCondition:
          type: string
          enum:
          - Refrigerator
          - Freezer
    StorageLocationsResponsePayload:
      required:
      - locations
      - status
      type: object
      properties:
        locations:
          type: array
          items:
            $ref: '#/components/schemas/StorageLocationDetails'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    SuccessOrError:
      type: string
      description: Indicates of success or failure of the requested operation.
      enum:
      - ok
      - error
    SummarizeAccessionSearchRequestPayload:
      type: object
      properties:
        search:
          oneOf:
          - $ref: '#/components/schemas/AndNodePayload'
          - $ref: '#/components/schemas/FieldNodePayload'
          - $ref: '#/components/schemas/NotNodePayload'
          - $ref: '#/components/schemas/OrNodePayload'
    SummarizeAccessionSearchResponsePayload:
      required:
      - accessions
      - seedsRemaining
      - species
      - status
      type: object
      properties:
        accessions:
          type: integer
          format: int32
        species:
          type: integer
          format: int32
        seedsRemaining:
          $ref: '#/components/schemas/SeedCountSummaryPayload'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    SummaryResponsePayload:
      required:
      - accessionsByState
      - activeAccessions
      - seedsRemaining
      - species
      - status
      type: object
      properties:
        activeAccessions:
          type: integer
          format: int32
        species:
          type: integer
          format: int32
        accessionsByState:
          type: object
          additionalProperties:
            type: integer
            description: Number of accessions in each state.
            format: int32
          description: Number of accessions in each state.
        seedsRemaining:
          description: Summary of the number of seeds remaining across all active
            accessions.
          allOf:
          - $ref: '#/components/schemas/SeedCountSummaryPayload'
        status:
          $ref: '#/components/schemas/SuccessOrError'
      description: Summary of important statistics about the seed bank for the Summary
        page.
    TimeseriesIdPayload:
      required:
      - deviceId
      - timeseriesName
      type: object
      properties:
        deviceId:
          type: integer
          format: int64
        timeseriesName:
          type: string
    TimeseriesPayload:
      required:
      - deviceId
      - timeseriesName
      - type
      type: object
      properties:
        deviceId:
          type: integer
          description: ID of device that produces this timeseries.
          format: int64
        timeseriesName:
          type: string
        type:
          type: string
          enum:
          - Numeric
          - Text
        decimalPlaces:
          type: integer
          description: "Number of significant fractional digits (after the decimal\
            \ point), if this is a timeseries with non-integer numeric values."
          format: int32
        units:
          type: string
          description: Units of measure for values in this timeseries.
          example: volts
        latestValue:
          description: "If any values have been recorded for the timeseries, the latest\
            \ one."
          allOf:
          - $ref: '#/components/schemas/TimeseriesValuePayload'
    TimeseriesValuePayload:
      required:
      - timestamp
      - value
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        value:
          type: string
          description: "Value to record. If the timeseries is of type Numeric, this\
            \ must be a decimal or integer value in string form. If the timeseries\
            \ is of type Text, this can be an arbitrary string."
    TimeseriesValuesErrorPayload:
      required:
      - deviceId
      - message
      - timeseriesName
      - values
      type: object
      properties:
        deviceId:
          type: integer
          description: Device ID as specified in the failing request.
          format: int64
        timeseriesName:
          type: string
          description: Name of timeseries as specified in the failing request.
        values:
          type: array
          description: Values that the server was not able to successfully record.
          items:
            $ref: '#/components/schemas/TimeseriesValuePayload'
        message:
          type: string
          description: Human-readable details about the failure.
    TimeseriesValuesPayload:
      required:
      - deviceId
      - timeseriesName
      - values
      type: object
      properties:
        deviceId:
          type: integer
          description: ID of device that produced this value.
          format: int64
        timeseriesName:
          type: string
          description: Name of timeseries. This must be the name of a timeseries that
            has already been created for the device.
        values:
          type: array
          items:
            $ref: '#/components/schemas/TimeseriesValuePayload'
    UpdateAccessionRequestPayloadV2:
      type: object
      properties:
        bagNumbers:
          uniqueItems: true
          type: array
          writeOnly: true
          items:
            type: string
        collectedDate:
          type: string
          format: date
          writeOnly: true
        collectionSiteCity:
          type: string
          writeOnly: true
        collectionSiteCoordinates:
          uniqueItems: true
          type: array
          writeOnly: true
          items:
            $ref: '#/components/schemas/Geolocation'
        collectionSiteCountryCode:
          type: string
          writeOnly: true
        collectionSiteCountrySubdivision:
          type: string
          writeOnly: true
        collectionSiteLandowner:
          type: string
          writeOnly: true
        collectionSiteName:
          type: string
          writeOnly: true
        collectionSiteNotes:
          type: string
          writeOnly: true
        collectionSource:
          type: string
          writeOnly: true
          enum:
          - Wild
          - Reintroduced
          - Cultivated
          - Other
        collectors:
          type: array
          writeOnly: true
          items:
            type: string
        dryingEndDate:
          type: string
          format: date
          writeOnly: true
        facilityId:
          type: integer
          format: int64
          writeOnly: true
        notes:
          type: string
          writeOnly: true
        plantId:
          type: string
          writeOnly: true
        plantsCollectedFrom:
          type: integer
          description: Estimated number of plants the seeds were collected from.
          format: int32
          writeOnly: true
        receivedDate:
          type: string
          format: date
          writeOnly: true
        remainingQuantity:
          description: "Quantity of seeds remaining in the accession. If this is different\
            \ than the existing value, it is considered a new observation, and the\
            \ new value will override any previously-calculated remaining quantities."
          allOf:
          - $ref: '#/components/schemas/SeedQuantityPayload'
        speciesId:
          type: integer
          format: int64
          writeOnly: true
        state:
          type: string
          writeOnly: true
          enum:
          - Awaiting Check-In
          - Pending
          - Awaiting Processing
          - Processing
          - Processed
          - Drying
          - Dried
          - In Storage
          - Withdrawn
          - Used Up
          - Nursery
        storageLocation:
          type: string
          writeOnly: true
        subsetCount:
          type: integer
          format: int32
          writeOnly: true
        subsetWeight:
          description: "Weight of subset of seeds. Units must be a weight measurement,\
            \ not \"Seeds\"."
          allOf:
          - $ref: '#/components/schemas/SeedQuantityPayload'
        viabilityPercent:
          type: integer
          format: int32
          writeOnly: true
    UpdateAccessionResponsePayloadV2:
      required:
      - accession
      - status
      type: object
      properties:
        accession:
          $ref: '#/components/schemas/AccessionPayloadV2'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    UpdateAutomationRequestPayload:
      required:
      - name
      - type
      type: object
      properties:
        type:
          type: string
        name:
          type: string
        description:
          type: string
        deviceId:
          type: integer
          format: int64
        timeseriesName:
          type: string
        verbosity:
          type: integer
          format: int32
        lowerThreshold:
          type: number
          format: double
        upperThreshold:
          type: number
          format: double
        settings:
          type: object
          additionalProperties:
            type: object
    UpdateBatchQuantitiesRequestPayload:
      required:
      - germinatingQuantity
      - notReadyQuantity
      - readyQuantity
      - version
      type: object
      properties:
        germinatingQuantity:
          minimum: 0
          type: integer
          format: int32
        notReadyQuantity:
          minimum: 0
          type: integer
          format: int32
        readyQuantity:
          minimum: 0
          type: integer
          format: int32
        version:
          type: integer
          format: int32
    UpdateBatchRequestPayload:
      required:
      - version
      type: object
      properties:
        notes:
          type: string
        readyByDate:
          type: string
          format: date
        version:
          type: integer
          format: int32
    UpdateDeviceRequestPayload:
      required:
      - make
      - model
      - name
      - type
      type: object
      properties:
        name:
          type: string
          description: Name of this device.
          example: BMU-1
        type:
          type: string
          description: High-level type of the device. Device manager may use this
            in conjunction with the make and model to determine which metrics to report.
          example: inverter
        make:
          type: string
          description: Name of device manufacturer.
          example: InHand Networks
        model:
          type: string
          description: Model number or model name of the device.
          example: IR915L
        protocol:
          type: string
          description: Device manager protocol name.
          example: modbus
        address:
          type: string
          description: "Protocol-specific address of device, e.g., an IP address or\
            \ a Bluetooth device ID."
          example: 192.168.1.100
        port:
          type: integer
          description: Port number if relevant for the protocol.
          format: int32
          example: 50000
        settings:
          type: object
          description: Protocol- and device-specific custom settings. This is an arbitrary
            JSON object; the exact settings depend on the device type.
        verbosity:
          type: integer
          description: Level of diagnostic information to log.
          format: int32
        parentId:
          type: integer
          description: "ID of parent device such as a hub or gateway, if any. The\
            \ parent device must exist."
          format: int64
    UpdateFacilityRequestPayload:
      required:
      - name
      type: object
      properties:
        description:
          type: string
        name:
          type: string
    UpdateNotificationRequestPayload:
      required:
      - read
      type: object
      properties:
        read:
          type: boolean
    UpdateNotificationsRequestPayload:
      required:
      - read
      type: object
      properties:
        read:
          type: boolean
        organizationId:
          type: integer
          format: int64
    UpdateOrganizationRequestPayload:
      required:
      - name
      type: object
      properties:
        countryCode:
          maxLength: 2
          minLength: 2
          type: string
          description: ISO 3166 alpha-2 code of organization's country.
          example: AU
        countrySubdivisionCode:
          maxLength: 6
          minLength: 4
          type: string
          description: "ISO 3166-2 code of organization's country subdivision (state,\
            \ province, region, etc.) This is the full ISO 3166-2 code including the\
            \ country prefix. If this is set, countryCode must also be set."
          example: US-HI
        description:
          type: string
        name:
          type: string
    UpdateOrganizationUserRequestPayload:
      required:
      - role
      type: object
      properties:
        role:
          type: string
          enum:
          - Contributor
          - Manager
          - Admin
          - Owner
    UpdateUserPreferencesRequestPayload:
      required:
      - preferences
      type: object
      properties:
        organizationId:
          type: integer
          description: "If present, update the user's per-organization preferences\
            \ for this organization. If not present, update the user's global preferences."
          format: int64
        preferences:
          type: object
    UpdateUserRequestPayload:
      required:
      - firstName
      - lastName
      type: object
      properties:
        emailNotificationsEnabled:
          type: boolean
          description: "If true, the user wants to receive all the notifications for\
            \ their organizations via email. This does not apply to certain kinds\
            \ of notifications such as \"You've been added to a new organization.\"\
            \ If null, leave the existing value as-is."
        firstName:
          type: string
        lastName:
          type: string
    UpdateViabilityTestRequestPayload:
      required:
      - seedsTested
      type: object
      properties:
        endDate:
          type: string
          format: date
        notes:
          type: string
        seedsCompromised:
          type: integer
          format: int32
        seedsEmpty:
          type: integer
          format: int32
        seedsFilled:
          type: integer
          format: int32
        seedsTested:
          minimum: 1
          type: integer
          format: int32
        seedType:
          type: string
          enum:
          - Fresh
          - Stored
        startDate:
          type: string
          format: date
        substrate:
          type: string
          enum:
          - Nursery Media
          - Agar
          - Paper
          - Other
          - Sand
          - Media Mix
          - Soil
          - Moss
          - Perlite/Vermiculite
        testResults:
          type: array
          items:
            $ref: '#/components/schemas/ViabilityTestResultPayload'
        treatment:
          type: string
          enum:
          - Soak
          - Scarify
          - Chemical
          - Stratification
          - Other
          - Light
        withdrawnByUserId:
          type: integer
          description: "ID of user who withdrew seeds to perform the test. If non-null,\
            \ the current user must have permission to see the referenced user's membership\
            \ details in the organization. If absent or null, the existing value is\
            \ left unchanged."
          format: int64
    UpdateWithdrawalRequestPayload:
      type: object
      properties:
        date:
          type: string
          format: date
          writeOnly: true
        purpose:
          type: string
          writeOnly: true
          enum:
          - Propagation
          - Outreach or Education
          - Research
          - Broadcast
          - Share with Another Site
          - Other
          - Viability Testing
          - Out-planting
          - Nursery
        notes:
          type: string
          writeOnly: true
        withdrawnByUserId:
          type: integer
          description: "ID of the user who withdrew the seeds. Default is the withdrawal's\
            \ existing user ID. If non-null, the current user must have permission\
            \ to read the referenced user's membership details in the organization."
          format: int64
          writeOnly: true
        withdrawnQuantity:
          description: "Quantity of seeds withdrawn. For viability testing withdrawals,\
            \ this is always the same as the test's \"seedsTested\" value. Otherwise,\
            \ it is a user-supplied value. If this quantity is in weight and the remaining\
            \ quantity of the accession is in seeds or vice versa, the accession must\
            \ have a subset weight and count."
          allOf:
          - $ref: '#/components/schemas/SeedQuantityPayload'
    UploadFileResponsePayload:
      required:
      - id
      - status
      type: object
      properties:
        id:
          type: integer
          description: ID of uploaded file. This may be used to poll for the file's
            status.
          format: int64
        status:
          $ref: '#/components/schemas/SuccessOrError'
    UploadProblemPayload:
      required:
      - type
      type: object
      properties:
        fieldName:
          type: string
          description: Name of the field with the problem. Absent if the problem isn't
            specific to a single field.
        message:
          type: string
          description: Human-readable description of the problem.
        position:
          type: integer
          description: Position (row number) of the record with the problem.
          format: int32
        type:
          type: string
          enum:
          - Unrecognized Value
          - Missing Required Value
          - Duplicate Value
          - Malformed Value
        value:
          type: string
          description: The value that caused the problem. Absent if the problem wasn't
            caused by a specific field value.
      description: List of conditions that might cause the user to want to cancel
        the upload but that can be automatically resolved if desired.
    UserProfilePayload:
      required:
      - email
      - emailNotificationsEnabled
      - id
      type: object
      properties:
        id:
          type: integer
          description: "User's unique ID. This should not be shown to the user, but\
            \ is a required input to some API endpoints."
          format: int64
        email:
          type: string
        emailNotificationsEnabled:
          type: boolean
          description: "If true, the user wants to receive all the notifications for\
            \ their organizations via email. This does not apply to certain kinds\
            \ of notifications such as \"You've been added to a new organization.\""
        firstName:
          type: string
        lastName:
          type: string
    VersionsEntryPayload:
      required:
      - appName
      - minimumVersion
      - platform
      - recommendedVersion
      type: object
      properties:
        appName:
          type: string
        platform:
          type: string
        minimumVersion:
          type: string
        recommendedVersion:
          type: string
    VersionsResponsePayload:
      required:
      - status
      - versions
      type: object
      properties:
        versions:
          type: array
          items:
            $ref: '#/components/schemas/VersionsEntryPayload'
        status:
          $ref: '#/components/schemas/SuccessOrError'
    ViabilityTestResultPayload:
      required:
      - recordingDate
      - seedsGerminated
      type: object
      properties:
        recordingDate:
          type: string
          format: date
        seedsGerminated:
          type: integer
          format: int32
  securitySchemes:
    cookie:
      type: apiKey
      description: Session cookie
      name: SESSION
      in: cookie
    openId:
      type: openIdConnect
      description: OpenID Connect
      openIdConnectUrl: http://dummy/realms/dummy/.well-known/openid-configuration
